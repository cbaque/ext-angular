(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser-dynamic')) :
    typeof define === 'function' && define.amd ? define('@sencha/ext-angular', ['exports', '@angular/core', '@angular/platform-browser-dynamic'], factory) :
    (global = global || self, factory((global.sencha = global.sencha || {}, global.sencha['ext-angular'] = {}), global.ng.core));
}(this, function (exports, core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    var ExtAngularBootstrapService = /** @class */ (function () {
        function ExtAngularBootstrapService(componentFactoryResolver, appRef, injector) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.appRef = appRef;
            this.injector = injector;
        }
        ExtAngularBootstrapService.prototype.appendComponentToViewport = function () {
            //console.log("In appendComponentToViewport")
            if (!this.bootstrapComponent) {
                throw new Error("Bootstrap component not set. Please use extAngularService.setBootStrapComponent(yourComponent) to setup bootstrap component from your root module constructor");
            }
            //console.log("bootstrapComponent : " + this.bootstrapComponent)
            var componentRef = this.componentFactoryResolver
                .resolveComponentFactory(this.bootstrapComponent)
                .create(this.injector);
            this.appRef.attachView(componentRef.hostView);
            var domElem = componentRef.hostView
                .rootNodes[0];
            var root = document.getElementsByClassName('x-viewport-body-el')[0];
            root.appendChild(domElem);
        };
        ExtAngularBootstrapService.prototype.setBootStrapComponent = function (component) {
            //console.log("In setBootStrapComponent")
            this.bootstrapComponent = component;
        };
        ExtAngularBootstrapService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ExtAngularBootstrapService_Factory() { return new ExtAngularBootstrapService(core.ɵɵinject(core.ComponentFactoryResolver), core.ɵɵinject(core.ApplicationRef), core.ɵɵinject(core.INJECTOR)); }, token: ExtAngularBootstrapService, providedIn: "root" });
        ExtAngularBootstrapService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __metadata("design:paramtypes", [core.ComponentFactoryResolver,
                core.ApplicationRef,
                core.Injector])
        ], ExtAngularBootstrapService);
        return ExtAngularBootstrapService;
    }());

    var ExtAngularBootstrapComponent = /** @class */ (function () {
        function ExtAngularBootstrapComponent(extAngularService) {
            this.extAngularService = extAngularService;
            //console.log("In App constructor")
            this.extAngularService.appendComponentToViewport();
        }
        ExtAngularBootstrapComponent = __decorate([
            core.Component({
                selector: 'app-root',
                template: ""
            }),
            __metadata("design:paramtypes", [ExtAngularBootstrapService])
        ], ExtAngularBootstrapComponent);
        return ExtAngularBootstrapComponent;
    }());

    var base = /** @class */ (function () {
        function base(nativeElement, metaData, hostComponent) {
            var _this = this;
            this.metaData = metaData;
            this.hostComponent = hostComponent;
            this._extChildren = false;
            this.q = null;
            this._nativeElement = nativeElement;
            this._hostComponent = hostComponent;
            metaData.EVENTNAMES.forEach(function (event, n) {
                if (event != 'fullscreen') {
                    _this[event] = new core.EventEmitter();
                }
                else {
                    _this[event + 'event'] = new core.EventEmitter();
                }
            });
        }
        base.prototype.baseOnInit = function (metaData) {
            //console.log(`ngOnInit: ${metaData.XTYPE}`)
            var me = this;
            var o = {};
            o.xtype = metaData.XTYPE;
            var listenersProvided = false;
            for (var i = 0; i < me.metaData.PROPERTIES.length; i++) {
                var prop = me.metaData.PROPERTIES[i];
                if (prop == 'handler') {
                    if (me[prop] != undefined) {
                        o[prop] = me[prop];
                    }
                }
                //need to handle listeners coming in here
                if ((o.xtype === 'cartesian' || o.xtype === 'polar') && prop === 'layout') ;
                else if (prop == 'listeners' && me[prop] != undefined) {
                    o[prop] = me[prop];
                    listenersProvided = true;
                }
                else {
                    if (me[prop] != undefined &&
                        prop != 'listeners' &&
                        prop != 'config' &&
                        prop != 'handler' &&
                        prop != 'fitToParent') {
                        o[prop] = me[prop];
                    }
                }
            }
            if (true === me.fitToParent) {
                o.top = 0,
                    o.left = 0,
                    o.width = '100%',
                    o.height = '100%';
            }
            if (me.config !== {}) {
                Ext.apply(o, me.config);
            }
            if (!listenersProvided) {
                o.listeners = {};
                var EVENTS = metaData.EVENTS;
                EVENTS.forEach(function (event, index, array) {
                    var eventname = event.name;
                    var eventparameters = event.parameters;
                    o.listeners[eventname] = function () {
                        var parameters = eventparameters;
                        var parms = parameters.split(',');
                        var args = Array.prototype.slice.call(arguments);
                        var emitparms = {};
                        for (var i_1 = 0, j = parms.length; i_1 < j; i_1++) {
                            emitparms[parms[i_1]] = args[i_1];
                        }
                        me[eventname].emit(emitparms);
                    };
                });
            }
            if (this._nativeElement.parentElement != null) {
                o.renderTo = this._nativeElement;
            }
            if (o.xtype == 'dialog') {
                o.renderTo = undefined;
            }
            this.ext = Ext.create(o);
        };
        base.prototype.baseAfterContentInit = function () {
            if (this._extitems.length == 1) {
                if (this._hostComponent != null) {
                    this.ext.setHtml(this._extitem.nativeElement);
                }
            }
            if (this._extroutes.length == 1) {
                this.ext.setHtml(this._extroute.nativeElement);
            }
            if (this._hostComponent != null) {
                var parentCmp = this._hostComponent.ext;
                var childCmp = this.ext;
                this.addTheChild(parentCmp, childCmp);
            }
            this['ready'].emit(this);
        };
        base.prototype.addTheChild = function (parentCmp, childCmp) {
            var parentxtype = parentCmp.xtype;
            var childxtype = childCmp.xtype;
            if (this.ext.initialConfig.align != undefined) {
                if (parentxtype != 'titlebar' && parentxtype != 'grid' && parentxtype != 'button') {
                    console.error('Can only use align property if parent is a Titlebar or Grid or Button');
                    return;
                }
            }
            if (parentxtype === 'grid' || parentxtype === 'lockedgrid') {
                if (childxtype === 'column' || childxtype === 'treecolumn' || childxtype === 'textcolumn' || childxtype === 'checkcolumn' || childxtype === 'datecolumn' || childxtype === 'rownumberer' || childxtype === 'numbercolumn' || childxtype === 'booleancolumn') {
                    parentCmp.addColumn(childCmp);
                    return;
                }
                else if ((childxtype === 'toolbar' || childxtype === 'titlebar') && parentCmp.getHideHeaders != undefined) {
                    if (parentCmp.getHideHeaders() === false) {
                        //var j = parentCmp.items.items.length;
                        parentCmp.insert(1, childCmp);
                        return;
                    }
                    else {
                        parentCmp.add(childCmp);
                        return;
                    }
                }
                else {
                    console.log('unhandled else in addTheChild');
                    console.log(parentxtype);
                    console.log(childxtype);
                }
            }
            if (childxtype === 'tooltip') {
                parentCmp.setTooltip(childCmp);
                return;
            }
            if (childxtype === 'plugin') {
                parentCmp.setPlugin(childCmp);
                return;
            }
            else if (parentxtype === 'button' ||
                parentxtype === 'menuitem' ||
                parentxtype === 'menucheckitem') {
                if (childxtype === 'menu') {
                    parentCmp.setMenu(childCmp);
                    return;
                }
                else {
                    console.log('child not added');
                }
            }
            if (childxtype === 'toolbar' && Ext.isClassic === true) {
                parentCmp.addDockedItems(childCmp);
                return;
            }
            else if ((childxtype === 'toolbar' || childxtype === 'titlebar') && parentCmp.getHideHeaders != undefined) {
                if (parentCmp.getHideHeaders() === false) {
                    //var j: any = parentCmp.items.items.length
                    //parentCmp.insert(j - 1, childCmp)
                    parentCmp.insert(1, childCmp);
                    return;
                }
                else {
                    parentCmp.add(childCmp);
                    return;
                }
            }
            if (parentCmp.add != undefined) {
                parentCmp.add(childCmp);
                return;
            }
            console.log('child not added');
        };
        base.prototype.ngOnChanges = function (changes) {
            for (var propName in changes) {
                var verb = '';
                if (changes[propName].firstChange === true) {
                    verb = 'initialized';
                }
                else {
                    verb = 'changed';
                }
                var val = changes[propName].currentValue;
                if (this.ext != undefined) {
                    var capPropName = propName.charAt(0).toUpperCase() + propName.slice(1);
                    var setFunction = 'set' + capPropName;
                    if (this.ext[setFunction] != undefined) {
                        this.ext[setFunction](val);
                    }
                    else {
                        console.error(setFunction + ' not found for ' + this.ext.xtype);
                    }
                }
                else {
                    if (verb == 'changed') {
                        console.log('change needed and ext not defined');
                    }
                }
            }
            //console.log(`OnChanges: ${changesMsgs.join('; ')}`)
        };
        base.prototype.ngOnDestroy = function () {
            var childCmp;
            var parentCmp;
            try {
                childCmp = this.ext;
                if (this._hostComponent != null) {
                    parentCmp = this._hostComponent.ext;
                    if (parentCmp.xtype == 'button' && childCmp.xtype == 'menu') {
                        //console.log('button/menu not deleted')
                    }
                    else if (parentCmp.xtype == 'carousel') {
                        //console.log('carousel parent not deleted')
                    }
                    else if (parentCmp.xtype == 'grid' && childCmp.xtype == 'column') {
                        //console.log('grid/column not deleted')
                        //console.log(childCmp)
                    }
                    else if (parentCmp.xtype == 'segmentedbutton' && childCmp.xtype == 'button') {
                        //console.log('segmentedbutton/button not deleted')
                    }
                    else if (parentCmp.xtype == 'button' && childCmp.xtype == 'tooltip') {
                        //console.log('button/tooltip not deleted')
                    }
                    else if (parentCmp.xtype == 'titlebar' && childCmp.xtype == 'button') {
                        //console.log('titlebar/button not deleted')
                    }
                    else if (parentCmp.xtype == 'titlebar' && childCmp.xtype == 'searchfield') {
                        //console.log('titlebar/searchfield not deleted')
                    }
                    else {
                        parentCmp.remove([childCmp]);
                        childCmp.destroy();
                    }
                }
                else {
                    if (childCmp != undefined) {
                        childCmp.destroy();
                    }
                    else {
                        console.log('no destroy');
                    }
                }
            }
            catch (e) {
                console.error(e);
                console.log('*****');
                console.log(parentCmp);
                console.log(childCmp);
                console.log('*****');
            }
        };
        __decorate([
            core.ContentChild('extroute', { static: false }),
            __metadata("design:type", Object)
        ], base.prototype, "_extroute", void 0);
        __decorate([
            core.ContentChildren('extroute'),
            __metadata("design:type", core.QueryList)
        ], base.prototype, "_extroutes", void 0);
        __decorate([
            core.ContentChild('extitem', { static: false }),
            __metadata("design:type", Object)
        ], base.prototype, "_extitem", void 0);
        __decorate([
            core.ContentChildren('extitem'),
            __metadata("design:type", core.QueryList)
        ], base.prototype, "_extitems", void 0);
        return base;
    }());

    var actionsheetMetaData = /** @class */ (function () {
        function actionsheetMetaData() {
        }
        actionsheetMetaData.XTYPE = 'actionsheet';
        actionsheetMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'cover',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enter',
            'exit',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'reveal',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'side',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchX',
            'stretchY',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        actionsheetMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,actionsheet,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'actionsheet,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'actionsheet' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'actionsheet' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'actionsheet,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'actionsheet' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'actionsheet,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'actionsheet' },
            { name: 'deactivate', parameters: 'oldActiveItem,actionsheet,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'actionsheet' },
            { name: 'drawershow', parameters: 'actionsheet' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'actionsheet' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'actionsheet,event' },
            { name: 'focusenter', parameters: 'actionsheet,event' },
            { name: 'focusleave', parameters: 'actionsheet,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'actionsheet,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'actionsheet,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'actionsheet,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'actionsheet,context' },
            { name: 'resizedragcancel', parameters: 'actionsheet,context' },
            { name: 'resizedragend', parameters: 'actionsheet,context' },
            { name: 'resizedragstart', parameters: 'actionsheet,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'actionsheet' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        actionsheetMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return actionsheetMetaData;
    }());
    var ExtActionsheetComponent = /** @class */ (function (_super) {
        __extends(ExtActionsheetComponent, _super);
        function ExtActionsheetComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, actionsheetMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtActionsheetComponent_1 = ExtActionsheetComponent;
        ExtActionsheetComponent.prototype.ngOnInit = function () {
            this.baseOnInit(actionsheetMetaData);
        };
        ExtActionsheetComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtActionsheetComponent_1;
        ExtActionsheetComponent = ExtActionsheetComponent_1 = __decorate([
            core.Component({
                selector: 'actionsheet',
                inputs: actionsheetMetaData.PROPERTIES,
                outputs: actionsheetMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtActionsheetComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtActionsheetComponent);
        return ExtActionsheetComponent;
    }(base));

    var audioMetaData = /** @class */ (function () {
        function audioMetaData() {
        }
        audioMetaData.XTYPE = 'audio';
        audioMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoPause',
            'autoResume',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'controls',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'loop',
            'margin',
            'maxHeight',
            'maxWidth',
            'media',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'muted',
            'name',
            'nameable',
            'padding',
            'plugins',
            'preload',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'viewModel',
            'volume',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        audioMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'audio' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'audio,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'ended', parameters: 'audio,time' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'audio,event' },
            { name: 'focusenter', parameters: 'audio,event' },
            { name: 'focusleave', parameters: 'audio,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'mutedchange', parameters: 'audio,muted' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pause', parameters: 'audio,time' },
            { name: 'play', parameters: 'audio' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'stop', parameters: 'audio' },
            { name: 'timeupdate', parameters: 'audio,time' },
            { name: 'tofront', parameters: 'audio' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'volumechange', parameters: 'audio,volume' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        audioMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'ended',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'mutedchange',
            'orientationchange',
            'painted',
            'pause',
            'play',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'stop',
            'timeupdate',
            'tofront',
            'topchange',
            'updatedata',
            'volumechange',
            'widthchange',
            'ready'
        ];
        return audioMetaData;
    }());
    var ExtAudioComponent = /** @class */ (function (_super) {
        __extends(ExtAudioComponent, _super);
        function ExtAudioComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, audioMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtAudioComponent_1 = ExtAudioComponent;
        ExtAudioComponent.prototype.ngOnInit = function () {
            this.baseOnInit(audioMetaData);
        };
        ExtAudioComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtAudioComponent_1;
        ExtAudioComponent = ExtAudioComponent_1 = __decorate([
            core.Component({
                selector: 'audio',
                inputs: audioMetaData.PROPERTIES,
                outputs: audioMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtAudioComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtAudioComponent);
        return ExtAudioComponent;
    }(base));

    var breadcrumbbarMetaData = /** @class */ (function () {
        function breadcrumbbarMetaData() {
        }
        breadcrumbbarMetaData.XTYPE = 'breadcrumbbar';
        breadcrumbbarMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'btnCls',
            'buttonConfig',
            'buttonUI',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultButtonUI',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'displayField',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showIcons',
            'showMenuIcons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'title',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'useSplitButtons',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        breadcrumbbarMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,breadcrumbbar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'breadcrumbbar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'breadcrumbbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'breadcrumbbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'breadcrumbbar,node,prevNode' },
            { name: 'deactivate', parameters: 'oldActiveItem,breadcrumbbar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'breadcrumbbar,event' },
            { name: 'focusenter', parameters: 'breadcrumbbar,event' },
            { name: 'focusleave', parameters: 'breadcrumbbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'breadcrumbbar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'breadcrumbbar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'breadcrumbbar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'selectionchange', parameters: 'breadcrumbbar,node,prevNode' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'breadcrumbbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        breadcrumbbarMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'selectionchange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return breadcrumbbarMetaData;
    }());
    var ExtBreadcrumbbarComponent = /** @class */ (function (_super) {
        __extends(ExtBreadcrumbbarComponent, _super);
        function ExtBreadcrumbbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, breadcrumbbarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtBreadcrumbbarComponent_1 = ExtBreadcrumbbarComponent;
        ExtBreadcrumbbarComponent.prototype.ngOnInit = function () {
            this.baseOnInit(breadcrumbbarMetaData);
        };
        ExtBreadcrumbbarComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtBreadcrumbbarComponent_1;
        ExtBreadcrumbbarComponent = ExtBreadcrumbbarComponent_1 = __decorate([
            core.Component({
                selector: 'breadcrumbbar',
                inputs: breadcrumbbarMetaData.PROPERTIES,
                outputs: breadcrumbbarMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtBreadcrumbbarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtBreadcrumbbarComponent);
        return ExtBreadcrumbbarComponent;
    }(base));

    var buttonMetaData = /** @class */ (function () {
        function buttonMetaData() {
        }
        buttonMetaData.XTYPE = 'button';
        buttonMetaData.PROPERTIES = [
            'alignSelf',
            'allowDepress',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'arrow',
            'arrowAlign',
            'autoEvent',
            'axisLock',
            'badgeText',
            'bind',
            'border',
            'bottom',
            'buttonType',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableToggle',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'pressed',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchMenu',
            'style',
            'tabIndex',
            'text',
            'textAlign',
            'toFrontOnShow',
            'toggleHandler',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        buttonMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepressedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'button' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'button,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'button,event' },
            { name: 'focusenter', parameters: 'button,event' },
            { name: 'focusleave', parameters: 'button,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'pressedchange', parameters: 'sender,value,oldValue' },
            { name: 'release', parameters: 'button,e' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'button,e' },
            { name: 'tofront', parameters: 'button' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        buttonMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforepressedchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'pressedchange',
            'release',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return buttonMetaData;
    }());
    var ExtButtonComponent = /** @class */ (function (_super) {
        __extends(ExtButtonComponent, _super);
        function ExtButtonComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, buttonMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtButtonComponent_1 = ExtButtonComponent;
        ExtButtonComponent.prototype.ngOnInit = function () {
            this.baseOnInit(buttonMetaData);
        };
        ExtButtonComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtButtonComponent_1;
        ExtButtonComponent = ExtButtonComponent_1 = __decorate([
            core.Component({
                selector: 'button',
                inputs: buttonMetaData.PROPERTIES,
                outputs: buttonMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtButtonComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtButtonComponent);
        return ExtButtonComponent;
    }(base));

    var calendar_eventMetaData = /** @class */ (function () {
        function calendar_eventMetaData() {
        }
        calendar_eventMetaData.XTYPE = 'calendar-event';
        calendar_eventMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'defaultTitle',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'endDate',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'mode',
            'model',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'palette',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'resize',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'startDate',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'timeFormat',
            'title',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'view',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_eventMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-event' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-event,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-event,event' },
            { name: 'focusenter', parameters: 'calendar-event,event' },
            { name: 'focusleave', parameters: 'calendar-event,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-event' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_eventMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendar_eventMetaData;
    }());
    var ExtCalendar_eventComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_eventComponent, _super);
        function ExtCalendar_eventComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_eventMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_eventComponent_1 = ExtCalendar_eventComponent;
        ExtCalendar_eventComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_eventMetaData);
        };
        ExtCalendar_eventComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_eventComponent_1;
        ExtCalendar_eventComponent = ExtCalendar_eventComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-event',
                inputs: calendar_eventMetaData.PROPERTIES,
                outputs: calendar_eventMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_eventComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_eventComponent);
        return ExtCalendar_eventComponent;
    }(base));

    var calendar_form_addMetaData = /** @class */ (function () {
        function calendar_form_addMetaData() {
        }
        calendar_form_addMetaData.XTYPE = 'calendar-form-add';
        calendar_form_addMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allDayField',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'api',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'baseParams',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'bubbleDirty',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'calendarField',
            'cancelButton',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultEndTime',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultStartTime',
            'defaultToolWeights',
            'defaultType',
            'descriptionField',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'dropButton',
            'enableSubmissionForm',
            'enctype',
            'endDateField',
            'endTimeField',
            'event',
            'fieldDefaults',
            'fieldSeparators',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'inputBorders',
            'instanceCls',
            'itemId',
            'items',
            'jsonSubmit',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'method',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multipartDetection',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'paramOrder',
            'paramsAsHash',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'saveButton',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'standardSubmit',
            'startDateField',
            'startTimeField',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submitOnAction',
            'tabIndex',
            'tbar',
            'timeout',
            'title',
            'titleAlign',
            'titleCollapse',
            'titleField',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackResetOnLoad',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'view',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_form_addMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-form-add,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-form-add,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-form-add' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'calendar-form-add' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-form-add,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'calendar-form-add,values,options,e' },
            { name: 'beforetofront', parameters: 'calendar-form-add' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-form-add,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'calendar-form-add' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-form-add' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-form-add,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'calendar-form-add,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-form-add' },
            { name: 'drawershow', parameters: 'calendar-form-add' },
            { name: 'drop', parameters: 'calendar-form-add' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'calendar-form-add,result' },
            { name: 'expand', parameters: 'calendar-form-add' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-form-add,event' },
            { name: 'focusenter', parameters: 'calendar-form-add,event' },
            { name: 'focusleave', parameters: 'calendar-form-add,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-form-add,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-form-add,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-form-add,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-form-add,context' },
            { name: 'resizedragcancel', parameters: 'calendar-form-add,context' },
            { name: 'resizedragend', parameters: 'calendar-form-add,context' },
            { name: 'resizedragstart', parameters: 'calendar-form-add,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'save', parameters: 'calendar-form-add,context' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'calendar-form-add,result,e' },
            { name: 'tofront', parameters: 'calendar-form-add' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_form_addMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforesubmit',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'cancel',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'drop',
            'erased',
            'exception',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'save',
            'scrollablechange',
            'show',
            'submit',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendar_form_addMetaData;
    }());
    var ExtCalendar_form_addComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_form_addComponent, _super);
        function ExtCalendar_form_addComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_form_addMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_form_addComponent_1 = ExtCalendar_form_addComponent;
        ExtCalendar_form_addComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_form_addMetaData);
        };
        ExtCalendar_form_addComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_form_addComponent_1;
        ExtCalendar_form_addComponent = ExtCalendar_form_addComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-form-add',
                inputs: calendar_form_addMetaData.PROPERTIES,
                outputs: calendar_form_addMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_form_addComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_form_addComponent);
        return ExtCalendar_form_addComponent;
    }(base));

    var calendar_calendar_pickerMetaData = /** @class */ (function () {
        function calendar_calendar_pickerMetaData() {
        }
        calendar_calendar_pickerMetaData.XTYPE = 'calendar-calendar-picker';
        calendar_calendar_pickerMetaData.PROPERTIES = [
            'alignSelf',
            'alignTarget',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoFocus',
            'autoFocusLast',
            'autoHideInputMask',
            'autoLoadOnValue',
            'autoSelect',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'chipView',
            'clearable',
            'cls',
            'collapseOnSelect',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'delimiter',
            'dirty',
            'disabled',
            'displayed',
            'displayField',
            'displayTpl',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'forceSelection',
            'fullscreen',
            'height',
            'hidden',
            'hiddenName',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemCls',
            'itemId',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multiSelect',
            'name',
            'nameable',
            'options',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'recordCreator',
            'recordCreatorScope',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selection',
            'selectOnTab',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'valueCollection',
            'valueField',
            'valueNotFoundText',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_calendar_pickerMetaData.EVENTS = [
            { name: 'action', parameters: 'calendar-calendar-picker,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-calendar-picker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-calendar-picker,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'calendar-calendar-picker,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'calendar-calendar-picker,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'calendar-calendar-picker,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'calendar-calendar-picker,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-calendar-picker,e' },
            { name: 'focusenter', parameters: 'calendar-calendar-picker,event' },
            { name: 'focusleave', parameters: 'calendar-calendar-picker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'calendar-calendar-picker,e' },
            { name: 'keyup', parameters: 'calendar-calendar-picker,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'calendar-calendar-picker,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'calendar-calendar-picker,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'calendar-calendar-picker,newValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-calendar-picker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_calendar_pickerMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendar_calendar_pickerMetaData;
    }());
    var ExtCalendar_calendar_pickerComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_calendar_pickerComponent, _super);
        function ExtCalendar_calendar_pickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_calendar_pickerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_calendar_pickerComponent_1 = ExtCalendar_calendar_pickerComponent;
        ExtCalendar_calendar_pickerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_calendar_pickerMetaData);
        };
        ExtCalendar_calendar_pickerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_calendar_pickerComponent_1;
        ExtCalendar_calendar_pickerComponent = ExtCalendar_calendar_pickerComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-calendar-picker',
                inputs: calendar_calendar_pickerMetaData.PROPERTIES,
                outputs: calendar_calendar_pickerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_calendar_pickerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_calendar_pickerComponent);
        return ExtCalendar_calendar_pickerComponent;
    }(base));

    var calendar_form_editMetaData = /** @class */ (function () {
        function calendar_form_editMetaData() {
        }
        calendar_form_editMetaData.XTYPE = 'calendar-form-edit';
        calendar_form_editMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allDayField',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'api',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'baseParams',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'bubbleDirty',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'calendarField',
            'cancelButton',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultEndTime',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultStartTime',
            'defaultToolWeights',
            'defaultType',
            'descriptionField',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'dropButton',
            'enableSubmissionForm',
            'enctype',
            'endDateField',
            'endTimeField',
            'event',
            'fieldDefaults',
            'fieldSeparators',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'inputBorders',
            'instanceCls',
            'itemId',
            'items',
            'jsonSubmit',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'method',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multipartDetection',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'paramOrder',
            'paramsAsHash',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'saveButton',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'standardSubmit',
            'startDateField',
            'startTimeField',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submitOnAction',
            'tabIndex',
            'tbar',
            'timeout',
            'title',
            'titleAlign',
            'titleCollapse',
            'titleField',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackResetOnLoad',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'view',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_form_editMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-form-edit,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-form-edit,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-form-edit' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'calendar-form-edit' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-form-edit,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'calendar-form-edit,values,options,e' },
            { name: 'beforetofront', parameters: 'calendar-form-edit' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-form-edit,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'calendar-form-edit' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-form-edit' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-form-edit,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'calendar-form-edit,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-form-edit' },
            { name: 'drawershow', parameters: 'calendar-form-edit' },
            { name: 'drop', parameters: 'calendar-form-edit' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'calendar-form-edit,result' },
            { name: 'expand', parameters: 'calendar-form-edit' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-form-edit,event' },
            { name: 'focusenter', parameters: 'calendar-form-edit,event' },
            { name: 'focusleave', parameters: 'calendar-form-edit,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-form-edit,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-form-edit,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-form-edit,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-form-edit,context' },
            { name: 'resizedragcancel', parameters: 'calendar-form-edit,context' },
            { name: 'resizedragend', parameters: 'calendar-form-edit,context' },
            { name: 'resizedragstart', parameters: 'calendar-form-edit,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'save', parameters: 'calendar-form-edit,context' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'calendar-form-edit,result,e' },
            { name: 'tofront', parameters: 'calendar-form-edit' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_form_editMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforesubmit',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'cancel',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'drop',
            'erased',
            'exception',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'save',
            'scrollablechange',
            'show',
            'submit',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendar_form_editMetaData;
    }());
    var ExtCalendar_form_editComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_form_editComponent, _super);
        function ExtCalendar_form_editComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_form_editMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_form_editComponent_1 = ExtCalendar_form_editComponent;
        ExtCalendar_form_editComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_form_editMetaData);
        };
        ExtCalendar_form_editComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_form_editComponent_1;
        ExtCalendar_form_editComponent = ExtCalendar_form_editComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-form-edit',
                inputs: calendar_form_editMetaData.PROPERTIES,
                outputs: calendar_form_editMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_form_editComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_form_editComponent);
        return ExtCalendar_form_editComponent;
    }(base));

    var calendar_timefieldMetaData = /** @class */ (function () {
        function calendar_timefieldMetaData() {
        }
        calendar_timefieldMetaData.XTYPE = 'calendar-timefield';
        calendar_timefieldMetaData.PROPERTIES = [
            'alignSelf',
            'alignTarget',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoFocus',
            'autoFocusLast',
            'autoHideInputMask',
            'autoLoadOnValue',
            'autoSelect',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'chipView',
            'clearable',
            'cls',
            'collapseOnSelect',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'delimiter',
            'dirty',
            'disabled',
            'displayed',
            'displayField',
            'displayTpl',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'forceSelection',
            'fullscreen',
            'height',
            'hidden',
            'hiddenName',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemCls',
            'itemId',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multiSelect',
            'name',
            'nameable',
            'options',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'recordCreator',
            'recordCreatorScope',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selection',
            'selectOnTab',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'valueCollection',
            'valueField',
            'valueNotFoundText',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_timefieldMetaData.EVENTS = [
            { name: 'action', parameters: 'calendar-timefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-timefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-timefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'calendar-timefield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'calendar-timefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'calendar-timefield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'calendar-timefield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-timefield,e' },
            { name: 'focusenter', parameters: 'calendar-timefield,event' },
            { name: 'focusleave', parameters: 'calendar-timefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'calendar-timefield,e' },
            { name: 'keyup', parameters: 'calendar-timefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'calendar-timefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'calendar-timefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'calendar-timefield,newValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-timefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_timefieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendar_timefieldMetaData;
    }());
    var ExtCalendar_timefieldComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_timefieldComponent, _super);
        function ExtCalendar_timefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_timefieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_timefieldComponent_1 = ExtCalendar_timefieldComponent;
        ExtCalendar_timefieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_timefieldMetaData);
        };
        ExtCalendar_timefieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_timefieldComponent_1;
        ExtCalendar_timefieldComponent = ExtCalendar_timefieldComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-timefield',
                inputs: calendar_timefieldMetaData.PROPERTIES,
                outputs: calendar_timefieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_timefieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_timefieldComponent);
        return ExtCalendar_timefieldComponent;
    }(base));

    var calendar_daysheaderMetaData = /** @class */ (function () {
        function calendar_daysheaderMetaData() {
        }
        calendar_daysheaderMetaData.XTYPE = 'calendar-daysheader';
        calendar_daysheaderMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cellCls',
            'centered',
            'cls',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'format',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'visibleDays',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_daysheaderMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-daysheader' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-daysheader,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-daysheader,event' },
            { name: 'focusenter', parameters: 'calendar-daysheader,event' },
            { name: 'focusleave', parameters: 'calendar-daysheader,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-daysheader' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_daysheaderMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendar_daysheaderMetaData;
    }());
    var ExtCalendar_daysheaderComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_daysheaderComponent, _super);
        function ExtCalendar_daysheaderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_daysheaderMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_daysheaderComponent_1 = ExtCalendar_daysheaderComponent;
        ExtCalendar_daysheaderComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_daysheaderMetaData);
        };
        ExtCalendar_daysheaderComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_daysheaderComponent_1;
        ExtCalendar_daysheaderComponent = ExtCalendar_daysheaderComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-daysheader',
                inputs: calendar_daysheaderMetaData.PROPERTIES,
                outputs: calendar_daysheaderMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_daysheaderComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_daysheaderComponent);
        return ExtCalendar_daysheaderComponent;
    }(base));

    var calendar_weeksheaderMetaData = /** @class */ (function () {
        function calendar_weeksheaderMetaData() {
        }
        calendar_weeksheaderMetaData.XTYPE = 'calendar-weeksheader';
        calendar_weeksheaderMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cellCls',
            'centered',
            'cls',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'format',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'visibleDays',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_weeksheaderMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-weeksheader' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-weeksheader,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-weeksheader,event' },
            { name: 'focusenter', parameters: 'calendar-weeksheader,event' },
            { name: 'focusleave', parameters: 'calendar-weeksheader,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-weeksheader' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_weeksheaderMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendar_weeksheaderMetaData;
    }());
    var ExtCalendar_weeksheaderComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_weeksheaderComponent, _super);
        function ExtCalendar_weeksheaderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_weeksheaderMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_weeksheaderComponent_1 = ExtCalendar_weeksheaderComponent;
        ExtCalendar_weeksheaderComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_weeksheaderMetaData);
        };
        ExtCalendar_weeksheaderComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_weeksheaderComponent_1;
        ExtCalendar_weeksheaderComponent = ExtCalendar_weeksheaderComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-weeksheader',
                inputs: calendar_weeksheaderMetaData.PROPERTIES,
                outputs: calendar_weeksheaderMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_weeksheaderComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_weeksheaderComponent);
        return ExtCalendar_weeksheaderComponent;
    }(base));

    var calendar_listMetaData = /** @class */ (function () {
        function calendar_listMetaData() {
        }
        calendar_listMetaData.XTYPE = 'calendar-list';
        calendar_listMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'enableToggle',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'inline',
            'innerCls',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemId',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'lastSelected',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selected',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_listMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-list,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'calendar-list' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-list,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'calendar-list,location' },
            { name: 'childlongpress', parameters: 'calendar-list,location' },
            { name: 'childmouseenter', parameters: 'calendar-list,location' },
            { name: 'childmouseleave', parameters: 'calendar-list,location' },
            { name: 'childsingletap', parameters: 'calendar-list,location' },
            { name: 'childtap', parameters: 'calendar-list,location' },
            { name: 'childtaphold', parameters: 'calendar-list,location' },
            { name: 'childtouchcancel', parameters: 'calendar-list,location' },
            { name: 'childtouchend', parameters: 'calendar-list,location' },
            { name: 'childtouchmove', parameters: 'calendar-list,location' },
            { name: 'childtouchstart', parameters: 'calendar-list,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-list,newActiveItem' },
            { name: 'deselect', parameters: 'calendar-list,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-list,event' },
            { name: 'focusenter', parameters: 'calendar-list,event' },
            { name: 'focusleave', parameters: 'calendar-list,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemswipe', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtap', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'calendar-list,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'calendar-list,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'calendar-list' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-list,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'calendar-list,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'calendar-list' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_listMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'rowselection',
            'scrollablechange',
            'select',
            'selectionchange',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendar_listMetaData;
    }());
    var ExtCalendar_listComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_listComponent, _super);
        function ExtCalendar_listComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_listMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_listComponent_1 = ExtCalendar_listComponent;
        ExtCalendar_listComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_listMetaData);
        };
        ExtCalendar_listComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_listComponent_1;
        ExtCalendar_listComponent = ExtCalendar_listComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-list',
                inputs: calendar_listMetaData.PROPERTIES,
                outputs: calendar_listMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_listComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_listComponent);
        return ExtCalendar_listComponent;
    }(base));

    var calendar_dayMetaData = /** @class */ (function () {
        function calendar_dayMetaData() {
        }
        calendar_dayMetaData.XTYPE = 'calendar-day';
        calendar_dayMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'addForm',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'allowSelection',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'controlStoreRange',
            'data',
            'dayHeader',
            'dayHeaderFormat',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'displayOverlap',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'endTime',
            'eventDefaults',
            'eventRelayers',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightToday',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'resizeEvents',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showNowMarker',
            'standardButtons',
            'startTime',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tbar',
            'timeFormat',
            'timezoneOffset',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'view',
            'viewModel',
            'visibleDays',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_dayMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-day,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-day,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-day' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-day,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-day,context' },
            { name: 'beforeeventedit', parameters: 'calendar-day,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-day,context' },
            { name: 'beforeexpand', parameters: 'calendar-day' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-day,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-day' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-day,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-day' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-day,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-day' },
            { name: 'drawershow', parameters: 'calendar-day' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-day,context' },
            { name: 'eventdrop', parameters: 'calendar-day,context' },
            { name: 'eventedit', parameters: 'calendar-day,context' },
            { name: 'eventresize', parameters: 'calendar-day,context' },
            { name: 'eventtap', parameters: 'calendar-day,context' },
            { name: 'expand', parameters: 'calendar-day' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-day,event' },
            { name: 'focusenter', parameters: 'calendar-day,event' },
            { name: 'focusleave', parameters: 'calendar-day,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-day,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-day,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-day,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-day,context' },
            { name: 'resizedragcancel', parameters: 'calendar-day,context' },
            { name: 'resizedragend', parameters: 'calendar-day,context' },
            { name: 'resizedragstart', parameters: 'calendar-day,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-day' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-day,context' },
            { name: 'validateeventdrop', parameters: 'calendar-day,context' },
            { name: 'validateeventedit', parameters: 'calendar-day,context' },
            { name: 'validateeventresize', parameters: 'calendar-day,context' },
            { name: 'valuechange', parameters: 'calendar-day,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_dayMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeeventresizestart',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventresize',
            'eventtap',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'validateeventresize',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_dayMetaData;
    }());
    var ExtCalendar_dayComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_dayComponent, _super);
        function ExtCalendar_dayComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_dayMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_dayComponent_1 = ExtCalendar_dayComponent;
        ExtCalendar_dayComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_dayMetaData);
        };
        ExtCalendar_dayComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_dayComponent_1;
        ExtCalendar_dayComponent = ExtCalendar_dayComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-day',
                inputs: calendar_dayMetaData.PROPERTIES,
                outputs: calendar_dayMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_dayComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_dayComponent);
        return ExtCalendar_dayComponent;
    }(base));

    var calendar_daysMetaData = /** @class */ (function () {
        function calendar_daysMetaData() {
        }
        calendar_daysMetaData.XTYPE = 'calendar-days';
        calendar_daysMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'addForm',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'allowSelection',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'controlStoreRange',
            'data',
            'dayHeader',
            'dayHeaderFormat',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'displayOverlap',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'endTime',
            'eventDefaults',
            'eventRelayers',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightToday',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'resizeEvents',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showNowMarker',
            'standardButtons',
            'startTime',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tbar',
            'timeFormat',
            'timezoneOffset',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'view',
            'viewModel',
            'visibleDays',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_daysMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-days,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-days,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-days' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-days,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-days,context' },
            { name: 'beforeeventedit', parameters: 'calendar-days,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-days,context' },
            { name: 'beforeexpand', parameters: 'calendar-days' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-days,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-days' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-days,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-days' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-days,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-days' },
            { name: 'drawershow', parameters: 'calendar-days' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-days,context' },
            { name: 'eventdrop', parameters: 'calendar-days,context' },
            { name: 'eventedit', parameters: 'calendar-days,context' },
            { name: 'eventresize', parameters: 'calendar-days,context' },
            { name: 'eventtap', parameters: 'calendar-days,context' },
            { name: 'expand', parameters: 'calendar-days' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-days,event' },
            { name: 'focusenter', parameters: 'calendar-days,event' },
            { name: 'focusleave', parameters: 'calendar-days,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-days,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-days,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-days,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-days,context' },
            { name: 'resizedragcancel', parameters: 'calendar-days,context' },
            { name: 'resizedragend', parameters: 'calendar-days,context' },
            { name: 'resizedragstart', parameters: 'calendar-days,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-days' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-days,context' },
            { name: 'validateeventdrop', parameters: 'calendar-days,context' },
            { name: 'validateeventedit', parameters: 'calendar-days,context' },
            { name: 'validateeventresize', parameters: 'calendar-days,context' },
            { name: 'valuechange', parameters: 'calendar-days,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_daysMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeeventresizestart',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventresize',
            'eventtap',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'validateeventresize',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_daysMetaData;
    }());
    var ExtCalendar_daysComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_daysComponent, _super);
        function ExtCalendar_daysComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_daysMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_daysComponent_1 = ExtCalendar_daysComponent;
        ExtCalendar_daysComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_daysMetaData);
        };
        ExtCalendar_daysComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_daysComponent_1;
        ExtCalendar_daysComponent = ExtCalendar_daysComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-days',
                inputs: calendar_daysMetaData.PROPERTIES,
                outputs: calendar_daysMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_daysComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_daysComponent);
        return ExtCalendar_daysComponent;
    }(base));

    var calendar_monthMetaData = /** @class */ (function () {
        function calendar_monthMetaData() {
        }
        calendar_monthMetaData.XTYPE = 'calendar-month';
        calendar_monthMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'addForm',
            'addOnSelect',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'allowSelection',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'controlStoreRange',
            'data',
            'dayFormat',
            'dayHeader',
            'dayHeaderFormat',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'eventDefaults',
            'eventRelayers',
            'firstDayOfWeek',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightToday',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'overflowText',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showOverflow',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tbar',
            'timezoneOffset',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'view',
            'viewModel',
            'visibleDays',
            'visibleWeeks',
            'weekendDays',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_monthMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-month,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-month,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-month' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-month,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-month,context' },
            { name: 'beforeeventedit', parameters: 'calendar-month,context' },
            { name: 'beforeexpand', parameters: 'calendar-month' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-month,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-month' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-month,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-month' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-month,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-month' },
            { name: 'drawershow', parameters: 'calendar-month' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-month,context' },
            { name: 'eventdrop', parameters: 'calendar-month,context' },
            { name: 'eventedit', parameters: 'calendar-month,context' },
            { name: 'eventtap', parameters: 'calendar-month,context' },
            { name: 'expand', parameters: 'calendar-month' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-month,event' },
            { name: 'focusenter', parameters: 'calendar-month,event' },
            { name: 'focusleave', parameters: 'calendar-month,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-month,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-month,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-month,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-month,context' },
            { name: 'resizedragcancel', parameters: 'calendar-month,context' },
            { name: 'resizedragend', parameters: 'calendar-month,context' },
            { name: 'resizedragstart', parameters: 'calendar-month,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-month' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-month,context' },
            { name: 'validateeventdrop', parameters: 'calendar-month,context' },
            { name: 'validateeventedit', parameters: 'calendar-month,context' },
            { name: 'valuechange', parameters: 'calendar-month,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_monthMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventtap',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_monthMetaData;
    }());
    var ExtCalendar_monthComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_monthComponent, _super);
        function ExtCalendar_monthComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_monthMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_monthComponent_1 = ExtCalendar_monthComponent;
        ExtCalendar_monthComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_monthMetaData);
        };
        ExtCalendar_monthComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_monthComponent_1;
        ExtCalendar_monthComponent = ExtCalendar_monthComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-month',
                inputs: calendar_monthMetaData.PROPERTIES,
                outputs: calendar_monthMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_monthComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_monthComponent);
        return ExtCalendar_monthComponent;
    }(base));

    var calendarMetaData = /** @class */ (function () {
        function calendarMetaData() {
        }
        calendarMetaData.XTYPE = 'calendar';
        calendarMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'calendarList',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'createButton',
            'createButtonPosition',
            'data',
            'dateTitle',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultView',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightToday',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menuButton',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'nextButton',
            'padding',
            'plugins',
            'previousButton',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'sheet',
            'shim',
            'showAnimation',
            'sideBar',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'switcher',
            'switcherPosition',
            'tabIndex',
            'tbar',
            'timezoneOffset',
            'title',
            'titleAlign',
            'titleBar',
            'titleCollapse',
            'todayButton',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'views',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendarMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'calendar' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar' },
            { name: 'drawershow', parameters: 'calendar' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'calendar' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar,event' },
            { name: 'focusenter', parameters: 'calendar,event' },
            { name: 'focusleave', parameters: 'calendar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar,context' },
            { name: 'resizedragcancel', parameters: 'calendar,context' },
            { name: 'resizedragend', parameters: 'calendar,context' },
            { name: 'resizedragstart', parameters: 'calendar,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendarMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendarMetaData;
    }());
    var ExtCalendarComponent = /** @class */ (function (_super) {
        __extends(ExtCalendarComponent, _super);
        function ExtCalendarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendarComponent_1 = ExtCalendarComponent;
        ExtCalendarComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendarMetaData);
        };
        ExtCalendarComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendarComponent_1;
        ExtCalendarComponent = ExtCalendarComponent_1 = __decorate([
            core.Component({
                selector: 'calendar',
                inputs: calendarMetaData.PROPERTIES,
                outputs: calendarMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendarComponent);
        return ExtCalendarComponent;
    }(base));

    var calendar_weekMetaData = /** @class */ (function () {
        function calendar_weekMetaData() {
        }
        calendar_weekMetaData.XTYPE = 'calendar-week';
        calendar_weekMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'addForm',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'allowSelection',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'controlStoreRange',
            'data',
            'dayHeader',
            'dayHeaderFormat',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'displayOverlap',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'endTime',
            'eventDefaults',
            'eventRelayers',
            'firstDayOfWeek',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightToday',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'resizeEvents',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showNowMarker',
            'standardButtons',
            'startTime',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tbar',
            'timeFormat',
            'timezoneOffset',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'view',
            'viewModel',
            'visibleDays',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_weekMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-week,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-week,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-week' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-week,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-week,context' },
            { name: 'beforeeventedit', parameters: 'calendar-week,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-week,context' },
            { name: 'beforeexpand', parameters: 'calendar-week' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-week,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-week' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-week,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-week' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-week,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-week' },
            { name: 'drawershow', parameters: 'calendar-week' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-week,context' },
            { name: 'eventdrop', parameters: 'calendar-week,context' },
            { name: 'eventedit', parameters: 'calendar-week,context' },
            { name: 'eventresize', parameters: 'calendar-week,context' },
            { name: 'eventtap', parameters: 'calendar-week,context' },
            { name: 'expand', parameters: 'calendar-week' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-week,event' },
            { name: 'focusenter', parameters: 'calendar-week,event' },
            { name: 'focusleave', parameters: 'calendar-week,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-week,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-week,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-week,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-week,context' },
            { name: 'resizedragcancel', parameters: 'calendar-week,context' },
            { name: 'resizedragend', parameters: 'calendar-week,context' },
            { name: 'resizedragstart', parameters: 'calendar-week,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-week' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-week,context' },
            { name: 'validateeventdrop', parameters: 'calendar-week,context' },
            { name: 'validateeventedit', parameters: 'calendar-week,context' },
            { name: 'validateeventresize', parameters: 'calendar-week,context' },
            { name: 'valuechange', parameters: 'calendar-week,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_weekMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeeventresizestart',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventresize',
            'eventtap',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'validateeventresize',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_weekMetaData;
    }());
    var ExtCalendar_weekComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_weekComponent, _super);
        function ExtCalendar_weekComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_weekMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_weekComponent_1 = ExtCalendar_weekComponent;
        ExtCalendar_weekComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_weekMetaData);
        };
        ExtCalendar_weekComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_weekComponent_1;
        ExtCalendar_weekComponent = ExtCalendar_weekComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-week',
                inputs: calendar_weekMetaData.PROPERTIES,
                outputs: calendar_weekMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_weekComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_weekComponent);
        return ExtCalendar_weekComponent;
    }(base));

    var calendar_weeksMetaData = /** @class */ (function () {
        function calendar_weeksMetaData() {
        }
        calendar_weeksMetaData.XTYPE = 'calendar-weeks';
        calendar_weeksMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'addForm',
            'addOnSelect',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'allowSelection',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'controlStoreRange',
            'data',
            'dayFormat',
            'dayHeader',
            'dayHeaderFormat',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'eventDefaults',
            'eventRelayers',
            'firstDayOfWeek',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightToday',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'overflowText',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showOverflow',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tbar',
            'timezoneOffset',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'view',
            'viewModel',
            'visibleDays',
            'visibleWeeks',
            'weekendDays',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_weeksMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-weeks,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-weeks,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-weeks' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-weeks,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-weeks,context' },
            { name: 'beforeeventedit', parameters: 'calendar-weeks,context' },
            { name: 'beforeexpand', parameters: 'calendar-weeks' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-weeks,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-weeks' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-weeks,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-weeks' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-weeks,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-weeks' },
            { name: 'drawershow', parameters: 'calendar-weeks' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-weeks,context' },
            { name: 'eventdrop', parameters: 'calendar-weeks,context' },
            { name: 'eventedit', parameters: 'calendar-weeks,context' },
            { name: 'eventtap', parameters: 'calendar-weeks,context' },
            { name: 'expand', parameters: 'calendar-weeks' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-weeks,event' },
            { name: 'focusenter', parameters: 'calendar-weeks,event' },
            { name: 'focusleave', parameters: 'calendar-weeks,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-weeks,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-weeks,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-weeks,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-weeks,context' },
            { name: 'resizedragcancel', parameters: 'calendar-weeks,context' },
            { name: 'resizedragend', parameters: 'calendar-weeks,context' },
            { name: 'resizedragstart', parameters: 'calendar-weeks,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-weeks' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-weeks,context' },
            { name: 'validateeventdrop', parameters: 'calendar-weeks,context' },
            { name: 'validateeventedit', parameters: 'calendar-weeks,context' },
            { name: 'valuechange', parameters: 'calendar-weeks,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_weeksMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventtap',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_weeksMetaData;
    }());
    var ExtCalendar_weeksComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_weeksComponent, _super);
        function ExtCalendar_weeksComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_weeksMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_weeksComponent_1 = ExtCalendar_weeksComponent;
        ExtCalendar_weeksComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_weeksMetaData);
        };
        ExtCalendar_weeksComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_weeksComponent_1;
        ExtCalendar_weeksComponent = ExtCalendar_weeksComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-weeks',
                inputs: calendar_weeksMetaData.PROPERTIES,
                outputs: calendar_weeksMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_weeksComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_weeksComponent);
        return ExtCalendar_weeksComponent;
    }(base));

    var calendar_dayviewMetaData = /** @class */ (function () {
        function calendar_dayviewMetaData() {
        }
        calendar_dayviewMetaData.XTYPE = 'calendar-dayview';
        calendar_dayviewMetaData.PROPERTIES = [
            'addForm',
            'alignSelf',
            'allowSelection',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'controller',
            'controlStoreRange',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'displayOverlap',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'endTime',
            'eventDefaults',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'resizeEvents',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showNowMarker',
            'startTime',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'timeFormat',
            'timeRenderer',
            'timezoneOffset',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'visibleDays',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_dayviewMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-dayview,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-dayview,context' },
            { name: 'beforeeventedit', parameters: 'calendar-dayview,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-dayview,context' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-dayview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-dayview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-dayview,context' },
            { name: 'eventdrop', parameters: 'calendar-dayview,context' },
            { name: 'eventedit', parameters: 'calendar-dayview,context' },
            { name: 'eventresize', parameters: 'calendar-dayview,context' },
            { name: 'eventtap', parameters: 'calendar-dayview,context' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-dayview,event' },
            { name: 'focusenter', parameters: 'calendar-dayview,event' },
            { name: 'focusleave', parameters: 'calendar-dayview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-dayview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-dayview,context' },
            { name: 'validateeventdrop', parameters: 'calendar-dayview,context' },
            { name: 'validateeventedit', parameters: 'calendar-dayview,context' },
            { name: 'validateeventresize', parameters: 'calendar-dayview,context' },
            { name: 'valuechange', parameters: 'calendar-dayview,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_dayviewMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeeventresizestart',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventresize',
            'eventtap',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'validateeventresize',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_dayviewMetaData;
    }());
    var ExtCalendar_dayviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_dayviewComponent, _super);
        function ExtCalendar_dayviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_dayviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_dayviewComponent_1 = ExtCalendar_dayviewComponent;
        ExtCalendar_dayviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_dayviewMetaData);
        };
        ExtCalendar_dayviewComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_dayviewComponent_1;
        ExtCalendar_dayviewComponent = ExtCalendar_dayviewComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-dayview',
                inputs: calendar_dayviewMetaData.PROPERTIES,
                outputs: calendar_dayviewMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_dayviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_dayviewComponent);
        return ExtCalendar_dayviewComponent;
    }(base));

    var calendar_daysviewMetaData = /** @class */ (function () {
        function calendar_daysviewMetaData() {
        }
        calendar_daysviewMetaData.XTYPE = 'calendar-daysview';
        calendar_daysviewMetaData.PROPERTIES = [
            'addForm',
            'alignSelf',
            'allowSelection',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'controller',
            'controlStoreRange',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'displayOverlap',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'endTime',
            'eventDefaults',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'resizeEvents',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showNowMarker',
            'startTime',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'timeFormat',
            'timeRenderer',
            'timezoneOffset',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'visibleDays',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_daysviewMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-daysview,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-daysview,context' },
            { name: 'beforeeventedit', parameters: 'calendar-daysview,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-daysview,context' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-daysview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-daysview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-daysview,context' },
            { name: 'eventdrop', parameters: 'calendar-daysview,context' },
            { name: 'eventedit', parameters: 'calendar-daysview,context' },
            { name: 'eventresize', parameters: 'calendar-daysview,context' },
            { name: 'eventtap', parameters: 'calendar-daysview,context' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-daysview,event' },
            { name: 'focusenter', parameters: 'calendar-daysview,event' },
            { name: 'focusleave', parameters: 'calendar-daysview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-daysview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-daysview,context' },
            { name: 'validateeventdrop', parameters: 'calendar-daysview,context' },
            { name: 'validateeventedit', parameters: 'calendar-daysview,context' },
            { name: 'validateeventresize', parameters: 'calendar-daysview,context' },
            { name: 'valuechange', parameters: 'calendar-daysview,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_daysviewMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeeventresizestart',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventresize',
            'eventtap',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'validateeventresize',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_daysviewMetaData;
    }());
    var ExtCalendar_daysviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_daysviewComponent, _super);
        function ExtCalendar_daysviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_daysviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_daysviewComponent_1 = ExtCalendar_daysviewComponent;
        ExtCalendar_daysviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_daysviewMetaData);
        };
        ExtCalendar_daysviewComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_daysviewComponent_1;
        ExtCalendar_daysviewComponent = ExtCalendar_daysviewComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-daysview',
                inputs: calendar_daysviewMetaData.PROPERTIES,
                outputs: calendar_daysviewMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_daysviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_daysviewComponent);
        return ExtCalendar_daysviewComponent;
    }(base));

    var calendar_monthviewMetaData = /** @class */ (function () {
        function calendar_monthviewMetaData() {
        }
        calendar_monthviewMetaData.XTYPE = 'calendar-monthview';
        calendar_monthviewMetaData.PROPERTIES = [
            'addForm',
            'addOnSelect',
            'alignSelf',
            'allowSelection',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'controller',
            'controlStoreRange',
            'data',
            'dayFormat',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'eventDefaults',
            'firstDayOfWeek',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'overflowText',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showOverflow',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'timezoneOffset',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'visibleDays',
            'visibleWeeks',
            'weekendDays',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_monthviewMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-monthview,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-monthview,context' },
            { name: 'beforeeventedit', parameters: 'calendar-monthview,context' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-monthview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-monthview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-monthview,context' },
            { name: 'eventdrop', parameters: 'calendar-monthview,context' },
            { name: 'eventedit', parameters: 'calendar-monthview,context' },
            { name: 'eventtap', parameters: 'calendar-monthview,context' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-monthview,event' },
            { name: 'focusenter', parameters: 'calendar-monthview,event' },
            { name: 'focusleave', parameters: 'calendar-monthview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'calendar-monthview,context' },
            { name: 'selectrange', parameters: 'calendar-monthview,context' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-monthview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-monthview,context' },
            { name: 'validateeventdrop', parameters: 'calendar-monthview,context' },
            { name: 'validateeventedit', parameters: 'calendar-monthview,context' },
            { name: 'valuechange', parameters: 'calendar-monthview,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_monthviewMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventtap',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'selectrange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_monthviewMetaData;
    }());
    var ExtCalendar_monthviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_monthviewComponent, _super);
        function ExtCalendar_monthviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_monthviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_monthviewComponent_1 = ExtCalendar_monthviewComponent;
        ExtCalendar_monthviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_monthviewMetaData);
        };
        ExtCalendar_monthviewComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_monthviewComponent_1;
        ExtCalendar_monthviewComponent = ExtCalendar_monthviewComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-monthview',
                inputs: calendar_monthviewMetaData.PROPERTIES,
                outputs: calendar_monthviewMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_monthviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_monthviewComponent);
        return ExtCalendar_monthviewComponent;
    }(base));

    var calendar_multiviewMetaData = /** @class */ (function () {
        function calendar_multiviewMetaData() {
        }
        calendar_multiviewMetaData.XTYPE = 'calendar-multiview';
        calendar_multiviewMetaData.PROPERTIES = [
            'compact',
            'compactOptions',
            'defaultView',
            'layout',
            'store',
            'timezoneOffset',
            'value',
            'views',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_multiviewMetaData.EVENTS = [
            { name: 'ready', parameters: '' }
        ];
        calendar_multiviewMetaData.EVENTNAMES = [
            'ready'
        ];
        return calendar_multiviewMetaData;
    }());
    var ExtCalendar_multiviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_multiviewComponent, _super);
        function ExtCalendar_multiviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_multiviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_multiviewComponent_1 = ExtCalendar_multiviewComponent;
        ExtCalendar_multiviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_multiviewMetaData);
        };
        ExtCalendar_multiviewComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_multiviewComponent_1;
        ExtCalendar_multiviewComponent = ExtCalendar_multiviewComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-multiview',
                inputs: calendar_multiviewMetaData.PROPERTIES,
                outputs: calendar_multiviewMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_multiviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_multiviewComponent);
        return ExtCalendar_multiviewComponent;
    }(base));

    var calendar_weekviewMetaData = /** @class */ (function () {
        function calendar_weekviewMetaData() {
        }
        calendar_weekviewMetaData.XTYPE = 'calendar-weekview';
        calendar_weekviewMetaData.PROPERTIES = [
            'addForm',
            'alignSelf',
            'allowSelection',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'controller',
            'controlStoreRange',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'displayOverlap',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'endTime',
            'eventDefaults',
            'firstDayOfWeek',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'resizeEvents',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showNowMarker',
            'startTime',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'timeFormat',
            'timeRenderer',
            'timezoneOffset',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'visibleDays',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_weekviewMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-weekview,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-weekview,context' },
            { name: 'beforeeventedit', parameters: 'calendar-weekview,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-weekview,context' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-weekview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-weekview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-weekview,context' },
            { name: 'eventdrop', parameters: 'calendar-weekview,context' },
            { name: 'eventedit', parameters: 'calendar-weekview,context' },
            { name: 'eventresize', parameters: 'calendar-weekview,context' },
            { name: 'eventtap', parameters: 'calendar-weekview,context' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-weekview,event' },
            { name: 'focusenter', parameters: 'calendar-weekview,event' },
            { name: 'focusleave', parameters: 'calendar-weekview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-weekview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-weekview,context' },
            { name: 'validateeventdrop', parameters: 'calendar-weekview,context' },
            { name: 'validateeventedit', parameters: 'calendar-weekview,context' },
            { name: 'validateeventresize', parameters: 'calendar-weekview,context' },
            { name: 'valuechange', parameters: 'calendar-weekview,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_weekviewMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeeventresizestart',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventresize',
            'eventtap',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'validateeventresize',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_weekviewMetaData;
    }());
    var ExtCalendar_weekviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_weekviewComponent, _super);
        function ExtCalendar_weekviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_weekviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_weekviewComponent_1 = ExtCalendar_weekviewComponent;
        ExtCalendar_weekviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_weekviewMetaData);
        };
        ExtCalendar_weekviewComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_weekviewComponent_1;
        ExtCalendar_weekviewComponent = ExtCalendar_weekviewComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-weekview',
                inputs: calendar_weekviewMetaData.PROPERTIES,
                outputs: calendar_weekviewMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_weekviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_weekviewComponent);
        return ExtCalendar_weekviewComponent;
    }(base));

    var calendar_weeksviewMetaData = /** @class */ (function () {
        function calendar_weeksviewMetaData() {
        }
        calendar_weeksviewMetaData.XTYPE = 'calendar-weeksview';
        calendar_weeksviewMetaData.PROPERTIES = [
            'addForm',
            'addOnSelect',
            'alignSelf',
            'allowSelection',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'controller',
            'controlStoreRange',
            'data',
            'dayFormat',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'eventDefaults',
            'firstDayOfWeek',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'overflowText',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showOverflow',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'timezoneOffset',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'visibleDays',
            'visibleWeeks',
            'weekendDays',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_weeksviewMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-weeksview,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-weeksview,context' },
            { name: 'beforeeventedit', parameters: 'calendar-weeksview,context' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-weeksview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-weeksview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-weeksview,context' },
            { name: 'eventdrop', parameters: 'calendar-weeksview,context' },
            { name: 'eventedit', parameters: 'calendar-weeksview,context' },
            { name: 'eventtap', parameters: 'calendar-weeksview,context' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-weeksview,event' },
            { name: 'focusenter', parameters: 'calendar-weeksview,event' },
            { name: 'focusleave', parameters: 'calendar-weeksview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'calendar-weeksview,context' },
            { name: 'selectrange', parameters: 'calendar-weeksview,context' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-weeksview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-weeksview,context' },
            { name: 'validateeventdrop', parameters: 'calendar-weeksview,context' },
            { name: 'validateeventedit', parameters: 'calendar-weeksview,context' },
            { name: 'valuechange', parameters: 'calendar-weeksview,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_weeksviewMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventtap',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'selectrange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_weeksviewMetaData;
    }());
    var ExtCalendar_weeksviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_weeksviewComponent, _super);
        function ExtCalendar_weeksviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_weeksviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCalendar_weeksviewComponent_1 = ExtCalendar_weeksviewComponent;
        ExtCalendar_weeksviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit(calendar_weeksviewMetaData);
        };
        ExtCalendar_weeksviewComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCalendar_weeksviewComponent_1;
        ExtCalendar_weeksviewComponent = ExtCalendar_weeksviewComponent_1 = __decorate([
            core.Component({
                selector: 'calendar-weeksview',
                inputs: calendar_weeksviewMetaData.PROPERTIES,
                outputs: calendar_weeksviewMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCalendar_weeksviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCalendar_weeksviewComponent);
        return ExtCalendar_weeksviewComponent;
    }(base));

    var carouselMetaData = /** @class */ (function () {
        function carouselMetaData() {
        }
        carouselMetaData.XTYPE = 'carousel';
        carouselMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'direction',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'indicator',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        carouselMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,carousel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'carousel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'carousel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'carousel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,carousel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'carousel,event' },
            { name: 'focusenter', parameters: 'carousel,event' },
            { name: 'focusleave', parameters: 'carousel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'carousel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'carousel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'carousel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'carousel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        carouselMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return carouselMetaData;
    }());
    var ExtCarouselComponent = /** @class */ (function (_super) {
        __extends(ExtCarouselComponent, _super);
        function ExtCarouselComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, carouselMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCarouselComponent_1 = ExtCarouselComponent;
        ExtCarouselComponent.prototype.ngOnInit = function () {
            this.baseOnInit(carouselMetaData);
        };
        ExtCarouselComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCarouselComponent_1;
        ExtCarouselComponent = ExtCarouselComponent_1 = __decorate([
            core.Component({
                selector: 'carousel',
                inputs: carouselMetaData.PROPERTIES,
                outputs: carouselMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCarouselComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCarouselComponent);
        return ExtCarouselComponent;
    }(base));

    var axis3dMetaData = /** @class */ (function () {
        function axis3dMetaData() {
        }
        axis3dMetaData.XTYPE = 'axis3d';
        axis3dMetaData.PROPERTIES = [
            'adjustByMajorUnit',
            'background',
            'center',
            'chart',
            'depth',
            'expandRangeBy',
            'fields',
            'floating',
            'grid',
            'hidden',
            'id',
            'label',
            'layout',
            'length',
            'limits',
            'linkedTo',
            'majorTickSteps',
            'margin',
            'maximum',
            'maxZoom',
            'minimum',
            'minorTickSteps',
            'minZoom',
            'needHighPrecision',
            'position',
            'radius',
            'reconcileRange',
            'renderer',
            'rotation',
            'segmenter',
            'style',
            'title',
            'titleMargin',
            'totalAngle',
            'visibleRange',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        axis3dMetaData.EVENTS = [
            { name: 'rangechange', parameters: 'axis,range,oldRange' },
            { name: 'visiblerangechange', parameters: 'axis,visibleRange' },
            { name: 'ready', parameters: '' }
        ];
        axis3dMetaData.EVENTNAMES = [
            'rangechange',
            'visiblerangechange',
            'ready'
        ];
        return axis3dMetaData;
    }());
    var ExtAxis3dComponent = /** @class */ (function (_super) {
        __extends(ExtAxis3dComponent, _super);
        function ExtAxis3dComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, axis3dMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtAxis3dComponent_1 = ExtAxis3dComponent;
        ExtAxis3dComponent.prototype.ngOnInit = function () {
            this.baseOnInit(axis3dMetaData);
        };
        ExtAxis3dComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtAxis3dComponent_1;
        ExtAxis3dComponent = ExtAxis3dComponent_1 = __decorate([
            core.Component({
                selector: 'axis3d',
                inputs: axis3dMetaData.PROPERTIES,
                outputs: axis3dMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtAxis3dComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtAxis3dComponent);
        return ExtAxis3dComponent;
    }(base));

    var cartesianMetaData = /** @class */ (function () {
        function cartesianMetaData() {
        }
        cartesianMetaData.XTYPE = 'cartesian';
        cartesianMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axes',
            'axisLock',
            'background',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'captions',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'colors',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'downloadServerUrl',
            'draggable',
            'engine',
            'flex',
            'flipXY',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gradients',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightItem',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'innerPadding',
            'insetPadding',
            'instanceCls',
            'interactions',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'legend',
            'listeners',
            'mainRect',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizeHandler',
            'right',
            'ripple',
            'scrollable',
            'series',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sprites',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'surfaceZIndexes',
            'tabIndex',
            'theme',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        cartesianMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,cartesian,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'cartesian,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerefresh', parameters: 'cartesian' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'cartesian' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'cartesian,event' },
            { name: 'bodyresize', parameters: 'size' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,cartesian,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'cartesian,event' },
            { name: 'focusenter', parameters: 'cartesian,event' },
            { name: 'focusleave', parameters: 'cartesian,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemclick', parameters: 'chart,item,event' },
            { name: 'itemdblclick', parameters: 'chart,item,event' },
            { name: 'itemhighlight', parameters: 'cartesian,newItem,oldItem' },
            { name: 'itemhighlightchange', parameters: 'cartesian,newItem,oldItem' },
            { name: 'itemmousedown', parameters: 'chart,item,event' },
            { name: 'itemmousemove', parameters: 'chart,item,event' },
            { name: 'itemmouseout', parameters: 'chart,item,event' },
            { name: 'itemmouseover', parameters: 'chart,item,event' },
            { name: 'itemmouseup', parameters: 'chart,item,event' },
            { name: 'itemtap', parameters: 'chart,item,event' },
            { name: 'layout', parameters: 'cartesian' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'cartesian,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'redraw', parameters: 'cartesian' },
            { name: 'refresh', parameters: 'cartesian' },
            { name: 'remove', parameters: 'cartesian,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'cartesian,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spriteclick', parameters: 'sprite,event' },
            { name: 'spritedblclick', parameters: 'sprite,event' },
            { name: 'spritemousedown', parameters: 'sprite,event' },
            { name: 'spritemousemove', parameters: 'sprite,event' },
            { name: 'spritemouseout', parameters: 'sprite,event' },
            { name: 'spritemouseover', parameters: 'sprite,event' },
            { name: 'spritemouseup', parameters: 'sprite,event' },
            { name: 'spritetap', parameters: 'sprite,event' },
            { name: 'storechange', parameters: 'chart,newStore,oldStore' },
            { name: 'tofront', parameters: 'cartesian' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        cartesianMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerefresh',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bodyresize',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemclick',
            'itemdblclick',
            'itemhighlight',
            'itemhighlightchange',
            'itemmousedown',
            'itemmousemove',
            'itemmouseout',
            'itemmouseover',
            'itemmouseup',
            'itemtap',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'redraw',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'spriteclick',
            'spritedblclick',
            'spritemousedown',
            'spritemousemove',
            'spritemouseout',
            'spritemouseover',
            'spritemouseup',
            'spritetap',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return cartesianMetaData;
    }());
    var ExtCartesianComponent = /** @class */ (function (_super) {
        __extends(ExtCartesianComponent, _super);
        function ExtCartesianComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, cartesianMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCartesianComponent_1 = ExtCartesianComponent;
        ExtCartesianComponent.prototype.ngOnInit = function () {
            this.baseOnInit(cartesianMetaData);
        };
        ExtCartesianComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCartesianComponent_1;
        ExtCartesianComponent = ExtCartesianComponent_1 = __decorate([
            core.Component({
                selector: 'cartesian',
                inputs: cartesianMetaData.PROPERTIES,
                outputs: cartesianMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCartesianComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCartesianComponent);
        return ExtCartesianComponent;
    }(base));

    var chartMetaData = /** @class */ (function () {
        function chartMetaData() {
        }
        chartMetaData.XTYPE = 'chart';
        chartMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axes',
            'axisLock',
            'background',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'captions',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'colors',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'downloadServerUrl',
            'draggable',
            'engine',
            'flex',
            'flipXY',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gradients',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightItem',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'innerPadding',
            'insetPadding',
            'instanceCls',
            'interactions',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'legend',
            'listeners',
            'mainRect',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizeHandler',
            'right',
            'ripple',
            'scrollable',
            'series',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sprites',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'surfaceZIndexes',
            'tabIndex',
            'theme',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        chartMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,cartesian,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'cartesian,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerefresh', parameters: 'cartesian' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'cartesian' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'cartesian,event' },
            { name: 'bodyresize', parameters: 'size' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,cartesian,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'cartesian,event' },
            { name: 'focusenter', parameters: 'cartesian,event' },
            { name: 'focusleave', parameters: 'cartesian,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemclick', parameters: 'chart,item,event' },
            { name: 'itemdblclick', parameters: 'chart,item,event' },
            { name: 'itemhighlight', parameters: 'cartesian,newItem,oldItem' },
            { name: 'itemhighlightchange', parameters: 'cartesian,newItem,oldItem' },
            { name: 'itemmousedown', parameters: 'chart,item,event' },
            { name: 'itemmousemove', parameters: 'chart,item,event' },
            { name: 'itemmouseout', parameters: 'chart,item,event' },
            { name: 'itemmouseover', parameters: 'chart,item,event' },
            { name: 'itemmouseup', parameters: 'chart,item,event' },
            { name: 'itemtap', parameters: 'chart,item,event' },
            { name: 'layout', parameters: 'cartesian' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'cartesian,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'redraw', parameters: 'cartesian' },
            { name: 'refresh', parameters: 'cartesian' },
            { name: 'remove', parameters: 'cartesian,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'cartesian,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spriteclick', parameters: 'sprite,event' },
            { name: 'spritedblclick', parameters: 'sprite,event' },
            { name: 'spritemousedown', parameters: 'sprite,event' },
            { name: 'spritemousemove', parameters: 'sprite,event' },
            { name: 'spritemouseout', parameters: 'sprite,event' },
            { name: 'spritemouseover', parameters: 'sprite,event' },
            { name: 'spritemouseup', parameters: 'sprite,event' },
            { name: 'spritetap', parameters: 'sprite,event' },
            { name: 'storechange', parameters: 'chart,newStore,oldStore' },
            { name: 'tofront', parameters: 'cartesian' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        chartMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerefresh',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bodyresize',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemclick',
            'itemdblclick',
            'itemhighlight',
            'itemhighlightchange',
            'itemmousedown',
            'itemmousemove',
            'itemmouseout',
            'itemmouseover',
            'itemmouseup',
            'itemtap',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'redraw',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'spriteclick',
            'spritedblclick',
            'spritemousedown',
            'spritemousemove',
            'spritemouseout',
            'spritemouseover',
            'spritemouseup',
            'spritetap',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return chartMetaData;
    }());
    var ExtChartComponent = /** @class */ (function (_super) {
        __extends(ExtChartComponent, _super);
        function ExtChartComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, chartMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtChartComponent_1 = ExtChartComponent;
        ExtChartComponent.prototype.ngOnInit = function () {
            this.baseOnInit(chartMetaData);
        };
        ExtChartComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtChartComponent_1;
        ExtChartComponent = ExtChartComponent_1 = __decorate([
            core.Component({
                selector: 'chart',
                inputs: chartMetaData.PROPERTIES,
                outputs: chartMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtChartComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtChartComponent);
        return ExtChartComponent;
    }(base));

    var interactionMetaData = /** @class */ (function () {
        function interactionMetaData() {
        }
        interactionMetaData.XTYPE = 'interaction';
        interactionMetaData.PROPERTIES = [
            'chart',
            'enabled',
            'gesture',
            'listeners',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        interactionMetaData.EVENTS = [
            { name: 'ready', parameters: '' }
        ];
        interactionMetaData.EVENTNAMES = [
            'ready'
        ];
        return interactionMetaData;
    }());
    var ExtInteractionComponent = /** @class */ (function (_super) {
        __extends(ExtInteractionComponent, _super);
        function ExtInteractionComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, interactionMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtInteractionComponent_1 = ExtInteractionComponent;
        ExtInteractionComponent.prototype.ngOnInit = function () {
            this.baseOnInit(interactionMetaData);
        };
        ExtInteractionComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtInteractionComponent_1;
        ExtInteractionComponent = ExtInteractionComponent_1 = __decorate([
            core.Component({
                selector: 'interaction',
                inputs: interactionMetaData.PROPERTIES,
                outputs: interactionMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtInteractionComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtInteractionComponent);
        return ExtInteractionComponent;
    }(base));

    var legendMetaData = /** @class */ (function () {
        function legendMetaData() {
        }
        legendMetaData.XTYPE = 'legend';
        legendMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'inline',
            'innerCls',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemId',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'lastSelected',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'pressedDelay',
            'publishes',
            'record',
            'rect',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selected',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toggleable',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        legendMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,legend,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'legend' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'legend,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'legend,location' },
            { name: 'childlongpress', parameters: 'legend,location' },
            { name: 'childmouseenter', parameters: 'legend,location' },
            { name: 'childmouseleave', parameters: 'legend,location' },
            { name: 'childsingletap', parameters: 'legend,location' },
            { name: 'childtap', parameters: 'legend,location' },
            { name: 'childtaphold', parameters: 'legend,location' },
            { name: 'childtouchcancel', parameters: 'legend,location' },
            { name: 'childtouchend', parameters: 'legend,location' },
            { name: 'childtouchmove', parameters: 'legend,location' },
            { name: 'childtouchstart', parameters: 'legend,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,legend,newActiveItem' },
            { name: 'deselect', parameters: 'legend,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'legend,event' },
            { name: 'focusenter', parameters: 'legend,event' },
            { name: 'focusleave', parameters: 'legend,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'legend,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'legend,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'legend,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'legend,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'legend,index,target,record,e' },
            { name: 'itemswipe', parameters: 'legend,index,target,record,e' },
            { name: 'itemtap', parameters: 'legend,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'legend,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'legend,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'legend,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'legend,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'legend,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'legend,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'legend' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'legend,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'legend,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'legend' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        legendMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'rowselection',
            'scrollablechange',
            'select',
            'selectionchange',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return legendMetaData;
    }());
    var ExtLegendComponent = /** @class */ (function (_super) {
        __extends(ExtLegendComponent, _super);
        function ExtLegendComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, legendMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtLegendComponent_1 = ExtLegendComponent;
        ExtLegendComponent.prototype.ngOnInit = function () {
            this.baseOnInit(legendMetaData);
        };
        ExtLegendComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtLegendComponent_1;
        ExtLegendComponent = ExtLegendComponent_1 = __decorate([
            core.Component({
                selector: 'legend',
                inputs: legendMetaData.PROPERTIES,
                outputs: legendMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtLegendComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtLegendComponent);
        return ExtLegendComponent;
    }(base));

    var chartnavigatorMetaData = /** @class */ (function () {
        function chartnavigatorMetaData() {
        }
        chartnavigatorMetaData.XTYPE = 'chartnavigator';
        chartnavigatorMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'chart',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'navigator',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        chartnavigatorMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,chartnavigator,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'chartnavigator,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'chartnavigator' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'chartnavigator,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,chartnavigator,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'chartnavigator,event' },
            { name: 'focusenter', parameters: 'chartnavigator,event' },
            { name: 'focusleave', parameters: 'chartnavigator,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'chartnavigator,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'chartnavigator,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'chartnavigator,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'chartnavigator' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        chartnavigatorMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return chartnavigatorMetaData;
    }());
    var ExtChartnavigatorComponent = /** @class */ (function (_super) {
        __extends(ExtChartnavigatorComponent, _super);
        function ExtChartnavigatorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, chartnavigatorMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtChartnavigatorComponent_1 = ExtChartnavigatorComponent;
        ExtChartnavigatorComponent.prototype.ngOnInit = function () {
            this.baseOnInit(chartnavigatorMetaData);
        };
        ExtChartnavigatorComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtChartnavigatorComponent_1;
        ExtChartnavigatorComponent = ExtChartnavigatorComponent_1 = __decorate([
            core.Component({
                selector: 'chartnavigator',
                inputs: chartnavigatorMetaData.PROPERTIES,
                outputs: chartnavigatorMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtChartnavigatorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtChartnavigatorComponent);
        return ExtChartnavigatorComponent;
    }(base));

    var polarMetaData = /** @class */ (function () {
        function polarMetaData() {
        }
        polarMetaData.XTYPE = 'polar';
        polarMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axes',
            'axisLock',
            'background',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'captions',
            'cardSwitchAnimation',
            'center',
            'centered',
            'cls',
            'colors',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'downloadServerUrl',
            'draggable',
            'engine',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gradients',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightItem',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'innerPadding',
            'insetPadding',
            'instanceCls',
            'interactions',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'legend',
            'listeners',
            'mainRect',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'radius',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizeHandler',
            'right',
            'ripple',
            'scrollable',
            'series',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sprites',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'surfaceZIndexes',
            'tabIndex',
            'theme',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        polarMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,polar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'polar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerefresh', parameters: 'polar' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'polar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'polar,event' },
            { name: 'bodyresize', parameters: 'size' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,polar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'polar,event' },
            { name: 'focusenter', parameters: 'polar,event' },
            { name: 'focusleave', parameters: 'polar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemclick', parameters: 'chart,item,event' },
            { name: 'itemdblclick', parameters: 'chart,item,event' },
            { name: 'itemhighlight', parameters: 'polar,newItem,oldItem' },
            { name: 'itemhighlightchange', parameters: 'polar,newItem,oldItem' },
            { name: 'itemmousedown', parameters: 'chart,item,event' },
            { name: 'itemmousemove', parameters: 'chart,item,event' },
            { name: 'itemmouseout', parameters: 'chart,item,event' },
            { name: 'itemmouseover', parameters: 'chart,item,event' },
            { name: 'itemmouseup', parameters: 'chart,item,event' },
            { name: 'itemtap', parameters: 'chart,item,event' },
            { name: 'layout', parameters: 'polar' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'polar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'redraw', parameters: 'polar' },
            { name: 'refresh', parameters: 'polar' },
            { name: 'remove', parameters: 'polar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'polar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spriteclick', parameters: 'sprite,event' },
            { name: 'spritedblclick', parameters: 'sprite,event' },
            { name: 'spritemousedown', parameters: 'sprite,event' },
            { name: 'spritemousemove', parameters: 'sprite,event' },
            { name: 'spritemouseout', parameters: 'sprite,event' },
            { name: 'spritemouseover', parameters: 'sprite,event' },
            { name: 'spritemouseup', parameters: 'sprite,event' },
            { name: 'spritetap', parameters: 'sprite,event' },
            { name: 'storechange', parameters: 'chart,newStore,oldStore' },
            { name: 'tofront', parameters: 'polar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        polarMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerefresh',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bodyresize',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemclick',
            'itemdblclick',
            'itemhighlight',
            'itemhighlightchange',
            'itemmousedown',
            'itemmousemove',
            'itemmouseout',
            'itemmouseover',
            'itemmouseup',
            'itemtap',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'redraw',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'spriteclick',
            'spritedblclick',
            'spritemousedown',
            'spritemousemove',
            'spritemouseout',
            'spritemouseover',
            'spritemouseup',
            'spritetap',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return polarMetaData;
    }());
    var ExtPolarComponent = /** @class */ (function (_super) {
        __extends(ExtPolarComponent, _super);
        function ExtPolarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, polarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPolarComponent_1 = ExtPolarComponent;
        ExtPolarComponent.prototype.ngOnInit = function () {
            this.baseOnInit(polarMetaData);
        };
        ExtPolarComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPolarComponent_1;
        ExtPolarComponent = ExtPolarComponent_1 = __decorate([
            core.Component({
                selector: 'polar',
                inputs: polarMetaData.PROPERTIES,
                outputs: polarMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPolarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPolarComponent);
        return ExtPolarComponent;
    }(base));

    var spacefillingMetaData = /** @class */ (function () {
        function spacefillingMetaData() {
        }
        spacefillingMetaData.XTYPE = 'spacefilling';
        spacefillingMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axes',
            'axisLock',
            'background',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'captions',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'colors',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'downloadServerUrl',
            'draggable',
            'engine',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gradients',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightItem',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'insetPadding',
            'instanceCls',
            'interactions',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'legend',
            'listeners',
            'mainRect',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizeHandler',
            'right',
            'ripple',
            'scrollable',
            'series',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sprites',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'surfaceZIndexes',
            'tabIndex',
            'theme',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        spacefillingMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,spacefilling,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'spacefilling,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerefresh', parameters: 'spacefilling' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'spacefilling' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'spacefilling,event' },
            { name: 'bodyresize', parameters: 'size' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,spacefilling,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'spacefilling,event' },
            { name: 'focusenter', parameters: 'spacefilling,event' },
            { name: 'focusleave', parameters: 'spacefilling,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemclick', parameters: 'chart,item,event' },
            { name: 'itemdblclick', parameters: 'chart,item,event' },
            { name: 'itemhighlight', parameters: 'spacefilling,newItem,oldItem' },
            { name: 'itemhighlightchange', parameters: 'spacefilling,newItem,oldItem' },
            { name: 'itemmousedown', parameters: 'chart,item,event' },
            { name: 'itemmousemove', parameters: 'chart,item,event' },
            { name: 'itemmouseout', parameters: 'chart,item,event' },
            { name: 'itemmouseover', parameters: 'chart,item,event' },
            { name: 'itemmouseup', parameters: 'chart,item,event' },
            { name: 'itemtap', parameters: 'chart,item,event' },
            { name: 'layout', parameters: 'spacefilling' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'spacefilling,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'redraw', parameters: 'spacefilling' },
            { name: 'refresh', parameters: 'spacefilling' },
            { name: 'remove', parameters: 'spacefilling,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'spacefilling,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spriteclick', parameters: 'sprite,event' },
            { name: 'spritedblclick', parameters: 'sprite,event' },
            { name: 'spritemousedown', parameters: 'sprite,event' },
            { name: 'spritemousemove', parameters: 'sprite,event' },
            { name: 'spritemouseout', parameters: 'sprite,event' },
            { name: 'spritemouseover', parameters: 'sprite,event' },
            { name: 'spritemouseup', parameters: 'sprite,event' },
            { name: 'spritetap', parameters: 'sprite,event' },
            { name: 'storechange', parameters: 'chart,newStore,oldStore' },
            { name: 'tofront', parameters: 'spacefilling' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        spacefillingMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerefresh',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bodyresize',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemclick',
            'itemdblclick',
            'itemhighlight',
            'itemhighlightchange',
            'itemmousedown',
            'itemmousemove',
            'itemmouseout',
            'itemmouseover',
            'itemmouseup',
            'itemtap',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'redraw',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'spriteclick',
            'spritedblclick',
            'spritemousedown',
            'spritemousemove',
            'spritemouseout',
            'spritemouseover',
            'spritemouseup',
            'spritetap',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return spacefillingMetaData;
    }());
    var ExtSpacefillingComponent = /** @class */ (function (_super) {
        __extends(ExtSpacefillingComponent, _super);
        function ExtSpacefillingComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, spacefillingMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSpacefillingComponent_1 = ExtSpacefillingComponent;
        ExtSpacefillingComponent.prototype.ngOnInit = function () {
            this.baseOnInit(spacefillingMetaData);
        };
        ExtSpacefillingComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSpacefillingComponent_1;
        ExtSpacefillingComponent = ExtSpacefillingComponent_1 = __decorate([
            core.Component({
                selector: 'spacefilling',
                inputs: spacefillingMetaData.PROPERTIES,
                outputs: spacefillingMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSpacefillingComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSpacefillingComponent);
        return ExtSpacefillingComponent;
    }(base));

    var chipMetaData = /** @class */ (function () {
        function chipMetaData() {
        }
        chipMetaData.XTYPE = 'chip';
        chipMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'closable',
            'closeHandler',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        chipMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'chip' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'chip,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'chip,event' },
            { name: 'focusenter', parameters: 'chip,event' },
            { name: 'focusleave', parameters: 'chip,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'chip' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        chipMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return chipMetaData;
    }());
    var ExtChipComponent = /** @class */ (function (_super) {
        __extends(ExtChipComponent, _super);
        function ExtChipComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, chipMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtChipComponent_1 = ExtChipComponent;
        ExtChipComponent.prototype.ngOnInit = function () {
            this.baseOnInit(chipMetaData);
        };
        ExtChipComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtChipComponent_1;
        ExtChipComponent = ExtChipComponent_1 = __decorate([
            core.Component({
                selector: 'chip',
                inputs: chipMetaData.PROPERTIES,
                outputs: chipMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtChipComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtChipComponent);
        return ExtChipComponent;
    }(base));

    var componentMetaData = /** @class */ (function () {
        function componentMetaData() {
        }
        componentMetaData.XTYPE = 'component';
        componentMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        componentMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'component' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'component,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'component,event' },
            { name: 'focusenter', parameters: 'component,event' },
            { name: 'focusleave', parameters: 'component,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'component' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        componentMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return componentMetaData;
    }());
    var ExtComponentComponent = /** @class */ (function (_super) {
        __extends(ExtComponentComponent, _super);
        function ExtComponentComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, componentMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtComponentComponent_1 = ExtComponentComponent;
        ExtComponentComponent.prototype.ngOnInit = function () {
            this.baseOnInit(componentMetaData);
        };
        ExtComponentComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtComponentComponent_1;
        ExtComponentComponent = ExtComponentComponent_1 = __decorate([
            core.Component({
                selector: 'component',
                inputs: componentMetaData.PROPERTIES,
                outputs: componentMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtComponentComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtComponentComponent);
        return ExtComponentComponent;
    }(base));

    var containerMetaData = /** @class */ (function () {
        function containerMetaData() {
        }
        containerMetaData.XTYPE = 'container';
        containerMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        containerMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,container,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'container,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'container' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'container,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,container,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'container,event' },
            { name: 'focusenter', parameters: 'container,event' },
            { name: 'focusleave', parameters: 'container,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'container,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'container,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'container,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'container' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        containerMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return containerMetaData;
    }());
    var ExtContainerComponent = /** @class */ (function (_super) {
        __extends(ExtContainerComponent, _super);
        function ExtContainerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, containerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtContainerComponent_1 = ExtContainerComponent;
        ExtContainerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(containerMetaData);
        };
        ExtContainerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtContainerComponent_1;
        ExtContainerComponent = ExtContainerComponent_1 = __decorate([
            core.Component({
                selector: 'container',
                inputs: containerMetaData.PROPERTIES,
                outputs: containerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtContainerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtContainerComponent);
        return ExtContainerComponent;
    }(base));

    var d3_canvasMetaData = /** @class */ (function () {
        function d3_canvasMetaData() {
        }
        d3_canvasMetaData.XTYPE = 'd3-canvas';
        d3_canvasMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'hdpi',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_canvasMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-canvas' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-canvas,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-canvas,event' },
            { name: 'focusenter', parameters: 'd3-canvas,event' },
            { name: 'focusleave', parameters: 'd3-canvas,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,canvas,size' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-canvas' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_canvasMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_canvasMetaData;
    }());
    var ExtD3_canvasComponent = /** @class */ (function (_super) {
        __extends(ExtD3_canvasComponent, _super);
        function ExtD3_canvasComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_canvasMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtD3_canvasComponent_1 = ExtD3_canvasComponent;
        ExtD3_canvasComponent.prototype.ngOnInit = function () {
            this.baseOnInit(d3_canvasMetaData);
        };
        ExtD3_canvasComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtD3_canvasComponent_1;
        ExtD3_canvasComponent = ExtD3_canvasComponent_1 = __decorate([
            core.Component({
                selector: 'd3-canvas',
                inputs: d3_canvasMetaData.PROPERTIES,
                outputs: d3_canvasMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtD3_canvasComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtD3_canvasComponent);
        return ExtD3_canvasComponent;
    }(base));

    var d3_heatmapMetaData = /** @class */ (function () {
        function d3_heatmapMetaData() {
        }
        d3_heatmapMetaData.XTYPE = 'd3-heatmap';
        d3_heatmapMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'labels',
            'left',
            'legend',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tiles',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xAxis',
            'xtype',
            'y',
            'yAxis',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_heatmapMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-heatmap' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-heatmap,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-heatmap,event' },
            { name: 'focusenter', parameters: 'd3-heatmap,event' },
            { name: 'focusleave', parameters: 'd3-heatmap,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-heatmap' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_heatmapMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_heatmapMetaData;
    }());
    var ExtD3_heatmapComponent = /** @class */ (function (_super) {
        __extends(ExtD3_heatmapComponent, _super);
        function ExtD3_heatmapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_heatmapMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtD3_heatmapComponent_1 = ExtD3_heatmapComponent;
        ExtD3_heatmapComponent.prototype.ngOnInit = function () {
            this.baseOnInit(d3_heatmapMetaData);
        };
        ExtD3_heatmapComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtD3_heatmapComponent_1;
        ExtD3_heatmapComponent = ExtD3_heatmapComponent_1 = __decorate([
            core.Component({
                selector: 'd3-heatmap',
                inputs: d3_heatmapMetaData.PROPERTIES,
                outputs: d3_heatmapMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtD3_heatmapComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtD3_heatmapComponent);
        return ExtD3_heatmapComponent;
    }(base));

    var d3_packMetaData = /** @class */ (function () {
        function d3_packMetaData() {
        }
        d3_packMetaData.XTYPE = 'd3-pack';
        d3_packMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'clipText',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'expandEventName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hierarchyCls',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'linkKey',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nodeChildren',
            'nodeClass',
            'nodeKey',
            'nodeText',
            'nodeTransform',
            'nodeValue',
            'noParentValue',
            'noSizeLayout',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderLinks',
            'renderTo',
            'right',
            'ripple',
            'rootVisible',
            'scrollable',
            'selectEventName',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'textPadding',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_packMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-pack' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-pack,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-pack,event' },
            { name: 'focusenter', parameters: 'd3-pack,event' },
            { name: 'focusleave', parameters: 'd3-pack,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-pack' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_packMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_packMetaData;
    }());
    var ExtD3_packComponent = /** @class */ (function (_super) {
        __extends(ExtD3_packComponent, _super);
        function ExtD3_packComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_packMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtD3_packComponent_1 = ExtD3_packComponent;
        ExtD3_packComponent.prototype.ngOnInit = function () {
            this.baseOnInit(d3_packMetaData);
        };
        ExtD3_packComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtD3_packComponent_1;
        ExtD3_packComponent = ExtD3_packComponent_1 = __decorate([
            core.Component({
                selector: 'd3-pack',
                inputs: d3_packMetaData.PROPERTIES,
                outputs: d3_packMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtD3_packComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtD3_packComponent);
        return ExtD3_packComponent;
    }(base));

    var d3_partitionMetaData = /** @class */ (function () {
        function d3_partitionMetaData() {
        }
        d3_partitionMetaData.XTYPE = 'd3-partition';
        d3_partitionMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'expandEventName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hierarchyCls',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'linkKey',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nodeChildren',
            'nodeClass',
            'nodeKey',
            'nodeText',
            'nodeTransform',
            'nodeValue',
            'noParentValue',
            'noSizeLayout',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderLinks',
            'renderTo',
            'right',
            'ripple',
            'rootVisible',
            'scrollable',
            'selectEventName',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_partitionMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-partition' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-partition,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-partition,event' },
            { name: 'focusenter', parameters: 'd3-partition,event' },
            { name: 'focusleave', parameters: 'd3-partition,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-partition' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_partitionMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_partitionMetaData;
    }());
    var ExtD3_partitionComponent = /** @class */ (function (_super) {
        __extends(ExtD3_partitionComponent, _super);
        function ExtD3_partitionComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_partitionMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtD3_partitionComponent_1 = ExtD3_partitionComponent;
        ExtD3_partitionComponent.prototype.ngOnInit = function () {
            this.baseOnInit(d3_partitionMetaData);
        };
        ExtD3_partitionComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtD3_partitionComponent_1;
        ExtD3_partitionComponent = ExtD3_partitionComponent_1 = __decorate([
            core.Component({
                selector: 'd3-partition',
                inputs: d3_partitionMetaData.PROPERTIES,
                outputs: d3_partitionMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtD3_partitionComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtD3_partitionComponent);
        return ExtD3_partitionComponent;
    }(base));

    var d3_sunburstMetaData = /** @class */ (function () {
        function d3_sunburstMetaData() {
        }
        d3_sunburstMetaData.XTYPE = 'd3-sunburst';
        d3_sunburstMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'expandEventName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hierarchyCls',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'linkKey',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nodeChildren',
            'nodeClass',
            'nodeKey',
            'nodeText',
            'nodeTransform',
            'nodeValue',
            'noParentValue',
            'noSizeLayout',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderLinks',
            'renderTo',
            'right',
            'ripple',
            'rootVisible',
            'scrollable',
            'selectEventName',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'textPadding',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'zoomParentDotRadius',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_sunburstMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-sunburst' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-sunburst,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-sunburst,event' },
            { name: 'focusenter', parameters: 'd3-sunburst,event' },
            { name: 'focusleave', parameters: 'd3-sunburst,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-sunburst' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_sunburstMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_sunburstMetaData;
    }());
    var ExtD3_sunburstComponent = /** @class */ (function (_super) {
        __extends(ExtD3_sunburstComponent, _super);
        function ExtD3_sunburstComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_sunburstMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtD3_sunburstComponent_1 = ExtD3_sunburstComponent;
        ExtD3_sunburstComponent.prototype.ngOnInit = function () {
            this.baseOnInit(d3_sunburstMetaData);
        };
        ExtD3_sunburstComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtD3_sunburstComponent_1;
        ExtD3_sunburstComponent = ExtD3_sunburstComponent_1 = __decorate([
            core.Component({
                selector: 'd3-sunburst',
                inputs: d3_sunburstMetaData.PROPERTIES,
                outputs: d3_sunburstMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtD3_sunburstComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtD3_sunburstComponent);
        return ExtD3_sunburstComponent;
    }(base));

    var d3_treeMetaData = /** @class */ (function () {
        function d3_treeMetaData() {
        }
        d3_treeMetaData.XTYPE = 'd3-tree';
        d3_treeMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'depth',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'expandEventName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hierarchyCls',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'linkKey',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nodeChildren',
            'nodeClass',
            'nodeKey',
            'nodeRadius',
            'nodeSize',
            'nodeText',
            'nodeTransform',
            'nodeValue',
            'noParentValue',
            'noSizeLayout',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderLinks',
            'renderTo',
            'right',
            'ripple',
            'rootVisible',
            'scrollable',
            'selectEventName',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_treeMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-tree' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-tree,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-tree,event' },
            { name: 'focusenter', parameters: 'd3-tree,event' },
            { name: 'focusleave', parameters: 'd3-tree,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-tree' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_treeMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_treeMetaData;
    }());
    var ExtD3_treeComponent = /** @class */ (function (_super) {
        __extends(ExtD3_treeComponent, _super);
        function ExtD3_treeComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_treeMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtD3_treeComponent_1 = ExtD3_treeComponent;
        ExtD3_treeComponent.prototype.ngOnInit = function () {
            this.baseOnInit(d3_treeMetaData);
        };
        ExtD3_treeComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtD3_treeComponent_1;
        ExtD3_treeComponent = ExtD3_treeComponent_1 = __decorate([
            core.Component({
                selector: 'd3-tree',
                inputs: d3_treeMetaData.PROPERTIES,
                outputs: d3_treeMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtD3_treeComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtD3_treeComponent);
        return ExtD3_treeComponent;
    }(base));

    var d3_horizontal_treeMetaData = /** @class */ (function () {
        function d3_horizontal_treeMetaData() {
        }
        d3_horizontal_treeMetaData.XTYPE = 'd3-horizontal-tree';
        d3_horizontal_treeMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'depth',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'expandEventName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hierarchyCls',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'linkKey',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nodeChildren',
            'nodeClass',
            'nodeKey',
            'nodeRadius',
            'nodeSize',
            'nodeText',
            'nodeTransform',
            'nodeValue',
            'noParentValue',
            'noSizeLayout',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderLinks',
            'renderTo',
            'right',
            'ripple',
            'rootVisible',
            'scrollable',
            'selectEventName',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_horizontal_treeMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-tree' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-tree,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-tree,event' },
            { name: 'focusenter', parameters: 'd3-tree,event' },
            { name: 'focusleave', parameters: 'd3-tree,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-tree' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_horizontal_treeMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_horizontal_treeMetaData;
    }());
    var ExtD3_horizontal_treeComponent = /** @class */ (function (_super) {
        __extends(ExtD3_horizontal_treeComponent, _super);
        function ExtD3_horizontal_treeComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_horizontal_treeMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtD3_horizontal_treeComponent_1 = ExtD3_horizontal_treeComponent;
        ExtD3_horizontal_treeComponent.prototype.ngOnInit = function () {
            this.baseOnInit(d3_horizontal_treeMetaData);
        };
        ExtD3_horizontal_treeComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtD3_horizontal_treeComponent_1;
        ExtD3_horizontal_treeComponent = ExtD3_horizontal_treeComponent_1 = __decorate([
            core.Component({
                selector: 'd3-horizontal-tree',
                inputs: d3_horizontal_treeMetaData.PROPERTIES,
                outputs: d3_horizontal_treeMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtD3_horizontal_treeComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtD3_horizontal_treeComponent);
        return ExtD3_horizontal_treeComponent;
    }(base));

    var d3_treemapMetaData = /** @class */ (function () {
        function d3_treemapMetaData() {
        }
        d3_treemapMetaData.XTYPE = 'd3-treemap';
        d3_treemapMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'busyLayoutText',
            'centered',
            'clipScene',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'expandEventName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hierarchyCls',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'leafTile',
            'left',
            'linkKey',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nodeChildren',
            'nodeClass',
            'nodeKey',
            'nodeText',
            'nodeTransform',
            'nodeValue',
            'noParentValue',
            'noSizeLayout',
            'padding',
            'parentTile',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderLinks',
            'renderTo',
            'right',
            'ripple',
            'rootVisible',
            'scaleLabels',
            'scrollable',
            'selectEventName',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tiling',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_treemapMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-treemap' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-treemap,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-treemap,event' },
            { name: 'focusenter', parameters: 'd3-treemap,event' },
            { name: 'focusleave', parameters: 'd3-treemap,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-treemap' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_treemapMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_treemapMetaData;
    }());
    var ExtD3_treemapComponent = /** @class */ (function (_super) {
        __extends(ExtD3_treemapComponent, _super);
        function ExtD3_treemapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_treemapMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtD3_treemapComponent_1 = ExtD3_treemapComponent;
        ExtD3_treemapComponent.prototype.ngOnInit = function () {
            this.baseOnInit(d3_treemapMetaData);
        };
        ExtD3_treemapComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtD3_treemapComponent_1;
        ExtD3_treemapComponent = ExtD3_treemapComponent_1 = __decorate([
            core.Component({
                selector: 'd3-treemap',
                inputs: d3_treemapMetaData.PROPERTIES,
                outputs: d3_treemapMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtD3_treemapComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtD3_treemapComponent);
        return ExtD3_treemapComponent;
    }(base));

    var d3_svgMetaData = /** @class */ (function () {
        function d3_svgMetaData() {
        }
        d3_svgMetaData.XTYPE = 'd3-svg';
        d3_svgMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'cls',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_svgMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-svg' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-svg,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-svg,event' },
            { name: 'focusenter', parameters: 'd3-svg,event' },
            { name: 'focusleave', parameters: 'd3-svg,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-svg' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_svgMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_svgMetaData;
    }());
    var ExtD3_svgComponent = /** @class */ (function (_super) {
        __extends(ExtD3_svgComponent, _super);
        function ExtD3_svgComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_svgMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtD3_svgComponent_1 = ExtD3_svgComponent;
        ExtD3_svgComponent.prototype.ngOnInit = function () {
            this.baseOnInit(d3_svgMetaData);
        };
        ExtD3_svgComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtD3_svgComponent_1;
        ExtD3_svgComponent = ExtD3_svgComponent_1 = __decorate([
            core.Component({
                selector: 'd3-svg',
                inputs: d3_svgMetaData.PROPERTIES,
                outputs: d3_svgMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtD3_svgComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtD3_svgComponent);
        return ExtD3_svgComponent;
    }(base));

    var d3MetaData = /** @class */ (function () {
        function d3MetaData() {
        }
        d3MetaData.XTYPE = 'd3';
        d3MetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'cls',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3MetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-svg' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-svg,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-svg,event' },
            { name: 'focusenter', parameters: 'd3-svg,event' },
            { name: 'focusleave', parameters: 'd3-svg,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-svg' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3MetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3MetaData;
    }());
    var ExtD3Component = /** @class */ (function (_super) {
        __extends(ExtD3Component, _super);
        function ExtD3Component(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3MetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtD3Component_1 = ExtD3Component;
        ExtD3Component.prototype.ngOnInit = function () {
            this.baseOnInit(d3MetaData);
        };
        ExtD3Component.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtD3Component_1;
        ExtD3Component = ExtD3Component_1 = __decorate([
            core.Component({
                selector: 'd3',
                inputs: d3MetaData.PROPERTIES,
                outputs: d3MetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtD3Component_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtD3Component);
        return ExtD3Component;
    }(base));

    var boundlistMetaData = /** @class */ (function () {
        function boundlistMetaData() {
        }
        boundlistMetaData.XTYPE = 'boundlist';
        boundlistMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'bufferSize',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'collapseDefaults',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'disclosureProperty',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'grouped',
            'groupFooter',
            'groupHeader',
            'grouping',
            'groupPlaceholder',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'horizontalOverflow',
            'html',
            'id',
            'inactiveChildTabIndex',
            'indexBar',
            'infinite',
            'inline',
            'innerCls',
            'innerCtHeight',
            'innerWidth',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemConfig',
            'itemContentCls',
            'itemDataMap',
            'itemId',
            'itemInnerCls',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'maintainChildNodes',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxItemCache',
            'maxWidth',
            'minHeight',
            'minimumBufferDistance',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'onItemDisclosure',
            'padding',
            'pinFooters',
            'pinHeaders',
            'pinnedFooter',
            'pinnedFooterHeight',
            'pinnedHeader',
            'pinnedHeaderHeight',
            'plugins',
            'pressedDelay',
            'preventSelectionOnDisclose',
            'preventSelectionOnTool',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'rowLines',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'striped',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'topRenderedIndex',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'variableHeights',
            'verticalOverflow',
            'viewModel',
            'visibleHeight',
            'visibleLeft',
            'visibleTop',
            'visibleWidth',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        boundlistMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,boundlist,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforegroupcollapse', parameters: 'boundlist,group' },
            { name: 'beforegroupexpand', parameters: 'boundlist,group' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'boundlist' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'boundlist,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'boundlist,location' },
            { name: 'childlongpress', parameters: 'boundlist,location' },
            { name: 'childmouseenter', parameters: 'boundlist,location' },
            { name: 'childmouseleave', parameters: 'boundlist,location' },
            { name: 'childsingletap', parameters: 'boundlist,location' },
            { name: 'childtap', parameters: 'boundlist,location' },
            { name: 'childtaphold', parameters: 'boundlist,location' },
            { name: 'childtouchcancel', parameters: 'boundlist,location' },
            { name: 'childtouchend', parameters: 'boundlist,location' },
            { name: 'childtouchmove', parameters: 'boundlist,location' },
            { name: 'childtouchstart', parameters: 'boundlist,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,boundlist,newActiveItem' },
            { name: 'deselect', parameters: 'boundlist,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'boundlist,event' },
            { name: 'focusenter', parameters: 'boundlist,event' },
            { name: 'focusleave', parameters: 'boundlist,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'groupcollapse', parameters: 'boundlist,group' },
            { name: 'groupexpand', parameters: 'boundlist,group' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'boundlist,index,record,action' },
            { name: 'itemdoubletap', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemswipe', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtap', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'boundlist,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'boundlist,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'boundlist' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'boundlist,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'boundlist,selected' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'boundlist' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        boundlistMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforegroupcollapse',
            'beforegroupexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'disclose',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'groupcollapse',
            'groupexpand',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemaction',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return boundlistMetaData;
    }());
    var ExtBoundlistComponent = /** @class */ (function (_super) {
        __extends(ExtBoundlistComponent, _super);
        function ExtBoundlistComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, boundlistMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtBoundlistComponent_1 = ExtBoundlistComponent;
        ExtBoundlistComponent.prototype.ngOnInit = function () {
            this.baseOnInit(boundlistMetaData);
        };
        ExtBoundlistComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtBoundlistComponent_1;
        ExtBoundlistComponent = ExtBoundlistComponent_1 = __decorate([
            core.Component({
                selector: 'boundlist',
                inputs: boundlistMetaData.PROPERTIES,
                outputs: boundlistMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtBoundlistComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtBoundlistComponent);
        return ExtBoundlistComponent;
    }(base));

    var chipviewMetaData = /** @class */ (function () {
        function chipviewMetaData() {
        }
        chipviewMetaData.XTYPE = 'chipview';
        chipviewMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closableField',
            'closeHandler',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'displayed',
            'displayField',
            'displayTpl',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'iconClsField',
            'iconField',
            'id',
            'inactiveChildTabIndex',
            'inline',
            'innerCls',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemId',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'lastSelected',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selected',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        chipviewMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,chipview,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'chipview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'chipview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'chipview,location' },
            { name: 'childlongpress', parameters: 'chipview,location' },
            { name: 'childmouseenter', parameters: 'chipview,location' },
            { name: 'childmouseleave', parameters: 'chipview,location' },
            { name: 'childsingletap', parameters: 'chipview,location' },
            { name: 'childtap', parameters: 'chipview,location' },
            { name: 'childtaphold', parameters: 'chipview,location' },
            { name: 'childtouchcancel', parameters: 'chipview,location' },
            { name: 'childtouchend', parameters: 'chipview,location' },
            { name: 'childtouchmove', parameters: 'chipview,location' },
            { name: 'childtouchstart', parameters: 'chipview,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,chipview,newActiveItem' },
            { name: 'deselect', parameters: 'chipview,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'chipview,event' },
            { name: 'focusenter', parameters: 'chipview,event' },
            { name: 'focusleave', parameters: 'chipview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'chipview,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'chipview,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'chipview,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'chipview,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'chipview,index,target,record,e' },
            { name: 'itemswipe', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtap', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'chipview,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'chipview,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'chipview' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'chipview,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'chipview,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'chipview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        chipviewMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'rowselection',
            'scrollablechange',
            'select',
            'selectionchange',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return chipviewMetaData;
    }());
    var ExtChipviewComponent = /** @class */ (function (_super) {
        __extends(ExtChipviewComponent, _super);
        function ExtChipviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, chipviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtChipviewComponent_1 = ExtChipviewComponent;
        ExtChipviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit(chipviewMetaData);
        };
        ExtChipviewComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtChipviewComponent_1;
        ExtChipviewComponent = ExtChipviewComponent_1 = __decorate([
            core.Component({
                selector: 'chipview',
                inputs: chipviewMetaData.PROPERTIES,
                outputs: chipviewMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtChipviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtChipviewComponent);
        return ExtChipviewComponent;
    }(base));

    var componentdataviewMetaData = /** @class */ (function () {
        function componentdataviewMetaData() {
        }
        componentdataviewMetaData.XTYPE = 'componentdataview';
        componentdataviewMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'inline',
            'innerCls',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemConfig',
            'itemContentCls',
            'itemDataMap',
            'itemId',
            'itemInnerCls',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxItemCache',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'striped',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        componentdataviewMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,componentdataview,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'componentdataview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'componentdataview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'componentdataview,location' },
            { name: 'childlongpress', parameters: 'componentdataview,location' },
            { name: 'childmouseenter', parameters: 'componentdataview,location' },
            { name: 'childmouseleave', parameters: 'componentdataview,location' },
            { name: 'childsingletap', parameters: 'componentdataview,location' },
            { name: 'childtap', parameters: 'componentdataview,location' },
            { name: 'childtaphold', parameters: 'componentdataview,location' },
            { name: 'childtouchcancel', parameters: 'componentdataview,location' },
            { name: 'childtouchend', parameters: 'componentdataview,location' },
            { name: 'childtouchmove', parameters: 'componentdataview,location' },
            { name: 'childtouchstart', parameters: 'componentdataview,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,componentdataview,newActiveItem' },
            { name: 'deselect', parameters: 'componentdataview,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'componentdataview,event' },
            { name: 'focusenter', parameters: 'componentdataview,event' },
            { name: 'focusleave', parameters: 'componentdataview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemswipe', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtap', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'componentdataview,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'componentdataview,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'componentdataview' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'componentdataview,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'componentdataview,selected' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'componentdataview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        componentdataviewMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return componentdataviewMetaData;
    }());
    var ExtComponentdataviewComponent = /** @class */ (function (_super) {
        __extends(ExtComponentdataviewComponent, _super);
        function ExtComponentdataviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, componentdataviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtComponentdataviewComponent_1 = ExtComponentdataviewComponent;
        ExtComponentdataviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit(componentdataviewMetaData);
        };
        ExtComponentdataviewComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtComponentdataviewComponent_1;
        ExtComponentdataviewComponent = ExtComponentdataviewComponent_1 = __decorate([
            core.Component({
                selector: 'componentdataview',
                inputs: componentdataviewMetaData.PROPERTIES,
                outputs: componentdataviewMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtComponentdataviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtComponentdataviewComponent);
        return ExtComponentdataviewComponent;
    }(base));

    var dataitemMetaData = /** @class */ (function () {
        function dataitemMetaData() {
        }
        dataitemMetaData.XTYPE = 'dataitem';
        dataitemMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataMap',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'recordIndex',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        dataitemMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,dataitem,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'dataitem,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'dataitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'dataitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,dataitem,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'dataitem,event' },
            { name: 'focusenter', parameters: 'dataitem,event' },
            { name: 'focusleave', parameters: 'dataitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'dataitem,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'dataitem,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'dataitem,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'dataitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'dataItem,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        dataitemMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return dataitemMetaData;
    }());
    var ExtDataitemComponent = /** @class */ (function (_super) {
        __extends(ExtDataitemComponent, _super);
        function ExtDataitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, dataitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtDataitemComponent_1 = ExtDataitemComponent;
        ExtDataitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit(dataitemMetaData);
        };
        ExtDataitemComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtDataitemComponent_1;
        ExtDataitemComponent = ExtDataitemComponent_1 = __decorate([
            core.Component({
                selector: 'dataitem',
                inputs: dataitemMetaData.PROPERTIES,
                outputs: dataitemMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtDataitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtDataitemComponent);
        return ExtDataitemComponent;
    }(base));

    var dataviewMetaData = /** @class */ (function () {
        function dataviewMetaData() {
        }
        dataviewMetaData.XTYPE = 'dataview';
        dataviewMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'inline',
            'innerCls',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemId',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'lastSelected',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selected',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        dataviewMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,dataview,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'dataview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'dataview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'dataview,location' },
            { name: 'childlongpress', parameters: 'dataview,location' },
            { name: 'childmouseenter', parameters: 'dataview,location' },
            { name: 'childmouseleave', parameters: 'dataview,location' },
            { name: 'childsingletap', parameters: 'dataview,location' },
            { name: 'childtap', parameters: 'dataview,location' },
            { name: 'childtaphold', parameters: 'dataview,location' },
            { name: 'childtouchcancel', parameters: 'dataview,location' },
            { name: 'childtouchend', parameters: 'dataview,location' },
            { name: 'childtouchmove', parameters: 'dataview,location' },
            { name: 'childtouchstart', parameters: 'dataview,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,dataview,newActiveItem' },
            { name: 'deselect', parameters: 'dataview,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'dataview,event' },
            { name: 'focusenter', parameters: 'dataview,event' },
            { name: 'focusleave', parameters: 'dataview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'dataview,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'dataview,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'dataview,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'dataview,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'dataview,index,target,record,e' },
            { name: 'itemswipe', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtap', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'dataview,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'dataview,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'dataview' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'dataview,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'dataview,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'dataview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        dataviewMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'rowselection',
            'scrollablechange',
            'select',
            'selectionchange',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return dataviewMetaData;
    }());
    var ExtDataviewComponent = /** @class */ (function (_super) {
        __extends(ExtDataviewComponent, _super);
        function ExtDataviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, dataviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtDataviewComponent_1 = ExtDataviewComponent;
        ExtDataviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit(dataviewMetaData);
        };
        ExtDataviewComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtDataviewComponent_1;
        ExtDataviewComponent = ExtDataviewComponent_1 = __decorate([
            core.Component({
                selector: 'dataview',
                inputs: dataviewMetaData.PROPERTIES,
                outputs: dataviewMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtDataviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtDataviewComponent);
        return ExtDataviewComponent;
    }(base));

    var emptytextMetaData = /** @class */ (function () {
        function emptytextMetaData() {
        }
        emptytextMetaData.XTYPE = 'emptytext';
        emptytextMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        emptytextMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'emptytext' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'emptytext,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'emptytext,event' },
            { name: 'focusenter', parameters: 'emptytext,event' },
            { name: 'focusleave', parameters: 'emptytext,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'emptytext' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        emptytextMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return emptytextMetaData;
    }());
    var ExtEmptytextComponent = /** @class */ (function (_super) {
        __extends(ExtEmptytextComponent, _super);
        function ExtEmptytextComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, emptytextMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtEmptytextComponent_1 = ExtEmptytextComponent;
        ExtEmptytextComponent.prototype.ngOnInit = function () {
            this.baseOnInit(emptytextMetaData);
        };
        ExtEmptytextComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtEmptytextComponent_1;
        ExtEmptytextComponent = ExtEmptytextComponent_1 = __decorate([
            core.Component({
                selector: 'emptytext',
                inputs: emptytextMetaData.PROPERTIES,
                outputs: emptytextMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtEmptytextComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtEmptytextComponent);
        return ExtEmptytextComponent;
    }(base));

    var indexbarMetaData = /** @class */ (function () {
        function indexbarMetaData() {
        }
        indexbarMetaData.XTYPE = 'indexbar';
        indexbarMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoHide',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'direction',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'dynamic',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'indicator',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'letters',
            'listeners',
            'listPrefix',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        indexbarMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedirectionchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'indexbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'indexbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'directionchange', parameters: 'sender,value,oldValue' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'indexbar,event' },
            { name: 'focusenter', parameters: 'indexbar,event' },
            { name: 'focusleave', parameters: 'indexbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'index', parameters: 'indexbar,html,target' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'indexbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        indexbarMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedirectionchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'directionchange',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'index',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return indexbarMetaData;
    }());
    var ExtIndexbarComponent = /** @class */ (function (_super) {
        __extends(ExtIndexbarComponent, _super);
        function ExtIndexbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, indexbarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtIndexbarComponent_1 = ExtIndexbarComponent;
        ExtIndexbarComponent.prototype.ngOnInit = function () {
            this.baseOnInit(indexbarMetaData);
        };
        ExtIndexbarComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtIndexbarComponent_1;
        ExtIndexbarComponent = ExtIndexbarComponent_1 = __decorate([
            core.Component({
                selector: 'indexbar',
                inputs: indexbarMetaData.PROPERTIES,
                outputs: indexbarMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtIndexbarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtIndexbarComponent);
        return ExtIndexbarComponent;
    }(base));

    var itemheaderMetaData = /** @class */ (function () {
        function itemheaderMetaData() {
        }
        itemheaderMetaData.XTYPE = 'itemheader';
        itemheaderMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'group',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        itemheaderMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'itemheader' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'itemheader,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'itemheader,event' },
            { name: 'focusenter', parameters: 'itemheader,event' },
            { name: 'focusleave', parameters: 'itemheader,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'itemheader' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        itemheaderMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return itemheaderMetaData;
    }());
    var ExtItemheaderComponent = /** @class */ (function (_super) {
        __extends(ExtItemheaderComponent, _super);
        function ExtItemheaderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, itemheaderMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtItemheaderComponent_1 = ExtItemheaderComponent;
        ExtItemheaderComponent.prototype.ngOnInit = function () {
            this.baseOnInit(itemheaderMetaData);
        };
        ExtItemheaderComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtItemheaderComponent_1;
        ExtItemheaderComponent = ExtItemheaderComponent_1 = __decorate([
            core.Component({
                selector: 'itemheader',
                inputs: itemheaderMetaData.PROPERTIES,
                outputs: itemheaderMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtItemheaderComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtItemheaderComponent);
        return ExtItemheaderComponent;
    }(base));

    var listMetaData = /** @class */ (function () {
        function listMetaData() {
        }
        listMetaData.XTYPE = 'list';
        listMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'bufferSize',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'collapseDefaults',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'disclosureProperty',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'grouped',
            'groupFooter',
            'groupHeader',
            'grouping',
            'groupPlaceholder',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'horizontalOverflow',
            'html',
            'id',
            'inactiveChildTabIndex',
            'indexBar',
            'infinite',
            'inline',
            'innerCls',
            'innerCtHeight',
            'innerWidth',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemConfig',
            'itemContentCls',
            'itemDataMap',
            'itemId',
            'itemInnerCls',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'maintainChildNodes',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxItemCache',
            'maxWidth',
            'minHeight',
            'minimumBufferDistance',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'onItemDisclosure',
            'padding',
            'pinFooters',
            'pinHeaders',
            'pinnedFooter',
            'pinnedFooterHeight',
            'pinnedHeader',
            'pinnedHeaderHeight',
            'plugins',
            'pressedDelay',
            'preventSelectionOnDisclose',
            'preventSelectionOnTool',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'rowLines',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'striped',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'topRenderedIndex',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'variableHeights',
            'verticalOverflow',
            'viewModel',
            'visibleHeight',
            'visibleLeft',
            'visibleTop',
            'visibleWidth',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        listMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,list,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforegroupcollapse', parameters: 'list,group' },
            { name: 'beforegroupexpand', parameters: 'list,group' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'list' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'list,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'list,location' },
            { name: 'childlongpress', parameters: 'list,location' },
            { name: 'childmouseenter', parameters: 'list,location' },
            { name: 'childmouseleave', parameters: 'list,location' },
            { name: 'childsingletap', parameters: 'list,location' },
            { name: 'childtap', parameters: 'list,location' },
            { name: 'childtaphold', parameters: 'list,location' },
            { name: 'childtouchcancel', parameters: 'list,location' },
            { name: 'childtouchend', parameters: 'list,location' },
            { name: 'childtouchmove', parameters: 'list,location' },
            { name: 'childtouchstart', parameters: 'list,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,list,newActiveItem' },
            { name: 'deselect', parameters: 'list,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'list,event' },
            { name: 'focusenter', parameters: 'list,event' },
            { name: 'focusleave', parameters: 'list,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'groupcollapse', parameters: 'list,group' },
            { name: 'groupexpand', parameters: 'list,group' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'list,index,record,action' },
            { name: 'itemdoubletap', parameters: 'list,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'list,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'list,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'list,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'list,index,target,record,e' },
            { name: 'itemswipe', parameters: 'list,index,target,record,e' },
            { name: 'itemtap', parameters: 'list,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'list,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'list,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'list,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'list,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'list,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'list,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'list' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'list,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'list,selected' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'list' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        listMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforegroupcollapse',
            'beforegroupexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'disclose',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'groupcollapse',
            'groupexpand',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemaction',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return listMetaData;
    }());
    var ExtListComponent = /** @class */ (function (_super) {
        __extends(ExtListComponent, _super);
        function ExtListComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, listMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtListComponent_1 = ExtListComponent;
        ExtListComponent.prototype.ngOnInit = function () {
            this.baseOnInit(listMetaData);
        };
        ExtListComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtListComponent_1;
        ExtListComponent = ExtListComponent_1 = __decorate([
            core.Component({
                selector: 'list',
                inputs: listMetaData.PROPERTIES,
                outputs: listMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtListComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtListComponent);
        return ExtListComponent;
    }(base));

    var listitemMetaData = /** @class */ (function () {
        function listitemMetaData() {
        }
        listitemMetaData.XTYPE = 'listitem';
        listitemMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataMap',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'recordIndex',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        listitemMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,listitem,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'listitem,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'listitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'listitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,listitem,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'listitem,event' },
            { name: 'focusenter', parameters: 'listitem,event' },
            { name: 'focusleave', parameters: 'listitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'listitem,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'listitem,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'listitem,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'listitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'dataItem,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        listitemMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return listitemMetaData;
    }());
    var ExtListitemComponent = /** @class */ (function (_super) {
        __extends(ExtListitemComponent, _super);
        function ExtListitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, listitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtListitemComponent_1 = ExtListitemComponent;
        ExtListitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit(listitemMetaData);
        };
        ExtListitemComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtListitemComponent_1;
        ExtListitemComponent = ExtListitemComponent_1 = __decorate([
            core.Component({
                selector: 'listitem',
                inputs: listitemMetaData.PROPERTIES,
                outputs: listitemMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtListitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtListitemComponent);
        return ExtListitemComponent;
    }(base));

    var listitemplaceholderMetaData = /** @class */ (function () {
        function listitemplaceholderMetaData() {
        }
        listitemplaceholderMetaData.XTYPE = 'listitemplaceholder';
        listitemplaceholderMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'recordIndex',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        listitemplaceholderMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'listitemplaceholder' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'listitemplaceholder,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'listitemplaceholder,event' },
            { name: 'focusenter', parameters: 'listitemplaceholder,event' },
            { name: 'focusleave', parameters: 'listitemplaceholder,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'listitemplaceholder' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        listitemplaceholderMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return listitemplaceholderMetaData;
    }());
    var ExtListitemplaceholderComponent = /** @class */ (function (_super) {
        __extends(ExtListitemplaceholderComponent, _super);
        function ExtListitemplaceholderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, listitemplaceholderMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtListitemplaceholderComponent_1 = ExtListitemplaceholderComponent;
        ExtListitemplaceholderComponent.prototype.ngOnInit = function () {
            this.baseOnInit(listitemplaceholderMetaData);
        };
        ExtListitemplaceholderComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtListitemplaceholderComponent_1;
        ExtListitemplaceholderComponent = ExtListitemplaceholderComponent_1 = __decorate([
            core.Component({
                selector: 'listitemplaceholder',
                inputs: listitemplaceholderMetaData.PROPERTIES,
                outputs: listitemplaceholderMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtListitemplaceholderComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtListitemplaceholderComponent);
        return ExtListitemplaceholderComponent;
    }(base));

    var listswiperitemMetaData = /** @class */ (function () {
        function listswiperitemMetaData() {
        }
        listswiperitemMetaData.XTYPE = 'listswiperitem';
        listswiperitemMetaData.PROPERTIES = [
            'action',
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'state',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'translationTarget',
            'twoWayBindable',
            'ui',
            'undo',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        listswiperitemMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,listswiperitem,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'listswiperitem,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'listswiperitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'listswiperitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,listswiperitem,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'listswiperitem,event' },
            { name: 'focusenter', parameters: 'listswiperitem,event' },
            { name: 'focusleave', parameters: 'listswiperitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'listswiperitem,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'listswiperitem,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'listswiperitem,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'listswiperitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        listswiperitemMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return listswiperitemMetaData;
    }());
    var ExtListswiperitemComponent = /** @class */ (function (_super) {
        __extends(ExtListswiperitemComponent, _super);
        function ExtListswiperitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, listswiperitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtListswiperitemComponent_1 = ExtListswiperitemComponent;
        ExtListswiperitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit(listswiperitemMetaData);
        };
        ExtListswiperitemComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtListswiperitemComponent_1;
        ExtListswiperitemComponent = ExtListswiperitemComponent_1 = __decorate([
            core.Component({
                selector: 'listswiperitem',
                inputs: listswiperitemMetaData.PROPERTIES,
                outputs: listswiperitemMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtListswiperitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtListswiperitemComponent);
        return ExtListswiperitemComponent;
    }(base));

    var listswiperstepperMetaData = /** @class */ (function () {
        function listswiperstepperMetaData() {
        }
        listswiperstepperMetaData.XTYPE = 'listswiperstepper';
        listswiperstepperMetaData.PROPERTIES = [
            'action',
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'side',
            'state',
            'stateful',
            'statefulDefaults',
            'stateId',
            'step',
            'style',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'translationTarget',
            'twoWayBindable',
            'ui',
            'undo',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        listswiperstepperMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,listswiperstepper,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'listswiperstepper,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'listswiperstepper' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'listswiperstepper,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,listswiperstepper,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'listswiperstepper,event' },
            { name: 'focusenter', parameters: 'listswiperstepper,event' },
            { name: 'focusleave', parameters: 'listswiperstepper,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'listswiperstepper,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'listswiperstepper,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'listswiperstepper,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'listswiperstepper' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        listswiperstepperMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return listswiperstepperMetaData;
    }());
    var ExtListswiperstepperComponent = /** @class */ (function (_super) {
        __extends(ExtListswiperstepperComponent, _super);
        function ExtListswiperstepperComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, listswiperstepperMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtListswiperstepperComponent_1 = ExtListswiperstepperComponent;
        ExtListswiperstepperComponent.prototype.ngOnInit = function () {
            this.baseOnInit(listswiperstepperMetaData);
        };
        ExtListswiperstepperComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtListswiperstepperComponent_1;
        ExtListswiperstepperComponent = ExtListswiperstepperComponent_1 = __decorate([
            core.Component({
                selector: 'listswiperstepper',
                inputs: listswiperstepperMetaData.PROPERTIES,
                outputs: listswiperstepperMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtListswiperstepperComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtListswiperstepperComponent);
        return ExtListswiperstepperComponent;
    }(base));

    var nestedlistMetaData = /** @class */ (function () {
        function nestedlistMetaData() {
        }
        nestedlistMetaData.XTYPE = 'nestedlist';
        nestedlistMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowDeselect',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'backButton',
            'backText',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'detailCard',
            'detailContainer',
            'disabled',
            'displayed',
            'displayField',
            'docked',
            'draggable',
            'emptyText',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'lastActiveList',
            'lastNode',
            'layout',
            'left',
            'listConfig',
            'listeners',
            'loadingText',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'onItemDisclosure',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'title',
            'toFrontOnShow',
            'toolbar',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'updateTitleText',
            'userCls',
            'userSelectable',
            'useTitleAsBackText',
            'variableHeights',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        nestedlistMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,nestedlist,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'nestedlist,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'back', parameters: 'nestedlist,node,lastActiveList,detailCardActive' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeload', parameters: 'nestedlist,store,operation' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeselectionchange', parameters: 'nestedlist,list,node,selections' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'nestedlist' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'nestedlist,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'containertap', parameters: 'nestedlist,list,e' },
            { name: 'deactivate', parameters: 'oldActiveItem,nestedlist,newActiveItem' },
            { name: 'deselect', parameters: 'nestedlist,list,selections' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'nestedlist,event' },
            { name: 'focusenter', parameters: 'nestedlist,event' },
            { name: 'focusleave', parameters: 'nestedlist,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'nestedlist,list,index,target,record,e' },
            { name: 'itemtap', parameters: 'nestedlist,list,index,target,record,e' },
            { name: 'leafitemtap', parameters: 'nestedlist,list,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'listchange', parameters: 'nestedlist,listitem' },
            { name: 'load', parameters: 'nestedlist,store,records,successful,operation' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'nestedlist,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'nestedlist,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'nestedlist,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'nestedlist,list,selections' },
            { name: 'selectionchange', parameters: 'nestedlist,list,selections' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'nestedlist' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        nestedlistMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'back',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforeload',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeselectionchange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'containertap',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemdoubletap',
            'itemtap',
            'leafitemtap',
            'leftchange',
            'listchange',
            'load',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'selectionchange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return nestedlistMetaData;
    }());
    var ExtNestedlistComponent = /** @class */ (function (_super) {
        __extends(ExtNestedlistComponent, _super);
        function ExtNestedlistComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, nestedlistMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtNestedlistComponent_1 = ExtNestedlistComponent;
        ExtNestedlistComponent.prototype.ngOnInit = function () {
            this.baseOnInit(nestedlistMetaData);
        };
        ExtNestedlistComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtNestedlistComponent_1;
        ExtNestedlistComponent = ExtNestedlistComponent_1 = __decorate([
            core.Component({
                selector: 'nestedlist',
                inputs: nestedlistMetaData.PROPERTIES,
                outputs: nestedlistMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtNestedlistComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtNestedlistComponent);
        return ExtNestedlistComponent;
    }(base));

    var pullrefreshbarMetaData = /** @class */ (function () {
        function pullrefreshbarMetaData() {
        }
        pullrefreshbarMetaData.XTYPE = 'pullrefreshbar';
        pullrefreshbarMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'lastUpdated',
            'lastUpdatedDateFormat',
            'lastUpdatedText',
            'left',
            'listeners',
            'loadedText',
            'loadingText',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'mode',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'pull',
            'pullText',
            'record',
            'reference',
            'relative',
            'releaseText',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'state',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pullrefreshbarMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pullrefreshbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pullrefreshbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pullrefreshbar,event' },
            { name: 'focusenter', parameters: 'pullrefreshbar,event' },
            { name: 'focusleave', parameters: 'pullrefreshbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pullrefreshbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pullrefreshbarMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pullrefreshbarMetaData;
    }());
    var ExtPullrefreshbarComponent = /** @class */ (function (_super) {
        __extends(ExtPullrefreshbarComponent, _super);
        function ExtPullrefreshbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pullrefreshbarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPullrefreshbarComponent_1 = ExtPullrefreshbarComponent;
        ExtPullrefreshbarComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pullrefreshbarMetaData);
        };
        ExtPullrefreshbarComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPullrefreshbarComponent_1;
        ExtPullrefreshbarComponent = ExtPullrefreshbarComponent_1 = __decorate([
            core.Component({
                selector: 'pullrefreshbar',
                inputs: pullrefreshbarMetaData.PROPERTIES,
                outputs: pullrefreshbarMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPullrefreshbarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPullrefreshbarComponent);
        return ExtPullrefreshbarComponent;
    }(base));

    var pullrefreshspinnerMetaData = /** @class */ (function () {
        function pullrefreshspinnerMetaData() {
        }
        pullrefreshspinnerMetaData.XTYPE = 'pullrefreshspinner';
        pullrefreshspinnerMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'lastUpdated',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'pull',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'state',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pullrefreshspinnerMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pullrefreshspinner' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pullrefreshspinner,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pullrefreshspinner,event' },
            { name: 'focusenter', parameters: 'pullrefreshspinner,event' },
            { name: 'focusleave', parameters: 'pullrefreshspinner,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pullrefreshspinner' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pullrefreshspinnerMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pullrefreshspinnerMetaData;
    }());
    var ExtPullrefreshspinnerComponent = /** @class */ (function (_super) {
        __extends(ExtPullrefreshspinnerComponent, _super);
        function ExtPullrefreshspinnerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pullrefreshspinnerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPullrefreshspinnerComponent_1 = ExtPullrefreshspinnerComponent;
        ExtPullrefreshspinnerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pullrefreshspinnerMetaData);
        };
        ExtPullrefreshspinnerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPullrefreshspinnerComponent_1;
        ExtPullrefreshspinnerComponent = ExtPullrefreshspinnerComponent_1 = __decorate([
            core.Component({
                selector: 'pullrefreshspinner',
                inputs: pullrefreshspinnerMetaData.PROPERTIES,
                outputs: pullrefreshspinnerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPullrefreshspinnerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPullrefreshspinnerComponent);
        return ExtPullrefreshspinnerComponent;
    }(base));

    var simplelistitemMetaData = /** @class */ (function () {
        function simplelistitemMetaData() {
        }
        simplelistitemMetaData.XTYPE = 'simplelistitem';
        simplelistitemMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'recordIndex',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        simplelistitemMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'simplelistitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'simplelistitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'simplelistitem,event' },
            { name: 'focusenter', parameters: 'simplelistitem,event' },
            { name: 'focusleave', parameters: 'simplelistitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'simplelistitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        simplelistitemMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return simplelistitemMetaData;
    }());
    var ExtSimplelistitemComponent = /** @class */ (function (_super) {
        __extends(ExtSimplelistitemComponent, _super);
        function ExtSimplelistitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, simplelistitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSimplelistitemComponent_1 = ExtSimplelistitemComponent;
        ExtSimplelistitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit(simplelistitemMetaData);
        };
        ExtSimplelistitemComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSimplelistitemComponent_1;
        ExtSimplelistitemComponent = ExtSimplelistitemComponent_1 = __decorate([
            core.Component({
                selector: 'simplelistitem',
                inputs: simplelistitemMetaData.PROPERTIES,
                outputs: simplelistitemMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSimplelistitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSimplelistitemComponent);
        return ExtSimplelistitemComponent;
    }(base));

    var dialogMetaData = /** @class */ (function () {
        function dialogMetaData() {
        }
        dialogMetaData.XTYPE = 'dialog';
        dialogMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'constrainDrag',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'dismissAction',
            'dismissHandler',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maskTapHandler',
            'maxHeight',
            'maximizable',
            'maximizeAnimation',
            'maximized',
            'maximizeProxy',
            'maximizeTool',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'restorable',
            'restoreAnimation',
            'restoreTool',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        dialogMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,dialog,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'dialog,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'dialog' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'dialog' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaximize', parameters: 'dialog' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'dialog,context' },
            { name: 'beforerestore', parameters: 'dialog' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'dialog' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'dialog,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'dialog' },
            { name: 'deactivate', parameters: 'oldActiveItem,dialog,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'dialog' },
            { name: 'drawershow', parameters: 'dialog' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'dialog' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'dialog,event' },
            { name: 'focusenter', parameters: 'dialog,event' },
            { name: 'focusleave', parameters: 'dialog,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maximize', parameters: 'dialog' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'dialog,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'dialog,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'dialog,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'dialog,context' },
            { name: 'resizedragcancel', parameters: 'dialog,context' },
            { name: 'resizedragend', parameters: 'dialog,context' },
            { name: 'resizedragstart', parameters: 'dialog,context' },
            { name: 'restore', parameters: 'dialog' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'dialog' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        dialogMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaximize',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerestore',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maximize',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'restore',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return dialogMetaData;
    }());
    var ExtDialogComponent = /** @class */ (function (_super) {
        __extends(ExtDialogComponent, _super);
        function ExtDialogComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, dialogMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtDialogComponent_1 = ExtDialogComponent;
        ExtDialogComponent.prototype.ngOnInit = function () {
            this.baseOnInit(dialogMetaData);
        };
        ExtDialogComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtDialogComponent_1;
        ExtDialogComponent = ExtDialogComponent_1 = __decorate([
            core.Component({
                selector: 'dialog',
                inputs: dialogMetaData.PROPERTIES,
                outputs: dialogMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtDialogComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtDialogComponent);
        return ExtDialogComponent;
    }(base));

    var windowMetaData = /** @class */ (function () {
        function windowMetaData() {
        }
        windowMetaData.XTYPE = 'window';
        windowMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'constrainDrag',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'dismissAction',
            'dismissHandler',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maskTapHandler',
            'maxHeight',
            'maximizable',
            'maximizeAnimation',
            'maximized',
            'maximizeProxy',
            'maximizeTool',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'restorable',
            'restoreAnimation',
            'restoreTool',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        windowMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,dialog,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'dialog,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'dialog' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'dialog' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaximize', parameters: 'dialog' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'dialog,context' },
            { name: 'beforerestore', parameters: 'dialog' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'dialog' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'dialog,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'dialog' },
            { name: 'deactivate', parameters: 'oldActiveItem,dialog,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'dialog' },
            { name: 'drawershow', parameters: 'dialog' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'dialog' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'dialog,event' },
            { name: 'focusenter', parameters: 'dialog,event' },
            { name: 'focusleave', parameters: 'dialog,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maximize', parameters: 'dialog' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'dialog,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'dialog,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'dialog,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'dialog,context' },
            { name: 'resizedragcancel', parameters: 'dialog,context' },
            { name: 'resizedragend', parameters: 'dialog,context' },
            { name: 'resizedragstart', parameters: 'dialog,context' },
            { name: 'restore', parameters: 'dialog' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'dialog' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        windowMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaximize',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerestore',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maximize',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'restore',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return windowMetaData;
    }());
    var ExtWindowComponent = /** @class */ (function (_super) {
        __extends(ExtWindowComponent, _super);
        function ExtWindowComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, windowMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtWindowComponent_1 = ExtWindowComponent;
        ExtWindowComponent.prototype.ngOnInit = function () {
            this.baseOnInit(windowMetaData);
        };
        ExtWindowComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtWindowComponent_1;
        ExtWindowComponent = ExtWindowComponent_1 = __decorate([
            core.Component({
                selector: 'window',
                inputs: windowMetaData.PROPERTIES,
                outputs: windowMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtWindowComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtWindowComponent);
        return ExtWindowComponent;
    }(base));

    var drawMetaData = /** @class */ (function () {
        function drawMetaData() {
        }
        drawMetaData.XTYPE = 'draw';
        drawMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'downloadServerUrl',
            'draggable',
            'engine',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gradients',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizeHandler',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sprites',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'surfaceZIndexes',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        drawMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,draw,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'draw,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'draw' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'draw,event' },
            { name: 'bodyresize', parameters: 'size' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,draw,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'draw,event' },
            { name: 'focusenter', parameters: 'draw,event' },
            { name: 'focusleave', parameters: 'draw,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'draw,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'draw,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'draw,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spriteclick', parameters: 'sprite,event' },
            { name: 'spritedblclick', parameters: 'sprite,event' },
            { name: 'spritemousedown', parameters: 'sprite,event' },
            { name: 'spritemousemove', parameters: 'sprite,event' },
            { name: 'spritemouseout', parameters: 'sprite,event' },
            { name: 'spritemouseover', parameters: 'sprite,event' },
            { name: 'spritemouseup', parameters: 'sprite,event' },
            { name: 'spritetap', parameters: 'sprite,event' },
            { name: 'tofront', parameters: 'draw' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        drawMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bodyresize',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'spriteclick',
            'spritedblclick',
            'spritemousedown',
            'spritemousemove',
            'spritemouseout',
            'spritemouseover',
            'spritemouseup',
            'spritetap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return drawMetaData;
    }());
    var ExtDrawComponent = /** @class */ (function (_super) {
        __extends(ExtDrawComponent, _super);
        function ExtDrawComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, drawMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtDrawComponent_1 = ExtDrawComponent;
        ExtDrawComponent.prototype.ngOnInit = function () {
            this.baseOnInit(drawMetaData);
        };
        ExtDrawComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtDrawComponent_1;
        ExtDrawComponent = ExtDrawComponent_1 = __decorate([
            core.Component({
                selector: 'draw',
                inputs: drawMetaData.PROPERTIES,
                outputs: drawMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtDrawComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtDrawComponent);
        return ExtDrawComponent;
    }(base));

    var surfaceMetaData = /** @class */ (function () {
        function surfaceMetaData() {
        }
        surfaceMetaData.XTYPE = 'surface';
        surfaceMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'background',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'flex',
            'flipRtlText',
            'floated',
            'focusCls',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rect',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        surfaceMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'surface' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'surface,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'surface,event' },
            { name: 'focusenter', parameters: 'surface,event' },
            { name: 'focusleave', parameters: 'surface,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'surface' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        surfaceMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return surfaceMetaData;
    }());
    var ExtSurfaceComponent = /** @class */ (function (_super) {
        __extends(ExtSurfaceComponent, _super);
        function ExtSurfaceComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, surfaceMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSurfaceComponent_1 = ExtSurfaceComponent;
        ExtSurfaceComponent.prototype.ngOnInit = function () {
            this.baseOnInit(surfaceMetaData);
        };
        ExtSurfaceComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSurfaceComponent_1;
        ExtSurfaceComponent = ExtSurfaceComponent_1 = __decorate([
            core.Component({
                selector: 'surface',
                inputs: surfaceMetaData.PROPERTIES,
                outputs: surfaceMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSurfaceComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSurfaceComponent);
        return ExtSurfaceComponent;
    }(base));

    var editorMetaData = /** @class */ (function () {
        function editorMetaData() {
        }
        editorMetaData.XTYPE = 'editor';
        editorMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignment',
            'alignSelf',
            'allowBlur',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cancelOnClear',
            'cancelOnEsc',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'completeOnEnter',
            'constrain',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'field',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideEl',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'ignoreNoChange',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'matchFont',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'offset',
            'padding',
            'parentEl',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'revertInvalid',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'swallowKeys',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'updateEl',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        editorMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,editor,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'editor,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecomplete', parameters: 'editor,value,startValue' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestartedit', parameters: 'editor,boundEl,value' },
            { name: 'beforetofront', parameters: 'editor' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'editor,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'canceledit', parameters: 'editor,value,startValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'complete', parameters: 'editor,value,startValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,editor,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'editor,event' },
            { name: 'focusenter', parameters: 'editor,event' },
            { name: 'focusleave', parameters: 'editor,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'editor,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'editor,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'editor,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'specialkey', parameters: 'editor,field,event' },
            { name: 'startedit', parameters: 'editor,boundEl,value' },
            { name: 'tofront', parameters: 'editor' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        editorMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecomplete',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestartedit',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'canceledit',
            'centeredchange',
            'complete',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'specialkey',
            'startedit',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return editorMetaData;
    }());
    var ExtEditorComponent = /** @class */ (function (_super) {
        __extends(ExtEditorComponent, _super);
        function ExtEditorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, editorMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtEditorComponent_1 = ExtEditorComponent;
        ExtEditorComponent.prototype.ngOnInit = function () {
            this.baseOnInit(editorMetaData);
        };
        ExtEditorComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtEditorComponent_1;
        ExtEditorComponent = ExtEditorComponent_1 = __decorate([
            core.Component({
                selector: 'editor',
                inputs: editorMetaData.PROPERTIES,
                outputs: editorMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtEditorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtEditorComponent);
        return ExtEditorComponent;
    }(base));

    var checkboxMetaData = /** @class */ (function () {
        function checkboxMetaData() {
        }
        checkboxMetaData.XTYPE = 'checkbox';
        checkboxMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'boxLabel',
            'boxLabelAlign',
            'bubbleDirty',
            'centered',
            'checked',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMaskTap',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        checkboxMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'checkbox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'checkbox,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'checkbox,newValue,oldValue' },
            { name: 'check', parameters: 'checkbox' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'checkbox,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'checkbox,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'checkbox,event' },
            { name: 'focusenter', parameters: 'checkbox,event' },
            { name: 'focusleave', parameters: 'checkbox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'checkbox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'uncheck', parameters: 'checkbox' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        checkboxMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'check',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'uncheck',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return checkboxMetaData;
    }());
    var ExtCheckboxComponent = /** @class */ (function (_super) {
        __extends(ExtCheckboxComponent, _super);
        function ExtCheckboxComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, checkboxMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCheckboxComponent_1 = ExtCheckboxComponent;
        ExtCheckboxComponent.prototype.ngOnInit = function () {
            this.baseOnInit(checkboxMetaData);
        };
        ExtCheckboxComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCheckboxComponent_1;
        ExtCheckboxComponent = ExtCheckboxComponent_1 = __decorate([
            core.Component({
                selector: 'checkbox',
                inputs: checkboxMetaData.PROPERTIES,
                outputs: checkboxMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCheckboxComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCheckboxComponent);
        return ExtCheckboxComponent;
    }(base));

    var checkboxfieldMetaData = /** @class */ (function () {
        function checkboxfieldMetaData() {
        }
        checkboxfieldMetaData.XTYPE = 'checkboxfield';
        checkboxfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'boxLabel',
            'boxLabelAlign',
            'bubbleDirty',
            'centered',
            'checked',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMaskTap',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        checkboxfieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'checkbox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'checkbox,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'checkbox,newValue,oldValue' },
            { name: 'check', parameters: 'checkbox' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'checkbox,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'checkbox,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'checkbox,event' },
            { name: 'focusenter', parameters: 'checkbox,event' },
            { name: 'focusleave', parameters: 'checkbox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'checkbox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'uncheck', parameters: 'checkbox' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        checkboxfieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'check',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'uncheck',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return checkboxfieldMetaData;
    }());
    var ExtCheckboxfieldComponent = /** @class */ (function (_super) {
        __extends(ExtCheckboxfieldComponent, _super);
        function ExtCheckboxfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, checkboxfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCheckboxfieldComponent_1 = ExtCheckboxfieldComponent;
        ExtCheckboxfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(checkboxfieldMetaData);
        };
        ExtCheckboxfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCheckboxfieldComponent_1;
        ExtCheckboxfieldComponent = ExtCheckboxfieldComponent_1 = __decorate([
            core.Component({
                selector: 'checkboxfield',
                inputs: checkboxfieldMetaData.PROPERTIES,
                outputs: checkboxfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCheckboxfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCheckboxfieldComponent);
        return ExtCheckboxfieldComponent;
    }(base));

    var checkboxgroupMetaData = /** @class */ (function () {
        function checkboxgroupMetaData() {
        }
        checkboxgroupMetaData.XTYPE = 'checkboxgroup';
        checkboxgroupMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'autoSize',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'cls',
            'constrainAlign',
            'container',
            'contentEl',
            'controller',
            'data',
            'defaultFieldValue',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'delegate',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'fieldDefaults',
            'fieldsName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'layout',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'vertical',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        checkboxgroupMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'checkboxgroup' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'checkboxgroup,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'checkboxgroup,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'checkboxgroup,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'checkboxgroup,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'checkboxgroup,event' },
            { name: 'focusenter', parameters: 'checkboxgroup,event' },
            { name: 'focusleave', parameters: 'checkboxgroup,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'checkboxgroup' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        checkboxgroupMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return checkboxgroupMetaData;
    }());
    var ExtCheckboxgroupComponent = /** @class */ (function (_super) {
        __extends(ExtCheckboxgroupComponent, _super);
        function ExtCheckboxgroupComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, checkboxgroupMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCheckboxgroupComponent_1 = ExtCheckboxgroupComponent;
        ExtCheckboxgroupComponent.prototype.ngOnInit = function () {
            this.baseOnInit(checkboxgroupMetaData);
        };
        ExtCheckboxgroupComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCheckboxgroupComponent_1;
        ExtCheckboxgroupComponent = ExtCheckboxgroupComponent_1 = __decorate([
            core.Component({
                selector: 'checkboxgroup',
                inputs: checkboxgroupMetaData.PROPERTIES,
                outputs: checkboxgroupMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCheckboxgroupComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCheckboxgroupComponent);
        return ExtCheckboxgroupComponent;
    }(base));

    var comboboxMetaData = /** @class */ (function () {
        function comboboxMetaData() {
        }
        comboboxMetaData.XTYPE = 'combobox';
        comboboxMetaData.PROPERTIES = [
            'alignSelf',
            'alignTarget',
            'allQuery',
            'alwaysOnTop',
            'animateUnderline',
            'anyMatch',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoFocus',
            'autoFocusLast',
            'autoHideInputMask',
            'autoLoadOnValue',
            'autoSelect',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'caseSensitive',
            'centered',
            'chipView',
            'clearable',
            'cls',
            'collapseOnSelect',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'delimiter',
            'dirty',
            'disabled',
            'displayed',
            'displayField',
            'displayTpl',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'enableRegEx',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'forceSelection',
            'fullscreen',
            'height',
            'hidden',
            'hiddenName',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemCls',
            'itemId',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minChars',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multiSelect',
            'name',
            'nameable',
            'options',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'plugins',
            'primaryFilter',
            'publishes',
            'queryCaching',
            'queryDelay',
            'queryMode',
            'queryParam',
            'readOnly',
            'record',
            'recordCreator',
            'recordCreatorScope',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selection',
            'selectOnTab',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerAction',
            'triggers',
            'twoWayBindable',
            'typeAhead',
            'typeAheadDelay',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'valueCollection',
            'valueField',
            'valueNotFoundText',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        comboboxMetaData.EVENTS = [
            { name: 'action', parameters: 'combobox,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepickercreate', parameters: 'combobox,newValue' },
            { name: 'beforequery', parameters: 'queryPlan' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'combobox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'combobox,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'combobox,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'combobox,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'combobox,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'combobox,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'combobox,e' },
            { name: 'focusenter', parameters: 'combobox,event' },
            { name: 'focusleave', parameters: 'combobox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'combobox,e' },
            { name: 'keyup', parameters: 'combobox,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'combobox,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'combobox,e' },
            { name: 'pickercreate', parameters: 'combobox,picker' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'combobox,newValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'combobox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        comboboxMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforepickercreate',
            'beforequery',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'pickercreate',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return comboboxMetaData;
    }());
    var ExtComboboxComponent = /** @class */ (function (_super) {
        __extends(ExtComboboxComponent, _super);
        function ExtComboboxComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, comboboxMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtComboboxComponent_1 = ExtComboboxComponent;
        ExtComboboxComponent.prototype.ngOnInit = function () {
            this.baseOnInit(comboboxMetaData);
        };
        ExtComboboxComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtComboboxComponent_1;
        ExtComboboxComponent = ExtComboboxComponent_1 = __decorate([
            core.Component({
                selector: 'combobox',
                inputs: comboboxMetaData.PROPERTIES,
                outputs: comboboxMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtComboboxComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtComboboxComponent);
        return ExtComboboxComponent;
    }(base));

    var comboboxfieldMetaData = /** @class */ (function () {
        function comboboxfieldMetaData() {
        }
        comboboxfieldMetaData.XTYPE = 'comboboxfield';
        comboboxfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alignTarget',
            'allQuery',
            'alwaysOnTop',
            'animateUnderline',
            'anyMatch',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoFocus',
            'autoFocusLast',
            'autoHideInputMask',
            'autoLoadOnValue',
            'autoSelect',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'caseSensitive',
            'centered',
            'chipView',
            'clearable',
            'cls',
            'collapseOnSelect',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'delimiter',
            'dirty',
            'disabled',
            'displayed',
            'displayField',
            'displayTpl',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'enableRegEx',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'forceSelection',
            'fullscreen',
            'height',
            'hidden',
            'hiddenName',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemCls',
            'itemId',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minChars',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multiSelect',
            'name',
            'nameable',
            'options',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'plugins',
            'primaryFilter',
            'publishes',
            'queryCaching',
            'queryDelay',
            'queryMode',
            'queryParam',
            'readOnly',
            'record',
            'recordCreator',
            'recordCreatorScope',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selection',
            'selectOnTab',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerAction',
            'triggers',
            'twoWayBindable',
            'typeAhead',
            'typeAheadDelay',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'valueCollection',
            'valueField',
            'valueNotFoundText',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        comboboxfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'combobox,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepickercreate', parameters: 'combobox,newValue' },
            { name: 'beforequery', parameters: 'queryPlan' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'combobox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'combobox,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'combobox,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'combobox,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'combobox,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'combobox,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'combobox,e' },
            { name: 'focusenter', parameters: 'combobox,event' },
            { name: 'focusleave', parameters: 'combobox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'combobox,e' },
            { name: 'keyup', parameters: 'combobox,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'combobox,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'combobox,e' },
            { name: 'pickercreate', parameters: 'combobox,picker' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'combobox,newValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'combobox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        comboboxfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforepickercreate',
            'beforequery',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'pickercreate',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return comboboxfieldMetaData;
    }());
    var ExtComboboxfieldComponent = /** @class */ (function (_super) {
        __extends(ExtComboboxfieldComponent, _super);
        function ExtComboboxfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, comboboxfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtComboboxfieldComponent_1 = ExtComboboxfieldComponent;
        ExtComboboxfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(comboboxfieldMetaData);
        };
        ExtComboboxfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtComboboxfieldComponent_1;
        ExtComboboxfieldComponent = ExtComboboxfieldComponent_1 = __decorate([
            core.Component({
                selector: 'comboboxfield',
                inputs: comboboxfieldMetaData.PROPERTIES,
                outputs: comboboxfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtComboboxfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtComboboxfieldComponent);
        return ExtComboboxfieldComponent;
    }(base));

    var containerfieldMetaData = /** @class */ (function () {
        function containerfieldMetaData() {
        }
        containerfieldMetaData.XTYPE = 'containerfield';
        containerfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'autoSize',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'cls',
            'constrainAlign',
            'container',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'fieldDefaults',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'layout',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        containerfieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'containerfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'containerfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'containerfield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'containerfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'containerfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'containerfield,event' },
            { name: 'focusenter', parameters: 'containerfield,event' },
            { name: 'focusleave', parameters: 'containerfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'containerfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        containerfieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return containerfieldMetaData;
    }());
    var ExtContainerfieldComponent = /** @class */ (function (_super) {
        __extends(ExtContainerfieldComponent, _super);
        function ExtContainerfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, containerfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtContainerfieldComponent_1 = ExtContainerfieldComponent;
        ExtContainerfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(containerfieldMetaData);
        };
        ExtContainerfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtContainerfieldComponent_1;
        ExtContainerfieldComponent = ExtContainerfieldComponent_1 = __decorate([
            core.Component({
                selector: 'containerfield',
                inputs: containerfieldMetaData.PROPERTIES,
                outputs: containerfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtContainerfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtContainerfieldComponent);
        return ExtContainerfieldComponent;
    }(base));

    var fieldcontainerMetaData = /** @class */ (function () {
        function fieldcontainerMetaData() {
        }
        fieldcontainerMetaData.XTYPE = 'fieldcontainer';
        fieldcontainerMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'autoSize',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'cls',
            'constrainAlign',
            'container',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'fieldDefaults',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'layout',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        fieldcontainerMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'containerfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'containerfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'containerfield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'containerfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'containerfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'containerfield,event' },
            { name: 'focusenter', parameters: 'containerfield,event' },
            { name: 'focusleave', parameters: 'containerfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'containerfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        fieldcontainerMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return fieldcontainerMetaData;
    }());
    var ExtFieldcontainerComponent = /** @class */ (function (_super) {
        __extends(ExtFieldcontainerComponent, _super);
        function ExtFieldcontainerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, fieldcontainerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtFieldcontainerComponent_1 = ExtFieldcontainerComponent;
        ExtFieldcontainerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(fieldcontainerMetaData);
        };
        ExtFieldcontainerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtFieldcontainerComponent_1;
        ExtFieldcontainerComponent = ExtFieldcontainerComponent_1 = __decorate([
            core.Component({
                selector: 'fieldcontainer',
                inputs: fieldcontainerMetaData.PROPERTIES,
                outputs: fieldcontainerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtFieldcontainerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtFieldcontainerComponent);
        return ExtFieldcontainerComponent;
    }(base));

    var datefieldMetaData = /** @class */ (function () {
        function datefieldMetaData() {
        }
        datefieldMetaData.XTYPE = 'datefield';
        datefieldMetaData.PROPERTIES = [
            'alignSelf',
            'alignTarget',
            'altFormats',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'dateFormat',
            'defaultListenerScope',
            'destroyPickerOnHide',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxDate',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minDate',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stripCharsRe',
            'style',
            'submitFormat',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datefieldMetaData.EVENTS = [
            { name: 'action', parameters: 'datefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'datefield,newDate,oldDate' },
            { name: 'clearicontap', parameters: 'datefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'datefield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'datefield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datefield,e' },
            { name: 'focusenter', parameters: 'datefield,event' },
            { name: 'focusleave', parameters: 'datefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'datefield,e' },
            { name: 'keyup', parameters: 'datefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'datefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'datefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datefieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return datefieldMetaData;
    }());
    var ExtDatefieldComponent = /** @class */ (function (_super) {
        __extends(ExtDatefieldComponent, _super);
        function ExtDatefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datefieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtDatefieldComponent_1 = ExtDatefieldComponent;
        ExtDatefieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(datefieldMetaData);
        };
        ExtDatefieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtDatefieldComponent_1;
        ExtDatefieldComponent = ExtDatefieldComponent_1 = __decorate([
            core.Component({
                selector: 'datefield',
                inputs: datefieldMetaData.PROPERTIES,
                outputs: datefieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtDatefieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtDatefieldComponent);
        return ExtDatefieldComponent;
    }(base));

    var datepickerfieldMetaData = /** @class */ (function () {
        function datepickerfieldMetaData() {
        }
        datepickerfieldMetaData.XTYPE = 'datepickerfield';
        datepickerfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alignTarget',
            'altFormats',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'dateFormat',
            'defaultListenerScope',
            'destroyPickerOnHide',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxDate',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minDate',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stripCharsRe',
            'style',
            'submitFormat',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datepickerfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'datefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'datefield,newDate,oldDate' },
            { name: 'clearicontap', parameters: 'datefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'datefield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'datefield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datefield,e' },
            { name: 'focusenter', parameters: 'datefield,event' },
            { name: 'focusleave', parameters: 'datefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'datefield,e' },
            { name: 'keyup', parameters: 'datefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'datefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'datefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datepickerfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return datepickerfieldMetaData;
    }());
    var ExtDatepickerfieldComponent = /** @class */ (function (_super) {
        __extends(ExtDatepickerfieldComponent, _super);
        function ExtDatepickerfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datepickerfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtDatepickerfieldComponent_1 = ExtDatepickerfieldComponent;
        ExtDatepickerfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(datepickerfieldMetaData);
        };
        ExtDatepickerfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtDatepickerfieldComponent_1;
        ExtDatepickerfieldComponent = ExtDatepickerfieldComponent_1 = __decorate([
            core.Component({
                selector: 'datepickerfield',
                inputs: datepickerfieldMetaData.PROPERTIES,
                outputs: datepickerfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtDatepickerfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtDatepickerfieldComponent);
        return ExtDatepickerfieldComponent;
    }(base));

    var datepickernativefieldMetaData = /** @class */ (function () {
        function datepickernativefieldMetaData() {
        }
        datepickernativefieldMetaData.XTYPE = 'datepickernativefield';
        datepickernativefieldMetaData.PROPERTIES = [
            'alignSelf',
            'alignTarget',
            'altFormats',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'dateFormat',
            'defaultListenerScope',
            'destroyPickerOnHide',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxDate',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minDate',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stripCharsRe',
            'style',
            'submitFormat',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datepickernativefieldMetaData.EVENTS = [
            { name: 'action', parameters: 'datepickernativefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datepickernativefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datepickernativefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'datepickernativefield,newDate,oldDate' },
            { name: 'clearicontap', parameters: 'datepickernativefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'datepickernativefield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'datepickernativefield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datepickernativefield,e' },
            { name: 'focusenter', parameters: 'datepickernativefield,event' },
            { name: 'focusleave', parameters: 'datepickernativefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'datepickernativefield,e' },
            { name: 'keyup', parameters: 'datepickernativefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'datepickernativefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'datepickernativefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datepickernativefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datepickernativefieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return datepickernativefieldMetaData;
    }());
    var ExtDatepickernativefieldComponent = /** @class */ (function (_super) {
        __extends(ExtDatepickernativefieldComponent, _super);
        function ExtDatepickernativefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datepickernativefieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtDatepickernativefieldComponent_1 = ExtDatepickernativefieldComponent;
        ExtDatepickernativefieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(datepickernativefieldMetaData);
        };
        ExtDatepickernativefieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtDatepickernativefieldComponent_1;
        ExtDatepickernativefieldComponent = ExtDatepickernativefieldComponent_1 = __decorate([
            core.Component({
                selector: 'datepickernativefield',
                inputs: datepickernativefieldMetaData.PROPERTIES,
                outputs: datepickernativefieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtDatepickernativefieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtDatepickernativefieldComponent);
        return ExtDatepickernativefieldComponent;
    }(base));

    var displayfieldMetaData = /** @class */ (function () {
        function displayfieldMetaData() {
        }
        displayfieldMetaData.XTYPE = 'displayfield';
        displayfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'encodeHtml',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusable',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderer',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        displayfieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'displayfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'displayfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'displayfield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'displayfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'displayfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'displayfield,event' },
            { name: 'focusenter', parameters: 'displayfield,event' },
            { name: 'focusleave', parameters: 'displayfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'displayfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        displayfieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return displayfieldMetaData;
    }());
    var ExtDisplayfieldComponent = /** @class */ (function (_super) {
        __extends(ExtDisplayfieldComponent, _super);
        function ExtDisplayfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, displayfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtDisplayfieldComponent_1 = ExtDisplayfieldComponent;
        ExtDisplayfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(displayfieldMetaData);
        };
        ExtDisplayfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtDisplayfieldComponent_1;
        ExtDisplayfieldComponent = ExtDisplayfieldComponent_1 = __decorate([
            core.Component({
                selector: 'displayfield',
                inputs: displayfieldMetaData.PROPERTIES,
                outputs: displayfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtDisplayfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtDisplayfieldComponent);
        return ExtDisplayfieldComponent;
    }(base));

    var emailfieldMetaData = /** @class */ (function () {
        function emailfieldMetaData() {
        }
        emailfieldMetaData.XTYPE = 'emailfield';
        emailfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        emailfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'emailfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'emailfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'emailfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'emailfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'emailfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'emailfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'emailfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'emailfield,e' },
            { name: 'focusenter', parameters: 'emailfield,event' },
            { name: 'focusleave', parameters: 'emailfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'emailfield,e' },
            { name: 'keyup', parameters: 'emailfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'emailfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'emailfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'emailfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        emailfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return emailfieldMetaData;
    }());
    var ExtEmailfieldComponent = /** @class */ (function (_super) {
        __extends(ExtEmailfieldComponent, _super);
        function ExtEmailfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, emailfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtEmailfieldComponent_1 = ExtEmailfieldComponent;
        ExtEmailfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(emailfieldMetaData);
        };
        ExtEmailfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtEmailfieldComponent_1;
        ExtEmailfieldComponent = ExtEmailfieldComponent_1 = __decorate([
            core.Component({
                selector: 'emailfield',
                inputs: emailfieldMetaData.PROPERTIES,
                outputs: emailfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtEmailfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtEmailfieldComponent);
        return ExtEmailfieldComponent;
    }(base));

    var fieldMetaData = /** @class */ (function () {
        function fieldMetaData() {
        }
        fieldMetaData.XTYPE = 'field';
        fieldMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        fieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'field' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'field,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'field,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'field,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'field,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'field,event' },
            { name: 'focusenter', parameters: 'field,event' },
            { name: 'focusleave', parameters: 'field,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'field' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        fieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return fieldMetaData;
    }());
    var ExtFieldComponent = /** @class */ (function (_super) {
        __extends(ExtFieldComponent, _super);
        function ExtFieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, fieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtFieldComponent_1 = ExtFieldComponent;
        ExtFieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(fieldMetaData);
        };
        ExtFieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtFieldComponent_1;
        ExtFieldComponent = ExtFieldComponent_1 = __decorate([
            core.Component({
                selector: 'field',
                inputs: fieldMetaData.PROPERTIES,
                outputs: fieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtFieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtFieldComponent);
        return ExtFieldComponent;
    }(base));

    var groupcontainerMetaData = /** @class */ (function () {
        function groupcontainerMetaData() {
        }
        groupcontainerMetaData.XTYPE = 'groupcontainer';
        groupcontainerMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'autoSize',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'cls',
            'constrainAlign',
            'container',
            'contentEl',
            'controller',
            'data',
            'defaultFieldValue',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'delegate',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'fieldDefaults',
            'fieldsName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'layout',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'vertical',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        groupcontainerMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'groupcontainer' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'groupcontainer,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'groupcontainer,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'groupcontainer,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'groupcontainer,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'groupcontainer,event' },
            { name: 'focusenter', parameters: 'groupcontainer,event' },
            { name: 'focusleave', parameters: 'groupcontainer,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'groupcontainer' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        groupcontainerMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return groupcontainerMetaData;
    }());
    var ExtGroupcontainerComponent = /** @class */ (function (_super) {
        __extends(ExtGroupcontainerComponent, _super);
        function ExtGroupcontainerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, groupcontainerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtGroupcontainerComponent_1 = ExtGroupcontainerComponent;
        ExtGroupcontainerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(groupcontainerMetaData);
        };
        ExtGroupcontainerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtGroupcontainerComponent_1;
        ExtGroupcontainerComponent = ExtGroupcontainerComponent_1 = __decorate([
            core.Component({
                selector: 'groupcontainer',
                inputs: groupcontainerMetaData.PROPERTIES,
                outputs: groupcontainerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtGroupcontainerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtGroupcontainerComponent);
        return ExtGroupcontainerComponent;
    }(base));

    var filefieldMetaData = /** @class */ (function () {
        function filefieldMetaData() {
        }
        filefieldMetaData.XTYPE = 'filefield';
        filefieldMetaData.PROPERTIES = [
            'accept',
            'alignSelf',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'capture',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multiple',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        filefieldMetaData.EVENTS = [
            { name: 'action', parameters: 'filefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'filefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'filefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'filefield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'filefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'filefield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'filefield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'filefield,e' },
            { name: 'focusenter', parameters: 'filefield,event' },
            { name: 'focusleave', parameters: 'filefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'filefield,e' },
            { name: 'keyup', parameters: 'filefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'filefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'filefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'filefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        filefieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return filefieldMetaData;
    }());
    var ExtFilefieldComponent = /** @class */ (function (_super) {
        __extends(ExtFilefieldComponent, _super);
        function ExtFilefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, filefieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtFilefieldComponent_1 = ExtFilefieldComponent;
        ExtFilefieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(filefieldMetaData);
        };
        ExtFilefieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtFilefieldComponent_1;
        ExtFilefieldComponent = ExtFilefieldComponent_1 = __decorate([
            core.Component({
                selector: 'filefield',
                inputs: filefieldMetaData.PROPERTIES,
                outputs: filefieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtFilefieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtFilefieldComponent);
        return ExtFilefieldComponent;
    }(base));

    var filebuttonMetaData = /** @class */ (function () {
        function filebuttonMetaData() {
        }
        filebuttonMetaData.XTYPE = 'filebutton';
        filebuttonMetaData.PROPERTIES = [
            'accept',
            'alignSelf',
            'allowDepress',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'arrow',
            'arrowAlign',
            'autoEvent',
            'axisLock',
            'badgeText',
            'bind',
            'border',
            'bottom',
            'buttonType',
            'capture',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableToggle',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multiple',
            'name',
            'nameable',
            'padding',
            'plugins',
            'pressed',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchMenu',
            'style',
            'tabIndex',
            'text',
            'textAlign',
            'toFrontOnShow',
            'toggleHandler',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        filebuttonMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepressedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'filebutton' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'filebutton,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'filebutton,newValue,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'filebutton,event' },
            { name: 'focusenter', parameters: 'filebutton,event' },
            { name: 'focusleave', parameters: 'filebutton,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'pressedchange', parameters: 'sender,value,oldValue' },
            { name: 'release', parameters: 'filebutton,e' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'filebutton,e' },
            { name: 'tofront', parameters: 'filebutton' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        filebuttonMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforepressedchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'pressedchange',
            'release',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return filebuttonMetaData;
    }());
    var ExtFilebuttonComponent = /** @class */ (function (_super) {
        __extends(ExtFilebuttonComponent, _super);
        function ExtFilebuttonComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, filebuttonMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtFilebuttonComponent_1 = ExtFilebuttonComponent;
        ExtFilebuttonComponent.prototype.ngOnInit = function () {
            this.baseOnInit(filebuttonMetaData);
        };
        ExtFilebuttonComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtFilebuttonComponent_1;
        ExtFilebuttonComponent = ExtFilebuttonComponent_1 = __decorate([
            core.Component({
                selector: 'filebutton',
                inputs: filebuttonMetaData.PROPERTIES,
                outputs: filebuttonMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtFilebuttonComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtFilebuttonComponent);
        return ExtFilebuttonComponent;
    }(base));

    var hiddenfieldMetaData = /** @class */ (function () {
        function hiddenfieldMetaData() {
        }
        hiddenfieldMetaData.XTYPE = 'hiddenfield';
        hiddenfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        hiddenfieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'hiddenfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'hiddenfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'hiddenfield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'hiddenfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'hiddenfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'hiddenfield,event' },
            { name: 'focusenter', parameters: 'hiddenfield,event' },
            { name: 'focusleave', parameters: 'hiddenfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'hiddenfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        hiddenfieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return hiddenfieldMetaData;
    }());
    var ExtHiddenfieldComponent = /** @class */ (function (_super) {
        __extends(ExtHiddenfieldComponent, _super);
        function ExtHiddenfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, hiddenfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtHiddenfieldComponent_1 = ExtHiddenfieldComponent;
        ExtHiddenfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(hiddenfieldMetaData);
        };
        ExtHiddenfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtHiddenfieldComponent_1;
        ExtHiddenfieldComponent = ExtHiddenfieldComponent_1 = __decorate([
            core.Component({
                selector: 'hiddenfield',
                inputs: hiddenfieldMetaData.PROPERTIES,
                outputs: hiddenfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtHiddenfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtHiddenfieldComponent);
        return ExtHiddenfieldComponent;
    }(base));

    var inputfieldMetaData = /** @class */ (function () {
        function inputfieldMetaData() {
        }
        inputfieldMetaData.XTYPE = 'inputfield';
        inputfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        inputfieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'inputfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'inputfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'inputfield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'inputfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'inputfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'inputfield,event' },
            { name: 'focusenter', parameters: 'inputfield,event' },
            { name: 'focusleave', parameters: 'inputfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'inputfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        inputfieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return inputfieldMetaData;
    }());
    var ExtInputfieldComponent = /** @class */ (function (_super) {
        __extends(ExtInputfieldComponent, _super);
        function ExtInputfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, inputfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtInputfieldComponent_1 = ExtInputfieldComponent;
        ExtInputfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(inputfieldMetaData);
        };
        ExtInputfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtInputfieldComponent_1;
        ExtInputfieldComponent = ExtInputfieldComponent_1 = __decorate([
            core.Component({
                selector: 'inputfield',
                inputs: inputfieldMetaData.PROPERTIES,
                outputs: inputfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtInputfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtInputfieldComponent);
        return ExtInputfieldComponent;
    }(base));

    var numberfieldMetaData = /** @class */ (function () {
        function numberfieldMetaData() {
        }
        numberfieldMetaData.XTYPE = 'numberfield';
        numberfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'decimals',
            'decimalSeparator',
            'decimalsText',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxValue',
            'maxValueText',
            'maxWidth',
            'minHeight',
            'minValue',
            'minValueText',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'trim',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        numberfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'numberfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'numberfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'numberfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'numberfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'numberfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'numberfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'numberfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'numberfield,e' },
            { name: 'focusenter', parameters: 'numberfield,event' },
            { name: 'focusleave', parameters: 'numberfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'numberfield,e' },
            { name: 'keyup', parameters: 'numberfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'numberfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'numberfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'numberfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        numberfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return numberfieldMetaData;
    }());
    var ExtNumberfieldComponent = /** @class */ (function (_super) {
        __extends(ExtNumberfieldComponent, _super);
        function ExtNumberfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, numberfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtNumberfieldComponent_1 = ExtNumberfieldComponent;
        ExtNumberfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(numberfieldMetaData);
        };
        ExtNumberfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtNumberfieldComponent_1;
        ExtNumberfieldComponent = ExtNumberfieldComponent_1 = __decorate([
            core.Component({
                selector: 'numberfield',
                inputs: numberfieldMetaData.PROPERTIES,
                outputs: numberfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtNumberfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtNumberfieldComponent);
        return ExtNumberfieldComponent;
    }(base));

    var fieldpanelMetaData = /** @class */ (function () {
        function fieldpanelMetaData() {
        }
        fieldpanelMetaData.XTYPE = 'fieldpanel';
        fieldpanelMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'api',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'baseParams',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'bubbleDirty',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'fieldSeparators',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'inputBorders',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'paramOrder',
            'paramsAsHash',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'timeout',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        fieldpanelMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,fieldpanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'fieldpanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'fieldpanel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'fieldpanel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'fieldpanel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'fieldpanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'fieldpanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'fieldpanel' },
            { name: 'deactivate', parameters: 'oldActiveItem,fieldpanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'fieldpanel,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'fieldpanel' },
            { name: 'drawershow', parameters: 'fieldpanel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'fieldpanel,result' },
            { name: 'expand', parameters: 'fieldpanel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'fieldpanel,event' },
            { name: 'focusenter', parameters: 'fieldpanel,event' },
            { name: 'focusleave', parameters: 'fieldpanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'fieldpanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'fieldpanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'fieldpanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'fieldpanel,context' },
            { name: 'resizedragcancel', parameters: 'fieldpanel,context' },
            { name: 'resizedragend', parameters: 'fieldpanel,context' },
            { name: 'resizedragstart', parameters: 'fieldpanel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'fieldpanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        fieldpanelMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'exception',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return fieldpanelMetaData;
    }());
    var ExtFieldpanelComponent = /** @class */ (function (_super) {
        __extends(ExtFieldpanelComponent, _super);
        function ExtFieldpanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, fieldpanelMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtFieldpanelComponent_1 = ExtFieldpanelComponent;
        ExtFieldpanelComponent.prototype.ngOnInit = function () {
            this.baseOnInit(fieldpanelMetaData);
        };
        ExtFieldpanelComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtFieldpanelComponent_1;
        ExtFieldpanelComponent = ExtFieldpanelComponent_1 = __decorate([
            core.Component({
                selector: 'fieldpanel',
                inputs: fieldpanelMetaData.PROPERTIES,
                outputs: fieldpanelMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtFieldpanelComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtFieldpanelComponent);
        return ExtFieldpanelComponent;
    }(base));

    var passwordfieldMetaData = /** @class */ (function () {
        function passwordfieldMetaData() {
        }
        passwordfieldMetaData.XTYPE = 'passwordfield';
        passwordfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'revealable',
            'revealed',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        passwordfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'passwordfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'passwordfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'passwordfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'passwordfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'passwordfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'passwordfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'passwordfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'passwordfield,e' },
            { name: 'focusenter', parameters: 'passwordfield,event' },
            { name: 'focusleave', parameters: 'passwordfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'passwordfield,e' },
            { name: 'keyup', parameters: 'passwordfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'passwordfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'passwordfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'passwordfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        passwordfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return passwordfieldMetaData;
    }());
    var ExtPasswordfieldComponent = /** @class */ (function (_super) {
        __extends(ExtPasswordfieldComponent, _super);
        function ExtPasswordfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, passwordfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPasswordfieldComponent_1 = ExtPasswordfieldComponent;
        ExtPasswordfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(passwordfieldMetaData);
        };
        ExtPasswordfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPasswordfieldComponent_1;
        ExtPasswordfieldComponent = ExtPasswordfieldComponent_1 = __decorate([
            core.Component({
                selector: 'passwordfield',
                inputs: passwordfieldMetaData.PROPERTIES,
                outputs: passwordfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPasswordfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPasswordfieldComponent);
        return ExtPasswordfieldComponent;
    }(base));

    var pickerfieldMetaData = /** @class */ (function () {
        function pickerfieldMetaData() {
        }
        pickerfieldMetaData.XTYPE = 'pickerfield';
        pickerfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alignTarget',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pickerfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'pickerfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pickerfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pickerfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'pickerfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'pickerfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'pickerfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'pickerfield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pickerfield,e' },
            { name: 'focusenter', parameters: 'pickerfield,event' },
            { name: 'focusleave', parameters: 'pickerfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'pickerfield,e' },
            { name: 'keyup', parameters: 'pickerfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'pickerfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'pickerfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pickerfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pickerfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pickerfieldMetaData;
    }());
    var ExtPickerfieldComponent = /** @class */ (function (_super) {
        __extends(ExtPickerfieldComponent, _super);
        function ExtPickerfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pickerfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPickerfieldComponent_1 = ExtPickerfieldComponent;
        ExtPickerfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pickerfieldMetaData);
        };
        ExtPickerfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPickerfieldComponent_1;
        ExtPickerfieldComponent = ExtPickerfieldComponent_1 = __decorate([
            core.Component({
                selector: 'pickerfield',
                inputs: pickerfieldMetaData.PROPERTIES,
                outputs: pickerfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPickerfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPickerfieldComponent);
        return ExtPickerfieldComponent;
    }(base));

    var radioMetaData = /** @class */ (function () {
        function radioMetaData() {
        }
        radioMetaData.XTYPE = 'radio';
        radioMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'boxLabel',
            'boxLabelAlign',
            'bubbleDirty',
            'centered',
            'checked',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMaskTap',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        radioMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'radio' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'radio,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'radio,newValue,oldValue' },
            { name: 'check', parameters: 'radio' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'radio,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'radio,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'radio,event' },
            { name: 'focusenter', parameters: 'radio,event' },
            { name: 'focusleave', parameters: 'radio,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'radio' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'uncheck', parameters: 'radio' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        radioMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'check',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'uncheck',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return radioMetaData;
    }());
    var ExtRadioComponent = /** @class */ (function (_super) {
        __extends(ExtRadioComponent, _super);
        function ExtRadioComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, radioMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtRadioComponent_1 = ExtRadioComponent;
        ExtRadioComponent.prototype.ngOnInit = function () {
            this.baseOnInit(radioMetaData);
        };
        ExtRadioComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtRadioComponent_1;
        ExtRadioComponent = ExtRadioComponent_1 = __decorate([
            core.Component({
                selector: 'radio',
                inputs: radioMetaData.PROPERTIES,
                outputs: radioMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtRadioComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtRadioComponent);
        return ExtRadioComponent;
    }(base));

    var radiofieldMetaData = /** @class */ (function () {
        function radiofieldMetaData() {
        }
        radiofieldMetaData.XTYPE = 'radiofield';
        radiofieldMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'boxLabel',
            'boxLabelAlign',
            'bubbleDirty',
            'centered',
            'checked',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMaskTap',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        radiofieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'radio' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'radio,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'radio,newValue,oldValue' },
            { name: 'check', parameters: 'radio' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'radio,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'radio,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'radio,event' },
            { name: 'focusenter', parameters: 'radio,event' },
            { name: 'focusleave', parameters: 'radio,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'radio' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'uncheck', parameters: 'radio' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        radiofieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'check',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'uncheck',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return radiofieldMetaData;
    }());
    var ExtRadiofieldComponent = /** @class */ (function (_super) {
        __extends(ExtRadiofieldComponent, _super);
        function ExtRadiofieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, radiofieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtRadiofieldComponent_1 = ExtRadiofieldComponent;
        ExtRadiofieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(radiofieldMetaData);
        };
        ExtRadiofieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtRadiofieldComponent_1;
        ExtRadiofieldComponent = ExtRadiofieldComponent_1 = __decorate([
            core.Component({
                selector: 'radiofield',
                inputs: radiofieldMetaData.PROPERTIES,
                outputs: radiofieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtRadiofieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtRadiofieldComponent);
        return ExtRadiofieldComponent;
    }(base));

    var radiogroupMetaData = /** @class */ (function () {
        function radiogroupMetaData() {
        }
        radiogroupMetaData.XTYPE = 'radiogroup';
        radiogroupMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'autoSize',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'cls',
            'constrainAlign',
            'container',
            'contentEl',
            'controller',
            'data',
            'defaultFieldValue',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'delegate',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'fieldDefaults',
            'fieldsName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'layout',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'simpleValue',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'vertical',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        radiogroupMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'radiogroup' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'radiogroup,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'radiogroup,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'radiogroup,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'radiogroup,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'radiogroup,event' },
            { name: 'focusenter', parameters: 'radiogroup,event' },
            { name: 'focusleave', parameters: 'radiogroup,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'radiogroup' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        radiogroupMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return radiogroupMetaData;
    }());
    var ExtRadiogroupComponent = /** @class */ (function (_super) {
        __extends(ExtRadiogroupComponent, _super);
        function ExtRadiogroupComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, radiogroupMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtRadiogroupComponent_1 = ExtRadiogroupComponent;
        ExtRadiogroupComponent.prototype.ngOnInit = function () {
            this.baseOnInit(radiogroupMetaData);
        };
        ExtRadiogroupComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtRadiogroupComponent_1;
        ExtRadiogroupComponent = ExtRadiogroupComponent_1 = __decorate([
            core.Component({
                selector: 'radiogroup',
                inputs: radiogroupMetaData.PROPERTIES,
                outputs: radiogroupMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtRadiogroupComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtRadiogroupComponent);
        return ExtRadiogroupComponent;
    }(base));

    var searchfieldMetaData = /** @class */ (function () {
        function searchfieldMetaData() {
        }
        searchfieldMetaData.XTYPE = 'searchfield';
        searchfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        searchfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'searchfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'searchfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'searchfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'searchfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'searchfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'searchfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'searchfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'searchfield,e' },
            { name: 'focusenter', parameters: 'searchfield,event' },
            { name: 'focusleave', parameters: 'searchfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'searchfield,e' },
            { name: 'keyup', parameters: 'searchfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'searchfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'searchfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'searchfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        searchfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return searchfieldMetaData;
    }());
    var ExtSearchfieldComponent = /** @class */ (function (_super) {
        __extends(ExtSearchfieldComponent, _super);
        function ExtSearchfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, searchfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSearchfieldComponent_1 = ExtSearchfieldComponent;
        ExtSearchfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(searchfieldMetaData);
        };
        ExtSearchfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSearchfieldComponent_1;
        ExtSearchfieldComponent = ExtSearchfieldComponent_1 = __decorate([
            core.Component({
                selector: 'searchfield',
                inputs: searchfieldMetaData.PROPERTIES,
                outputs: searchfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSearchfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSearchfieldComponent);
        return ExtSearchfieldComponent;
    }(base));

    var selectfieldMetaData = /** @class */ (function () {
        function selectfieldMetaData() {
        }
        selectfieldMetaData.XTYPE = 'selectfield';
        selectfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alignTarget',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoFocus',
            'autoFocusLast',
            'autoHideInputMask',
            'autoLoadOnValue',
            'autoSelect',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'chipView',
            'clearable',
            'cls',
            'collapseOnSelect',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'delimiter',
            'dirty',
            'disabled',
            'displayed',
            'displayField',
            'displayTpl',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'forceSelection',
            'fullscreen',
            'height',
            'hidden',
            'hiddenName',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemCls',
            'itemId',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multiSelect',
            'name',
            'nameable',
            'options',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'recordCreator',
            'recordCreatorScope',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selection',
            'selectOnTab',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'valueCollection',
            'valueField',
            'valueNotFoundText',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        selectfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'selectfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'selectfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'selectfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'selectfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'selectfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'selectfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'selectfield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'selectfield,e' },
            { name: 'focusenter', parameters: 'selectfield,event' },
            { name: 'focusleave', parameters: 'selectfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'selectfield,e' },
            { name: 'keyup', parameters: 'selectfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'selectfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'selectfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'selectfield,newValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'selectfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        selectfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return selectfieldMetaData;
    }());
    var ExtSelectfieldComponent = /** @class */ (function (_super) {
        __extends(ExtSelectfieldComponent, _super);
        function ExtSelectfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, selectfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSelectfieldComponent_1 = ExtSelectfieldComponent;
        ExtSelectfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(selectfieldMetaData);
        };
        ExtSelectfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSelectfieldComponent_1;
        ExtSelectfieldComponent = ExtSelectfieldComponent_1 = __decorate([
            core.Component({
                selector: 'selectfield',
                inputs: selectfieldMetaData.PROPERTIES,
                outputs: selectfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSelectfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSelectfieldComponent);
        return ExtSelectfieldComponent;
    }(base));

    var singlesliderfieldMetaData = /** @class */ (function () {
        function singlesliderfieldMetaData() {
        }
        singlesliderfieldMetaData.XTYPE = 'singlesliderfield';
        singlesliderfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'boxLabel',
            'boxLabelAlign',
            'bubbleDirty',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'increment',
            'inline',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'liveUpdate',
            'margin',
            'maxHeight',
            'maxValue',
            'maxWidth',
            'minHeight',
            'minValue',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'slider',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        singlesliderfieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'singlesliderfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'singlesliderfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'me,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'singlesliderfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drag', parameters: 'singlesliderfield,sl,thumb,e' },
            { name: 'dragchange', parameters: 'me,sl,newValue,oldValue' },
            { name: 'dragend', parameters: 'singlesliderfield,sl,thumb,value,e' },
            { name: 'dragstart', parameters: 'singlesliderfield,sl,thumb,value,e' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'singlesliderfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'singlesliderfield,event' },
            { name: 'focusenter', parameters: 'singlesliderfield,event' },
            { name: 'focusleave', parameters: 'singlesliderfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'singlesliderfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        singlesliderfieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'drag',
            'dragchange',
            'dragend',
            'dragstart',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return singlesliderfieldMetaData;
    }());
    var ExtSinglesliderfieldComponent = /** @class */ (function (_super) {
        __extends(ExtSinglesliderfieldComponent, _super);
        function ExtSinglesliderfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, singlesliderfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSinglesliderfieldComponent_1 = ExtSinglesliderfieldComponent;
        ExtSinglesliderfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(singlesliderfieldMetaData);
        };
        ExtSinglesliderfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSinglesliderfieldComponent_1;
        ExtSinglesliderfieldComponent = ExtSinglesliderfieldComponent_1 = __decorate([
            core.Component({
                selector: 'singlesliderfield',
                inputs: singlesliderfieldMetaData.PROPERTIES,
                outputs: singlesliderfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSinglesliderfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSinglesliderfieldComponent);
        return ExtSinglesliderfieldComponent;
    }(base));

    var sliderfieldMetaData = /** @class */ (function () {
        function sliderfieldMetaData() {
        }
        sliderfieldMetaData.XTYPE = 'sliderfield';
        sliderfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'boxLabel',
            'boxLabelAlign',
            'bubbleDirty',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'increment',
            'inline',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'liveUpdate',
            'margin',
            'maxHeight',
            'maxValue',
            'maxWidth',
            'minHeight',
            'minValue',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'slider',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sliderfieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sliderfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sliderfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'me,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'sliderfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drag', parameters: 'sliderfield,sl,thumb,e' },
            { name: 'dragchange', parameters: 'me,sl,thumb,newValue,oldValue' },
            { name: 'dragend', parameters: 'sliderfield,sl,thumb,value,e' },
            { name: 'dragstart', parameters: 'sliderfield,sl,thumb,value,e' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'sliderfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sliderfield,event' },
            { name: 'focusenter', parameters: 'sliderfield,event' },
            { name: 'focusleave', parameters: 'sliderfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sliderfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sliderfieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'drag',
            'dragchange',
            'dragend',
            'dragstart',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sliderfieldMetaData;
    }());
    var ExtSliderfieldComponent = /** @class */ (function (_super) {
        __extends(ExtSliderfieldComponent, _super);
        function ExtSliderfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sliderfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSliderfieldComponent_1 = ExtSliderfieldComponent;
        ExtSliderfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(sliderfieldMetaData);
        };
        ExtSliderfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSliderfieldComponent_1;
        ExtSliderfieldComponent = ExtSliderfieldComponent_1 = __decorate([
            core.Component({
                selector: 'sliderfield',
                inputs: sliderfieldMetaData.PROPERTIES,
                outputs: sliderfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSliderfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSliderfieldComponent);
        return ExtSliderfieldComponent;
    }(base));

    var spinnerfieldMetaData = /** @class */ (function () {
        function spinnerfieldMetaData() {
        }
        spinnerfieldMetaData.XTYPE = 'spinnerfield';
        spinnerfieldMetaData.PROPERTIES = [
            'accelerateOnTapHold',
            'alignSelf',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'cycle',
            'data',
            'decimals',
            'decimalSeparator',
            'decimalsText',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxValue',
            'maxValueText',
            'maxWidth',
            'minHeight',
            'minValue',
            'minValueText',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stepValue',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'trim',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        spinnerfieldMetaData.EVENTS = [
            { name: 'action', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'spinnerfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'spinnerfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'spinnerfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'spinnerfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'spinnerfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'spinnerfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'spinnerfield,e' },
            { name: 'focusenter', parameters: 'spinnerfield,event' },
            { name: 'focusleave', parameters: 'spinnerfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'spinnerfield,e' },
            { name: 'keyup', parameters: 'spinnerfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'spinnerfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'spinnerfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spin', parameters: 'spinnerfield,value,direction' },
            { name: 'spindown', parameters: 'spinnerfield,value' },
            { name: 'spinup', parameters: 'spinnerfield,value' },
            { name: 'tofront', parameters: 'spinnerfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: '' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        spinnerfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'spin',
            'spindown',
            'spinup',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return spinnerfieldMetaData;
    }());
    var ExtSpinnerfieldComponent = /** @class */ (function (_super) {
        __extends(ExtSpinnerfieldComponent, _super);
        function ExtSpinnerfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, spinnerfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSpinnerfieldComponent_1 = ExtSpinnerfieldComponent;
        ExtSpinnerfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(spinnerfieldMetaData);
        };
        ExtSpinnerfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSpinnerfieldComponent_1;
        ExtSpinnerfieldComponent = ExtSpinnerfieldComponent_1 = __decorate([
            core.Component({
                selector: 'spinnerfield',
                inputs: spinnerfieldMetaData.PROPERTIES,
                outputs: spinnerfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSpinnerfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSpinnerfieldComponent);
        return ExtSpinnerfieldComponent;
    }(base));

    var textfieldMetaData = /** @class */ (function () {
        function textfieldMetaData() {
        }
        textfieldMetaData.XTYPE = 'textfield';
        textfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        textfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'textfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'textfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'textfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'textfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'textfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'textfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'textfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'textfield,e' },
            { name: 'focusenter', parameters: 'textfield,event' },
            { name: 'focusleave', parameters: 'textfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'textfield,e' },
            { name: 'keyup', parameters: 'textfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'textfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'textfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'textfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        textfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return textfieldMetaData;
    }());
    var ExtTextfieldComponent = /** @class */ (function (_super) {
        __extends(ExtTextfieldComponent, _super);
        function ExtTextfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, textfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTextfieldComponent_1 = ExtTextfieldComponent;
        ExtTextfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(textfieldMetaData);
        };
        ExtTextfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTextfieldComponent_1;
        ExtTextfieldComponent = ExtTextfieldComponent_1 = __decorate([
            core.Component({
                selector: 'textfield',
                inputs: textfieldMetaData.PROPERTIES,
                outputs: textfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTextfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTextfieldComponent);
        return ExtTextfieldComponent;
    }(base));

    var textareafieldMetaData = /** @class */ (function () {
        function textareafieldMetaData() {
        }
        textareafieldMetaData.XTYPE = 'textareafield';
        textareafieldMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxRows',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        textareafieldMetaData.EVENTS = [
            { name: 'action', parameters: 'textareafield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'textareafield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'textareafield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'textareafield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'textareafield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'textareafield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'textareafield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'textareafield,e' },
            { name: 'focusenter', parameters: 'textareafield,event' },
            { name: 'focusleave', parameters: 'textareafield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'textareafield,e' },
            { name: 'keyup', parameters: 'textareafield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'textareafield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'textareafield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'textareafield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        textareafieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return textareafieldMetaData;
    }());
    var ExtTextareafieldComponent = /** @class */ (function (_super) {
        __extends(ExtTextareafieldComponent, _super);
        function ExtTextareafieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, textareafieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTextareafieldComponent_1 = ExtTextareafieldComponent;
        ExtTextareafieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(textareafieldMetaData);
        };
        ExtTextareafieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTextareafieldComponent_1;
        ExtTextareafieldComponent = ExtTextareafieldComponent_1 = __decorate([
            core.Component({
                selector: 'textareafield',
                inputs: textareafieldMetaData.PROPERTIES,
                outputs: textareafieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTextareafieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTextareafieldComponent);
        return ExtTextareafieldComponent;
    }(base));

    var timefieldMetaData = /** @class */ (function () {
        function timefieldMetaData() {
        }
        timefieldMetaData.XTYPE = 'timefield';
        timefieldMetaData.PROPERTIES = [
            'alignSelf',
            'alignTarget',
            'altFormats',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'format',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        timefieldMetaData.EVENTS = [
            { name: 'action', parameters: 'timefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'timefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'timefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'timefield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'timefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'timefield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'timefield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'timefield,e' },
            { name: 'focusenter', parameters: 'timefield,event' },
            { name: 'focusleave', parameters: 'timefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'timefield,e' },
            { name: 'keyup', parameters: 'timefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'timefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'timefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'timefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        timefieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return timefieldMetaData;
    }());
    var ExtTimefieldComponent = /** @class */ (function (_super) {
        __extends(ExtTimefieldComponent, _super);
        function ExtTimefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, timefieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTimefieldComponent_1 = ExtTimefieldComponent;
        ExtTimefieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(timefieldMetaData);
        };
        ExtTimefieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTimefieldComponent_1;
        ExtTimefieldComponent = ExtTimefieldComponent_1 = __decorate([
            core.Component({
                selector: 'timefield',
                inputs: timefieldMetaData.PROPERTIES,
                outputs: timefieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTimefieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTimefieldComponent);
        return ExtTimefieldComponent;
    }(base));

    var togglefieldMetaData = /** @class */ (function () {
        function togglefieldMetaData() {
        }
        togglefieldMetaData.XTYPE = 'togglefield';
        togglefieldMetaData.PROPERTIES = [
            'activeLabel',
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'boxLabel',
            'boxLabelAlign',
            'bubbleDirty',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveLabel',
            'increment',
            'inline',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'liveUpdate',
            'margin',
            'maxHeight',
            'maxValue',
            'maxWidth',
            'minHeight',
            'minValue',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'slider',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        togglefieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'togglefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'togglefield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'togglefield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'togglefield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drag', parameters: '' },
            { name: 'dragchange', parameters: 'me,sl,newValue,oldValue' },
            { name: 'dragend', parameters: '' },
            { name: 'dragstart', parameters: '' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'togglefield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'togglefield,event' },
            { name: 'focusenter', parameters: 'togglefield,event' },
            { name: 'focusleave', parameters: 'togglefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'togglefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        togglefieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'drag',
            'dragchange',
            'dragend',
            'dragstart',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return togglefieldMetaData;
    }());
    var ExtTogglefieldComponent = /** @class */ (function (_super) {
        __extends(ExtTogglefieldComponent, _super);
        function ExtTogglefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, togglefieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTogglefieldComponent_1 = ExtTogglefieldComponent;
        ExtTogglefieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(togglefieldMetaData);
        };
        ExtTogglefieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTogglefieldComponent_1;
        ExtTogglefieldComponent = ExtTogglefieldComponent_1 = __decorate([
            core.Component({
                selector: 'togglefield',
                inputs: togglefieldMetaData.PROPERTIES,
                outputs: togglefieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTogglefieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTogglefieldComponent);
        return ExtTogglefieldComponent;
    }(base));

    var cleartriggerMetaData = /** @class */ (function () {
        function cleartriggerMetaData() {
        }
        cleartriggerMetaData.XTYPE = 'cleartrigger';
        cleartriggerMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        cleartriggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'cleartrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'cleartrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'cleartrigger,event' },
            { name: 'focusenter', parameters: 'cleartrigger,event' },
            { name: 'focusleave', parameters: 'cleartrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'cleartrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        cleartriggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return cleartriggerMetaData;
    }());
    var ExtCleartriggerComponent = /** @class */ (function (_super) {
        __extends(ExtCleartriggerComponent, _super);
        function ExtCleartriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, cleartriggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCleartriggerComponent_1 = ExtCleartriggerComponent;
        ExtCleartriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(cleartriggerMetaData);
        };
        ExtCleartriggerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCleartriggerComponent_1;
        ExtCleartriggerComponent = ExtCleartriggerComponent_1 = __decorate([
            core.Component({
                selector: 'cleartrigger',
                inputs: cleartriggerMetaData.PROPERTIES,
                outputs: cleartriggerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCleartriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCleartriggerComponent);
        return ExtCleartriggerComponent;
    }(base));

    var datetriggerMetaData = /** @class */ (function () {
        function datetriggerMetaData() {
        }
        datetriggerMetaData.XTYPE = 'datetrigger';
        datetriggerMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datetriggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'datetrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datetrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'datetrigger,event' },
            { name: 'focusenter', parameters: 'datetrigger,event' },
            { name: 'focusleave', parameters: 'datetrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'datetrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datetriggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return datetriggerMetaData;
    }());
    var ExtDatetriggerComponent = /** @class */ (function (_super) {
        __extends(ExtDatetriggerComponent, _super);
        function ExtDatetriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datetriggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtDatetriggerComponent_1 = ExtDatetriggerComponent;
        ExtDatetriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(datetriggerMetaData);
        };
        ExtDatetriggerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtDatetriggerComponent_1;
        ExtDatetriggerComponent = ExtDatetriggerComponent_1 = __decorate([
            core.Component({
                selector: 'datetrigger',
                inputs: datetriggerMetaData.PROPERTIES,
                outputs: datetriggerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtDatetriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtDatetriggerComponent);
        return ExtDatetriggerComponent;
    }(base));

    var expandtriggerMetaData = /** @class */ (function () {
        function expandtriggerMetaData() {
        }
        expandtriggerMetaData.XTYPE = 'expandtrigger';
        expandtriggerMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        expandtriggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'expandtrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'expandtrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'expandtrigger,event' },
            { name: 'focusenter', parameters: 'expandtrigger,event' },
            { name: 'focusleave', parameters: 'expandtrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'expandtrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        expandtriggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return expandtriggerMetaData;
    }());
    var ExtExpandtriggerComponent = /** @class */ (function (_super) {
        __extends(ExtExpandtriggerComponent, _super);
        function ExtExpandtriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, expandtriggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtExpandtriggerComponent_1 = ExtExpandtriggerComponent;
        ExtExpandtriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(expandtriggerMetaData);
        };
        ExtExpandtriggerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtExpandtriggerComponent_1;
        ExtExpandtriggerComponent = ExtExpandtriggerComponent_1 = __decorate([
            core.Component({
                selector: 'expandtrigger',
                inputs: expandtriggerMetaData.PROPERTIES,
                outputs: expandtriggerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtExpandtriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtExpandtriggerComponent);
        return ExtExpandtriggerComponent;
    }(base));

    var menutriggerMetaData = /** @class */ (function () {
        function menutriggerMetaData() {
        }
        menutriggerMetaData.XTYPE = 'menutrigger';
        menutriggerMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'menu',
            'menuAlign',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        menutriggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'menutrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menutrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'menutrigger,event' },
            { name: 'focusenter', parameters: 'menutrigger,event' },
            { name: 'focusleave', parameters: 'menutrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'menutrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        menutriggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return menutriggerMetaData;
    }());
    var ExtMenutriggerComponent = /** @class */ (function (_super) {
        __extends(ExtMenutriggerComponent, _super);
        function ExtMenutriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, menutriggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtMenutriggerComponent_1 = ExtMenutriggerComponent;
        ExtMenutriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(menutriggerMetaData);
        };
        ExtMenutriggerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtMenutriggerComponent_1;
        ExtMenutriggerComponent = ExtMenutriggerComponent_1 = __decorate([
            core.Component({
                selector: 'menutrigger',
                inputs: menutriggerMetaData.PROPERTIES,
                outputs: menutriggerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtMenutriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtMenutriggerComponent);
        return ExtMenutriggerComponent;
    }(base));

    var revealtriggerMetaData = /** @class */ (function () {
        function revealtriggerMetaData() {
        }
        revealtriggerMetaData.XTYPE = 'revealtrigger';
        revealtriggerMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        revealtriggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'revealtrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'revealtrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'revealtrigger,event' },
            { name: 'focusenter', parameters: 'revealtrigger,event' },
            { name: 'focusleave', parameters: 'revealtrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'revealtrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        revealtriggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return revealtriggerMetaData;
    }());
    var ExtRevealtriggerComponent = /** @class */ (function (_super) {
        __extends(ExtRevealtriggerComponent, _super);
        function ExtRevealtriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, revealtriggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtRevealtriggerComponent_1 = ExtRevealtriggerComponent;
        ExtRevealtriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(revealtriggerMetaData);
        };
        ExtRevealtriggerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtRevealtriggerComponent_1;
        ExtRevealtriggerComponent = ExtRevealtriggerComponent_1 = __decorate([
            core.Component({
                selector: 'revealtrigger',
                inputs: revealtriggerMetaData.PROPERTIES,
                outputs: revealtriggerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtRevealtriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtRevealtriggerComponent);
        return ExtRevealtriggerComponent;
    }(base));

    var spindowntriggerMetaData = /** @class */ (function () {
        function spindowntriggerMetaData() {
        }
        spindowntriggerMetaData.XTYPE = 'spindowntrigger';
        spindowntriggerMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        spindowntriggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'spindowntrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'spindowntrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'spindowntrigger,event' },
            { name: 'focusenter', parameters: 'spindowntrigger,event' },
            { name: 'focusleave', parameters: 'spindowntrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'spindowntrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        spindowntriggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return spindowntriggerMetaData;
    }());
    var ExtSpindowntriggerComponent = /** @class */ (function (_super) {
        __extends(ExtSpindowntriggerComponent, _super);
        function ExtSpindowntriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, spindowntriggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSpindowntriggerComponent_1 = ExtSpindowntriggerComponent;
        ExtSpindowntriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(spindowntriggerMetaData);
        };
        ExtSpindowntriggerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSpindowntriggerComponent_1;
        ExtSpindowntriggerComponent = ExtSpindowntriggerComponent_1 = __decorate([
            core.Component({
                selector: 'spindowntrigger',
                inputs: spindowntriggerMetaData.PROPERTIES,
                outputs: spindowntriggerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSpindowntriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSpindowntriggerComponent);
        return ExtSpindowntriggerComponent;
    }(base));

    var spinuptriggerMetaData = /** @class */ (function () {
        function spinuptriggerMetaData() {
        }
        spinuptriggerMetaData.XTYPE = 'spinuptrigger';
        spinuptriggerMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        spinuptriggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'spinuptrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'spinuptrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'spinuptrigger,event' },
            { name: 'focusenter', parameters: 'spinuptrigger,event' },
            { name: 'focusleave', parameters: 'spinuptrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'spinuptrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        spinuptriggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return spinuptriggerMetaData;
    }());
    var ExtSpinuptriggerComponent = /** @class */ (function (_super) {
        __extends(ExtSpinuptriggerComponent, _super);
        function ExtSpinuptriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, spinuptriggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSpinuptriggerComponent_1 = ExtSpinuptriggerComponent;
        ExtSpinuptriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(spinuptriggerMetaData);
        };
        ExtSpinuptriggerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSpinuptriggerComponent_1;
        ExtSpinuptriggerComponent = ExtSpinuptriggerComponent_1 = __decorate([
            core.Component({
                selector: 'spinuptrigger',
                inputs: spinuptriggerMetaData.PROPERTIES,
                outputs: spinuptriggerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSpinuptriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSpinuptriggerComponent);
        return ExtSpinuptriggerComponent;
    }(base));

    var timetriggerMetaData = /** @class */ (function () {
        function timetriggerMetaData() {
        }
        timetriggerMetaData.XTYPE = 'timetrigger';
        timetriggerMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        timetriggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'timetrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'timetrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'timetrigger,event' },
            { name: 'focusenter', parameters: 'timetrigger,event' },
            { name: 'focusleave', parameters: 'timetrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'timetrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        timetriggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return timetriggerMetaData;
    }());
    var ExtTimetriggerComponent = /** @class */ (function (_super) {
        __extends(ExtTimetriggerComponent, _super);
        function ExtTimetriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, timetriggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTimetriggerComponent_1 = ExtTimetriggerComponent;
        ExtTimetriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(timetriggerMetaData);
        };
        ExtTimetriggerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTimetriggerComponent_1;
        ExtTimetriggerComponent = ExtTimetriggerComponent_1 = __decorate([
            core.Component({
                selector: 'timetrigger',
                inputs: timetriggerMetaData.PROPERTIES,
                outputs: timetriggerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTimetriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTimetriggerComponent);
        return ExtTimetriggerComponent;
    }(base));

    var triggerMetaData = /** @class */ (function () {
        function triggerMetaData() {
        }
        triggerMetaData.XTYPE = 'trigger';
        triggerMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        triggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'trigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'trigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'trigger,event' },
            { name: 'focusenter', parameters: 'trigger,event' },
            { name: 'focusleave', parameters: 'trigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'trigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        triggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return triggerMetaData;
    }());
    var ExtTriggerComponent = /** @class */ (function (_super) {
        __extends(ExtTriggerComponent, _super);
        function ExtTriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, triggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTriggerComponent_1 = ExtTriggerComponent;
        ExtTriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(triggerMetaData);
        };
        ExtTriggerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTriggerComponent_1;
        ExtTriggerComponent = ExtTriggerComponent_1 = __decorate([
            core.Component({
                selector: 'trigger',
                inputs: triggerMetaData.PROPERTIES,
                outputs: triggerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTriggerComponent);
        return ExtTriggerComponent;
    }(base));

    var urlfieldMetaData = /** @class */ (function () {
        function urlfieldMetaData() {
        }
        urlfieldMetaData.XTYPE = 'urlfield';
        urlfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        urlfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'urlfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'urlfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'urlfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'urlfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'urlfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'urlfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'urlfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'urlfield,e' },
            { name: 'focusenter', parameters: 'urlfield,event' },
            { name: 'focusleave', parameters: 'urlfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'urlfield,e' },
            { name: 'keyup', parameters: 'urlfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'urlfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'urlfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'urlfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        urlfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return urlfieldMetaData;
    }());
    var ExtUrlfieldComponent = /** @class */ (function (_super) {
        __extends(ExtUrlfieldComponent, _super);
        function ExtUrlfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, urlfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtUrlfieldComponent_1 = ExtUrlfieldComponent;
        ExtUrlfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(urlfieldMetaData);
        };
        ExtUrlfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtUrlfieldComponent_1;
        ExtUrlfieldComponent = ExtUrlfieldComponent_1 = __decorate([
            core.Component({
                selector: 'urlfield',
                inputs: urlfieldMetaData.PROPERTIES,
                outputs: urlfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtUrlfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtUrlfieldComponent);
        return ExtUrlfieldComponent;
    }(base));

    var fieldsetMetaData = /** @class */ (function () {
        function fieldsetMetaData() {
        }
        fieldsetMetaData.XTYPE = 'fieldset';
        fieldsetMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'fieldDefaults',
            'fieldSeparators',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'inputBorders',
            'instanceCls',
            'instructions',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'title',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        fieldsetMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,fieldset,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'fieldset,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'fieldset' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'fieldset,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,fieldset,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'fieldset,event' },
            { name: 'focusenter', parameters: 'fieldset,event' },
            { name: 'focusleave', parameters: 'fieldset,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'fieldset,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'fieldset,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'fieldset,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'fieldset' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        fieldsetMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return fieldsetMetaData;
    }());
    var ExtFieldsetComponent = /** @class */ (function (_super) {
        __extends(ExtFieldsetComponent, _super);
        function ExtFieldsetComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, fieldsetMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtFieldsetComponent_1 = ExtFieldsetComponent;
        ExtFieldsetComponent.prototype.ngOnInit = function () {
            this.baseOnInit(fieldsetMetaData);
        };
        ExtFieldsetComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtFieldsetComponent_1;
        ExtFieldsetComponent = ExtFieldsetComponent_1 = __decorate([
            core.Component({
                selector: 'fieldset',
                inputs: fieldsetMetaData.PROPERTIES,
                outputs: fieldsetMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtFieldsetComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtFieldsetComponent);
        return ExtFieldsetComponent;
    }(base));

    var formpanelMetaData = /** @class */ (function () {
        function formpanelMetaData() {
        }
        formpanelMetaData.XTYPE = 'formpanel';
        formpanelMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'api',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'baseParams',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'bubbleDirty',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableSubmissionForm',
            'enctype',
            'fieldDefaults',
            'fieldSeparators',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'inputBorders',
            'instanceCls',
            'itemId',
            'items',
            'jsonSubmit',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'method',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multipartDetection',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'paramOrder',
            'paramsAsHash',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'standardSubmit',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submitOnAction',
            'tabIndex',
            'tbar',
            'timeout',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackResetOnLoad',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        formpanelMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,formpanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'formpanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'formpanel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'formpanel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'formpanel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'formpanel,values,options,e' },
            { name: 'beforetofront', parameters: 'formpanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'formpanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'formpanel' },
            { name: 'deactivate', parameters: 'oldActiveItem,formpanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'formpanel,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'formpanel' },
            { name: 'drawershow', parameters: 'formpanel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'formpanel,result' },
            { name: 'expand', parameters: 'formpanel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'formpanel,event' },
            { name: 'focusenter', parameters: 'formpanel,event' },
            { name: 'focusleave', parameters: 'formpanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'formpanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'formpanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'formpanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'formpanel,context' },
            { name: 'resizedragcancel', parameters: 'formpanel,context' },
            { name: 'resizedragend', parameters: 'formpanel,context' },
            { name: 'resizedragstart', parameters: 'formpanel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'formpanel,result,e' },
            { name: 'tofront', parameters: 'formpanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        formpanelMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforesubmit',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'exception',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'submit',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return formpanelMetaData;
    }());
    var ExtFormpanelComponent = /** @class */ (function (_super) {
        __extends(ExtFormpanelComponent, _super);
        function ExtFormpanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, formpanelMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtFormpanelComponent_1 = ExtFormpanelComponent;
        ExtFormpanelComponent.prototype.ngOnInit = function () {
            this.baseOnInit(formpanelMetaData);
        };
        ExtFormpanelComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtFormpanelComponent_1;
        ExtFormpanelComponent = ExtFormpanelComponent_1 = __decorate([
            core.Component({
                selector: 'formpanel',
                inputs: formpanelMetaData.PROPERTIES,
                outputs: formpanelMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtFormpanelComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtFormpanelComponent);
        return ExtFormpanelComponent;
    }(base));

    var gridcellbaseMetaData = /** @class */ (function () {
        function gridcellbaseMetaData() {
        }
        gridcellbaseMetaData.XTYPE = 'gridcellbase';
        gridcellbaseMetaData.PROPERTIES = [
            'align',
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'flex',
            'floated',
            'focusCls',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selectable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridcellbaseMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'gridcellbase' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcellbase,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'gridcellbase,event' },
            { name: 'focusenter', parameters: 'gridcellbase,event' },
            { name: 'focusleave', parameters: 'gridcellbase,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'gridcellbase' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridcellbaseMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return gridcellbaseMetaData;
    }());
    var ExtGridcellbaseComponent = /** @class */ (function (_super) {
        __extends(ExtGridcellbaseComponent, _super);
        function ExtGridcellbaseComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridcellbaseMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtGridcellbaseComponent_1 = ExtGridcellbaseComponent;
        ExtGridcellbaseComponent.prototype.ngOnInit = function () {
            this.baseOnInit(gridcellbaseMetaData);
        };
        ExtGridcellbaseComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtGridcellbaseComponent_1;
        ExtGridcellbaseComponent = ExtGridcellbaseComponent_1 = __decorate([
            core.Component({
                selector: 'gridcellbase',
                inputs: gridcellbaseMetaData.PROPERTIES,
                outputs: gridcellbaseMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtGridcellbaseComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtGridcellbaseComponent);
        return ExtGridcellbaseComponent;
    }(base));

    var booleancellMetaData = /** @class */ (function () {
        function booleancellMetaData() {
        }
        booleancellMetaData.XTYPE = 'booleancell';
        booleancellMetaData.PROPERTIES = [
            'align',
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'falseText',
            'flex',
            'floated',
            'focusCls',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selectable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'translatable',
            'trueText',
            'twoWayBindable',
            'ui',
            'undefinedText',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        booleancellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'booleancell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'booleancell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'booleancell,event' },
            { name: 'focusenter', parameters: 'booleancell,event' },
            { name: 'focusleave', parameters: 'booleancell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'booleancell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        booleancellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return booleancellMetaData;
    }());
    var ExtBooleancellComponent = /** @class */ (function (_super) {
        __extends(ExtBooleancellComponent, _super);
        function ExtBooleancellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, booleancellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtBooleancellComponent_1 = ExtBooleancellComponent;
        ExtBooleancellComponent.prototype.ngOnInit = function () {
            this.baseOnInit(booleancellMetaData);
        };
        ExtBooleancellComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtBooleancellComponent_1;
        ExtBooleancellComponent = ExtBooleancellComponent_1 = __decorate([
            core.Component({
                selector: 'booleancell',
                inputs: booleancellMetaData.PROPERTIES,
                outputs: booleancellMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtBooleancellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtBooleancellComponent);
        return ExtBooleancellComponent;
    }(base));

    var gridcellMetaData = /** @class */ (function () {
        function gridcellMetaData() {
        }
        gridcellMetaData.XTYPE = 'gridcell';
        gridcellMetaData.PROPERTIES = [
            'align',
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'flex',
            'floated',
            'focusCls',
            'formatter',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderer',
            'renderTo',
            'ripple',
            'scope',
            'selectable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'tpl',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridcellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'gridcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'gridcell,event' },
            { name: 'focusenter', parameters: 'gridcell,event' },
            { name: 'focusleave', parameters: 'gridcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'gridcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridcellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return gridcellMetaData;
    }());
    var ExtGridcellComponent = /** @class */ (function (_super) {
        __extends(ExtGridcellComponent, _super);
        function ExtGridcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridcellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtGridcellComponent_1 = ExtGridcellComponent;
        ExtGridcellComponent.prototype.ngOnInit = function () {
            this.baseOnInit(gridcellMetaData);
        };
        ExtGridcellComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtGridcellComponent_1;
        ExtGridcellComponent = ExtGridcellComponent_1 = __decorate([
            core.Component({
                selector: 'gridcell',
                inputs: gridcellMetaData.PROPERTIES,
                outputs: gridcellMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtGridcellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtGridcellComponent);
        return ExtGridcellComponent;
    }(base));

    var checkcellMetaData = /** @class */ (function () {
        function checkcellMetaData() {
        }
        checkcellMetaData.XTYPE = 'checkcell';
        checkcellMetaData.PROPERTIES = [
            'align',
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'flex',
            'floated',
            'focusCls',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selectable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        checkcellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'checkcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'checkcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'checkcell,event' },
            { name: 'focusenter', parameters: 'checkcell,event' },
            { name: 'focusleave', parameters: 'checkcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'checkcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        checkcellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return checkcellMetaData;
    }());
    var ExtCheckcellComponent = /** @class */ (function (_super) {
        __extends(ExtCheckcellComponent, _super);
        function ExtCheckcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, checkcellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCheckcellComponent_1 = ExtCheckcellComponent;
        ExtCheckcellComponent.prototype.ngOnInit = function () {
            this.baseOnInit(checkcellMetaData);
        };
        ExtCheckcellComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCheckcellComponent_1;
        ExtCheckcellComponent = ExtCheckcellComponent_1 = __decorate([
            core.Component({
                selector: 'checkcell',
                inputs: checkcellMetaData.PROPERTIES,
                outputs: checkcellMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCheckcellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCheckcellComponent);
        return ExtCheckcellComponent;
    }(base));

    var datecellMetaData = /** @class */ (function () {
        function datecellMetaData() {
        }
        datecellMetaData.XTYPE = 'datecell';
        datecellMetaData.PROPERTIES = [
            'align',
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'flex',
            'floated',
            'focusCls',
            'format',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selectable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datecellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'datecell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datecell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'datecell,event' },
            { name: 'focusenter', parameters: 'datecell,event' },
            { name: 'focusleave', parameters: 'datecell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'datecell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datecellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return datecellMetaData;
    }());
    var ExtDatecellComponent = /** @class */ (function (_super) {
        __extends(ExtDatecellComponent, _super);
        function ExtDatecellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datecellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtDatecellComponent_1 = ExtDatecellComponent;
        ExtDatecellComponent.prototype.ngOnInit = function () {
            this.baseOnInit(datecellMetaData);
        };
        ExtDatecellComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtDatecellComponent_1;
        ExtDatecellComponent = ExtDatecellComponent_1 = __decorate([
            core.Component({
                selector: 'datecell',
                inputs: datecellMetaData.PROPERTIES,
                outputs: datecellMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtDatecellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtDatecellComponent);
        return ExtDatecellComponent;
    }(base));

    var numbercellMetaData = /** @class */ (function () {
        function numbercellMetaData() {
        }
        numbercellMetaData.XTYPE = 'numbercell';
        numbercellMetaData.PROPERTIES = [
            'align',
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'flex',
            'floated',
            'focusCls',
            'format',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selectable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        numbercellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'numbercell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'numbercell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'numbercell,event' },
            { name: 'focusenter', parameters: 'numbercell,event' },
            { name: 'focusleave', parameters: 'numbercell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'numbercell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        numbercellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return numbercellMetaData;
    }());
    var ExtNumbercellComponent = /** @class */ (function (_super) {
        __extends(ExtNumbercellComponent, _super);
        function ExtNumbercellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, numbercellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtNumbercellComponent_1 = ExtNumbercellComponent;
        ExtNumbercellComponent.prototype.ngOnInit = function () {
            this.baseOnInit(numbercellMetaData);
        };
        ExtNumbercellComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtNumbercellComponent_1;
        ExtNumbercellComponent = ExtNumbercellComponent_1 = __decorate([
            core.Component({
                selector: 'numbercell',
                inputs: numbercellMetaData.PROPERTIES,
                outputs: numbercellMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtNumbercellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtNumbercellComponent);
        return ExtNumbercellComponent;
    }(base));

    var rownumberercellMetaData = /** @class */ (function () {
        function rownumberercellMetaData() {
        }
        rownumberercellMetaData.XTYPE = 'rownumberercell';
        rownumberercellMetaData.PROPERTIES = [
            'align',
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'flex',
            'floated',
            'focusCls',
            'format',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selectable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        rownumberercellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'rownumberercell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'rownumberercell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'rownumberercell,event' },
            { name: 'focusenter', parameters: 'rownumberercell,event' },
            { name: 'focusleave', parameters: 'rownumberercell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'rownumberercell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        rownumberercellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return rownumberercellMetaData;
    }());
    var ExtRownumberercellComponent = /** @class */ (function (_super) {
        __extends(ExtRownumberercellComponent, _super);
        function ExtRownumberercellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, rownumberercellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtRownumberercellComponent_1 = ExtRownumberercellComponent;
        ExtRownumberercellComponent.prototype.ngOnInit = function () {
            this.baseOnInit(rownumberercellMetaData);
        };
        ExtRownumberercellComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtRownumberercellComponent_1;
        ExtRownumberercellComponent = ExtRownumberercellComponent_1 = __decorate([
            core.Component({
                selector: 'rownumberercell',
                inputs: rownumberercellMetaData.PROPERTIES,
                outputs: rownumberercellMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtRownumberercellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtRownumberercellComponent);
        return ExtRownumberercellComponent;
    }(base));

    var textcellMetaData = /** @class */ (function () {
        function textcellMetaData() {
        }
        textcellMetaData.XTYPE = 'textcell';
        textcellMetaData.PROPERTIES = [
            'align',
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'flex',
            'floated',
            'focusCls',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selectable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        textcellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'textcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'textcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'textcell,event' },
            { name: 'focusenter', parameters: 'textcell,event' },
            { name: 'focusleave', parameters: 'textcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'textcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        textcellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return textcellMetaData;
    }());
    var ExtTextcellComponent = /** @class */ (function (_super) {
        __extends(ExtTextcellComponent, _super);
        function ExtTextcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, textcellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTextcellComponent_1 = ExtTextcellComponent;
        ExtTextcellComponent.prototype.ngOnInit = function () {
            this.baseOnInit(textcellMetaData);
        };
        ExtTextcellComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTextcellComponent_1;
        ExtTextcellComponent = ExtTextcellComponent_1 = __decorate([
            core.Component({
                selector: 'textcell',
                inputs: textcellMetaData.PROPERTIES,
                outputs: textcellMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTextcellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTextcellComponent);
        return ExtTextcellComponent;
    }(base));

    var treecellMetaData = /** @class */ (function () {
        function treecellMetaData() {
        }
        treecellMetaData.XTYPE = 'treecell';
        treecellMetaData.PROPERTIES = [
            'align',
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCheckChildren',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'checkable',
            'checkableField',
            'checkedField',
            'checkOnTriTap',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'enableTri',
            'encodeHtml',
            'flex',
            'floated',
            'focusCls',
            'formatter',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'iconClsProperty',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderer',
            'renderTo',
            'ripple',
            'scope',
            'selectable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'tpl',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        treecellMetaData.EVENTS = [
            { name: 'beforecheckchange', parameters: 'treecell,checked,current,record,e' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'treecell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'treecell,event' },
            { name: 'checkchange', parameters: 'treecell,checked,record,e' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'treecell,event' },
            { name: 'focusenter', parameters: 'treecell,event' },
            { name: 'focusleave', parameters: 'treecell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'treecell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        treecellMetaData.EVENTNAMES = [
            'beforecheckchange',
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'checkchange',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return treecellMetaData;
    }());
    var ExtTreecellComponent = /** @class */ (function (_super) {
        __extends(ExtTreecellComponent, _super);
        function ExtTreecellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, treecellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTreecellComponent_1 = ExtTreecellComponent;
        ExtTreecellComponent.prototype.ngOnInit = function () {
            this.baseOnInit(treecellMetaData);
        };
        ExtTreecellComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTreecellComponent_1;
        ExtTreecellComponent = ExtTreecellComponent_1 = __decorate([
            core.Component({
                selector: 'treecell',
                inputs: treecellMetaData.PROPERTIES,
                outputs: treecellMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTreecellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTreecellComponent);
        return ExtTreecellComponent;
    }(base));

    var widgetcellMetaData = /** @class */ (function () {
        function widgetcellMetaData() {
        }
        widgetcellMetaData.XTYPE = 'widgetcell';
        widgetcellMetaData.PROPERTIES = [
            'align',
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'flex',
            'floated',
            'focusCls',
            'forceWidth',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selectable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'widget',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        widgetcellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'widgetcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'widgetcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'widgetcell,event' },
            { name: 'focusenter', parameters: 'widgetcell,event' },
            { name: 'focusleave', parameters: 'widgetcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'widgetcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        widgetcellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return widgetcellMetaData;
    }());
    var ExtWidgetcellComponent = /** @class */ (function (_super) {
        __extends(ExtWidgetcellComponent, _super);
        function ExtWidgetcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, widgetcellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtWidgetcellComponent_1 = ExtWidgetcellComponent;
        ExtWidgetcellComponent.prototype.ngOnInit = function () {
            this.baseOnInit(widgetcellMetaData);
        };
        ExtWidgetcellComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtWidgetcellComponent_1;
        ExtWidgetcellComponent = ExtWidgetcellComponent_1 = __decorate([
            core.Component({
                selector: 'widgetcell',
                inputs: widgetcellMetaData.PROPERTIES,
                outputs: widgetcellMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtWidgetcellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtWidgetcellComponent);
        return ExtWidgetcellComponent;
    }(base));

    var celleditorMetaData = /** @class */ (function () {
        function celleditorMetaData() {
        }
        celleditorMetaData.XTYPE = 'celleditor';
        celleditorMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignment',
            'alignSelf',
            'allowBlur',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoPin',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cancelOnClear',
            'cancelOnEsc',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'completeOnEnter',
            'constrain',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'field',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideEl',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'ignoreNoChange',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'matchFont',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'offset',
            'padding',
            'parentEl',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'revertInvalid',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'swallowKeys',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'updateEl',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        celleditorMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,celleditor,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'celleditor,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecomplete', parameters: 'celleditor,value,startValue' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestartedit', parameters: 'celleditor,boundEl,value' },
            { name: 'beforetofront', parameters: 'celleditor' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'celleditor,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'canceledit', parameters: 'celleditor,value,startValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'complete', parameters: 'celleditor,value,startValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,celleditor,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'celleditor,event' },
            { name: 'focusenter', parameters: 'celleditor,event' },
            { name: 'focusleave', parameters: 'celleditor,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'celleditor,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'celleditor,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'celleditor,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'specialkey', parameters: 'celleditor,field,event' },
            { name: 'startedit', parameters: 'celleditor,boundEl,value' },
            { name: 'tofront', parameters: 'celleditor' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        celleditorMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecomplete',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestartedit',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'canceledit',
            'centeredchange',
            'complete',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'specialkey',
            'startedit',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return celleditorMetaData;
    }());
    var ExtCelleditorComponent = /** @class */ (function (_super) {
        __extends(ExtCelleditorComponent, _super);
        function ExtCelleditorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, celleditorMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCelleditorComponent_1 = ExtCelleditorComponent;
        ExtCelleditorComponent.prototype.ngOnInit = function () {
            this.baseOnInit(celleditorMetaData);
        };
        ExtCelleditorComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCelleditorComponent_1;
        ExtCelleditorComponent = ExtCelleditorComponent_1 = __decorate([
            core.Component({
                selector: 'celleditor',
                inputs: celleditorMetaData.PROPERTIES,
                outputs: celleditorMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCelleditorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCelleditorComponent);
        return ExtCelleditorComponent;
    }(base));

    var booleancolumnMetaData = /** @class */ (function () {
        function booleancolumnMetaData() {
        }
        booleancolumnMetaData.XTYPE = 'booleancolumn';
        booleancolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'editorDefaults',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'falseText',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'trueText',
            'twoWayBindable',
            'ui',
            'undefinedText',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        booleancolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,booleancolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'booleancolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'booleancolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'booleancolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,booleancolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'booleancolumn,event' },
            { name: 'focusenter', parameters: 'booleancolumn,event' },
            { name: 'focusleave', parameters: 'booleancolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'booleancolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'booleancolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'booleancolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'booleancolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        booleancolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return booleancolumnMetaData;
    }());
    var ExtBooleancolumnComponent = /** @class */ (function (_super) {
        __extends(ExtBooleancolumnComponent, _super);
        function ExtBooleancolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, booleancolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtBooleancolumnComponent_1 = ExtBooleancolumnComponent;
        ExtBooleancolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit(booleancolumnMetaData);
        };
        ExtBooleancolumnComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtBooleancolumnComponent_1;
        ExtBooleancolumnComponent = ExtBooleancolumnComponent_1 = __decorate([
            core.Component({
                selector: 'booleancolumn',
                inputs: booleancolumnMetaData.PROPERTIES,
                outputs: booleancolumnMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtBooleancolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtBooleancolumnComponent);
        return ExtBooleancolumnComponent;
    }(base));

    var checkcolumnMetaData = /** @class */ (function () {
        function checkcolumnMetaData() {
        }
        checkcolumnMetaData.XTYPE = 'checkcolumn';
        checkcolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'editorDefaults',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'headerCheckbox',
            'headerCheckboxAlign',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stopSelection',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        checkcolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,checkcolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'checkcolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'checkcolumn,rowIndex,checked,record,e' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'checkcolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'checkcolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'checkcolumn,rowIndex,checked,record,e' },
            { name: 'deactivate', parameters: 'oldActiveItem,checkcolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'checkcolumn,event' },
            { name: 'focusenter', parameters: 'checkcolumn,event' },
            { name: 'focusleave', parameters: 'checkcolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'checkcolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'checkcolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'checkcolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'checkcolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        checkcolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecheckchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'checkchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return checkcolumnMetaData;
    }());
    var ExtCheckcolumnComponent = /** @class */ (function (_super) {
        __extends(ExtCheckcolumnComponent, _super);
        function ExtCheckcolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, checkcolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtCheckcolumnComponent_1 = ExtCheckcolumnComponent;
        ExtCheckcolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit(checkcolumnMetaData);
        };
        ExtCheckcolumnComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtCheckcolumnComponent_1;
        ExtCheckcolumnComponent = ExtCheckcolumnComponent_1 = __decorate([
            core.Component({
                selector: 'checkcolumn',
                inputs: checkcolumnMetaData.PROPERTIES,
                outputs: checkcolumnMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtCheckcolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtCheckcolumnComponent);
        return ExtCheckcolumnComponent;
    }(base));

    var gridcolumnMetaData = /** @class */ (function () {
        function gridcolumnMetaData() {
        }
        gridcolumnMetaData.XTYPE = 'gridcolumn';
        gridcolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'editorDefaults',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridcolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,gridcolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'gridcolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridcolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,gridcolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridcolumn,event' },
            { name: 'focusenter', parameters: 'gridcolumn,event' },
            { name: 'focusleave', parameters: 'gridcolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'gridcolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'gridcolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'gridcolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridcolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridcolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridcolumnMetaData;
    }());
    var ExtGridcolumnComponent = /** @class */ (function (_super) {
        __extends(ExtGridcolumnComponent, _super);
        function ExtGridcolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridcolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtGridcolumnComponent_1 = ExtGridcolumnComponent;
        ExtGridcolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit(gridcolumnMetaData);
        };
        ExtGridcolumnComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtGridcolumnComponent_1;
        ExtGridcolumnComponent = ExtGridcolumnComponent_1 = __decorate([
            core.Component({
                selector: 'gridcolumn',
                inputs: gridcolumnMetaData.PROPERTIES,
                outputs: gridcolumnMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtGridcolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtGridcolumnComponent);
        return ExtGridcolumnComponent;
    }(base));

    var columnMetaData = /** @class */ (function () {
        function columnMetaData() {
        }
        columnMetaData.XTYPE = 'column';
        columnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'editorDefaults',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        columnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,gridcolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'gridcolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridcolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,gridcolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridcolumn,event' },
            { name: 'focusenter', parameters: 'gridcolumn,event' },
            { name: 'focusleave', parameters: 'gridcolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'gridcolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'gridcolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'gridcolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridcolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        columnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return columnMetaData;
    }());
    var ExtColumnComponent = /** @class */ (function (_super) {
        __extends(ExtColumnComponent, _super);
        function ExtColumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, columnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtColumnComponent_1 = ExtColumnComponent;
        ExtColumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit(columnMetaData);
        };
        ExtColumnComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtColumnComponent_1;
        ExtColumnComponent = ExtColumnComponent_1 = __decorate([
            core.Component({
                selector: 'column',
                inputs: columnMetaData.PROPERTIES,
                outputs: columnMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtColumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtColumnComponent);
        return ExtColumnComponent;
    }(base));

    var templatecolumnMetaData = /** @class */ (function () {
        function templatecolumnMetaData() {
        }
        templatecolumnMetaData.XTYPE = 'templatecolumn';
        templatecolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'editorDefaults',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        templatecolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,gridcolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'gridcolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridcolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,gridcolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridcolumn,event' },
            { name: 'focusenter', parameters: 'gridcolumn,event' },
            { name: 'focusleave', parameters: 'gridcolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'gridcolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'gridcolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'gridcolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridcolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        templatecolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return templatecolumnMetaData;
    }());
    var ExtTemplatecolumnComponent = /** @class */ (function (_super) {
        __extends(ExtTemplatecolumnComponent, _super);
        function ExtTemplatecolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, templatecolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTemplatecolumnComponent_1 = ExtTemplatecolumnComponent;
        ExtTemplatecolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit(templatecolumnMetaData);
        };
        ExtTemplatecolumnComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTemplatecolumnComponent_1;
        ExtTemplatecolumnComponent = ExtTemplatecolumnComponent_1 = __decorate([
            core.Component({
                selector: 'templatecolumn',
                inputs: templatecolumnMetaData.PROPERTIES,
                outputs: templatecolumnMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTemplatecolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTemplatecolumnComponent);
        return ExtTemplatecolumnComponent;
    }(base));

    var datecolumnMetaData = /** @class */ (function () {
        function datecolumnMetaData() {
        }
        datecolumnMetaData.XTYPE = 'datecolumn';
        datecolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'editorDefaults',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'format',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datecolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,datecolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'datecolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datecolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datecolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,datecolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datecolumn,event' },
            { name: 'focusenter', parameters: 'datecolumn,event' },
            { name: 'focusleave', parameters: 'datecolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'datecolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'datecolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'datecolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datecolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datecolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return datecolumnMetaData;
    }());
    var ExtDatecolumnComponent = /** @class */ (function (_super) {
        __extends(ExtDatecolumnComponent, _super);
        function ExtDatecolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datecolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtDatecolumnComponent_1 = ExtDatecolumnComponent;
        ExtDatecolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit(datecolumnMetaData);
        };
        ExtDatecolumnComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtDatecolumnComponent_1;
        ExtDatecolumnComponent = ExtDatecolumnComponent_1 = __decorate([
            core.Component({
                selector: 'datecolumn',
                inputs: datecolumnMetaData.PROPERTIES,
                outputs: datecolumnMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtDatecolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtDatecolumnComponent);
        return ExtDatecolumnComponent;
    }(base));

    var dragcolumnMetaData = /** @class */ (function () {
        function dragcolumnMetaData() {
        }
        dragcolumnMetaData.XTYPE = 'dragcolumn';
        dragcolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'editorDefaults',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        dragcolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,dragcolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'dragcolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'dragcolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'dragcolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,dragcolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'dragcolumn,event' },
            { name: 'focusenter', parameters: 'dragcolumn,event' },
            { name: 'focusleave', parameters: 'dragcolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'dragcolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'dragcolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'dragcolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'dragcolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        dragcolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return dragcolumnMetaData;
    }());
    var ExtDragcolumnComponent = /** @class */ (function (_super) {
        __extends(ExtDragcolumnComponent, _super);
        function ExtDragcolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, dragcolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtDragcolumnComponent_1 = ExtDragcolumnComponent;
        ExtDragcolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit(dragcolumnMetaData);
        };
        ExtDragcolumnComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtDragcolumnComponent_1;
        ExtDragcolumnComponent = ExtDragcolumnComponent_1 = __decorate([
            core.Component({
                selector: 'dragcolumn',
                inputs: dragcolumnMetaData.PROPERTIES,
                outputs: dragcolumnMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtDragcolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtDragcolumnComponent);
        return ExtDragcolumnComponent;
    }(base));

    var numbercolumnMetaData = /** @class */ (function () {
        function numbercolumnMetaData() {
        }
        numbercolumnMetaData.XTYPE = 'numbercolumn';
        numbercolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'editorDefaults',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'format',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        numbercolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,numbercolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'numbercolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'numbercolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'numbercolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,numbercolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'numbercolumn,event' },
            { name: 'focusenter', parameters: 'numbercolumn,event' },
            { name: 'focusleave', parameters: 'numbercolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'numbercolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'numbercolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'numbercolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'numbercolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        numbercolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return numbercolumnMetaData;
    }());
    var ExtNumbercolumnComponent = /** @class */ (function (_super) {
        __extends(ExtNumbercolumnComponent, _super);
        function ExtNumbercolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, numbercolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtNumbercolumnComponent_1 = ExtNumbercolumnComponent;
        ExtNumbercolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit(numbercolumnMetaData);
        };
        ExtNumbercolumnComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtNumbercolumnComponent_1;
        ExtNumbercolumnComponent = ExtNumbercolumnComponent_1 = __decorate([
            core.Component({
                selector: 'numbercolumn',
                inputs: numbercolumnMetaData.PROPERTIES,
                outputs: numbercolumnMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtNumbercolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtNumbercolumnComponent);
        return ExtNumbercolumnComponent;
    }(base));

    var rownumbererMetaData = /** @class */ (function () {
        function rownumbererMetaData() {
        }
        rownumbererMetaData.XTYPE = 'rownumberer';
        rownumbererMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'editorDefaults',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'format',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        rownumbererMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,rownumberer,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'rownumberer,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'rownumberer' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'rownumberer,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,rownumberer,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'rownumberer,event' },
            { name: 'focusenter', parameters: 'rownumberer,event' },
            { name: 'focusleave', parameters: 'rownumberer,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'rownumberer,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'rownumberer,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'rownumberer,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'rownumberer' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        rownumbererMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return rownumbererMetaData;
    }());
    var ExtRownumbererComponent = /** @class */ (function (_super) {
        __extends(ExtRownumbererComponent, _super);
        function ExtRownumbererComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, rownumbererMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtRownumbererComponent_1 = ExtRownumbererComponent;
        ExtRownumbererComponent.prototype.ngOnInit = function () {
            this.baseOnInit(rownumbererMetaData);
        };
        ExtRownumbererComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtRownumbererComponent_1;
        ExtRownumbererComponent = ExtRownumbererComponent_1 = __decorate([
            core.Component({
                selector: 'rownumberer',
                inputs: rownumbererMetaData.PROPERTIES,
                outputs: rownumbererMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtRownumbererComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtRownumbererComponent);
        return ExtRownumbererComponent;
    }(base));

    var selectioncolumnMetaData = /** @class */ (function () {
        function selectioncolumnMetaData() {
        }
        selectioncolumnMetaData.XTYPE = 'selectioncolumn';
        selectioncolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'editorDefaults',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'headerCheckbox',
            'headerCheckboxAlign',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stopSelection',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        selectioncolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,selectioncolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'selectioncolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'selectioncolumn,rowIndex,checked,record,e' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'selectioncolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'selectioncolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'selectioncolumn,rowIndex,checked,record,e' },
            { name: 'deactivate', parameters: 'oldActiveItem,selectioncolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'selectioncolumn,event' },
            { name: 'focusenter', parameters: 'selectioncolumn,event' },
            { name: 'focusleave', parameters: 'selectioncolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'selectioncolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'selectioncolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'selectioncolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'selectioncolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        selectioncolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecheckchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'checkchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return selectioncolumnMetaData;
    }());
    var ExtSelectioncolumnComponent = /** @class */ (function (_super) {
        __extends(ExtSelectioncolumnComponent, _super);
        function ExtSelectioncolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, selectioncolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSelectioncolumnComponent_1 = ExtSelectioncolumnComponent;
        ExtSelectioncolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit(selectioncolumnMetaData);
        };
        ExtSelectioncolumnComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSelectioncolumnComponent_1;
        ExtSelectioncolumnComponent = ExtSelectioncolumnComponent_1 = __decorate([
            core.Component({
                selector: 'selectioncolumn',
                inputs: selectioncolumnMetaData.PROPERTIES,
                outputs: selectioncolumnMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSelectioncolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSelectioncolumnComponent);
        return ExtSelectioncolumnComponent;
    }(base));

    var textcolumnMetaData = /** @class */ (function () {
        function textcolumnMetaData() {
        }
        textcolumnMetaData.XTYPE = 'textcolumn';
        textcolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'editorDefaults',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        textcolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,textcolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'textcolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'textcolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'textcolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,textcolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'textcolumn,event' },
            { name: 'focusenter', parameters: 'textcolumn,event' },
            { name: 'focusleave', parameters: 'textcolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'textcolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'textcolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'textcolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'textcolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        textcolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return textcolumnMetaData;
    }());
    var ExtTextcolumnComponent = /** @class */ (function (_super) {
        __extends(ExtTextcolumnComponent, _super);
        function ExtTextcolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, textcolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTextcolumnComponent_1 = ExtTextcolumnComponent;
        ExtTextcolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit(textcolumnMetaData);
        };
        ExtTextcolumnComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTextcolumnComponent_1;
        ExtTextcolumnComponent = ExtTextcolumnComponent_1 = __decorate([
            core.Component({
                selector: 'textcolumn',
                inputs: textcolumnMetaData.PROPERTIES,
                outputs: textcolumnMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTextcolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTextcolumnComponent);
        return ExtTextcolumnComponent;
    }(base));

    var treecolumnMetaData = /** @class */ (function () {
        function treecolumnMetaData() {
        }
        treecolumnMetaData.XTYPE = 'treecolumn';
        treecolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'editorDefaults',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        treecolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,treecolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'treecolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'treecolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'treecolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,treecolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'treecolumn,event' },
            { name: 'focusenter', parameters: 'treecolumn,event' },
            { name: 'focusleave', parameters: 'treecolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'treecolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'treecolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'treecolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'treecolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        treecolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return treecolumnMetaData;
    }());
    var ExtTreecolumnComponent = /** @class */ (function (_super) {
        __extends(ExtTreecolumnComponent, _super);
        function ExtTreecolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, treecolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTreecolumnComponent_1 = ExtTreecolumnComponent;
        ExtTreecolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit(treecolumnMetaData);
        };
        ExtTreecolumnComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTreecolumnComponent_1;
        ExtTreecolumnComponent = ExtTreecolumnComponent_1 = __decorate([
            core.Component({
                selector: 'treecolumn',
                inputs: treecolumnMetaData.PROPERTIES,
                outputs: treecolumnMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTreecolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTreecolumnComponent);
        return ExtTreecolumnComponent;
    }(base));

    var gridMetaData = /** @class */ (function () {
        function gridMetaData() {
        }
        gridMetaData.XTYPE = 'grid';
        gridMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'bufferSize',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'collapseDefaults',
            'collapsible',
            'columnLines',
            'columnMenu',
            'columnResize',
            'columns',
            'columnsMenuItem',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'disclosureProperty',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'enableColumnMove',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'grouped',
            'groupFooter',
            'groupHeader',
            'grouping',
            'groupPlaceholder',
            'height',
            'hidden',
            'hideAnimation',
            'hideHeaders',
            'hideMode',
            'hideOnMaskTap',
            'hideScrollbar',
            'horizontalOverflow',
            'html',
            'id',
            'inactiveChildTabIndex',
            'indexBar',
            'infinite',
            'inline',
            'innerCls',
            'innerCtHeight',
            'innerWidth',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemConfig',
            'itemContentCls',
            'itemDataMap',
            'itemId',
            'itemInnerCls',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'maintainChildNodes',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxItemCache',
            'maxWidth',
            'minHeight',
            'minimumBufferDistance',
            'minWidth',
            'modal',
            'modelValidation',
            'multiColumnSort',
            'name',
            'nameable',
            'nameHolder',
            'onItemDisclosure',
            'padding',
            'pinFooters',
            'pinHeaders',
            'pinnedFooter',
            'pinnedFooterHeight',
            'pinnedHeader',
            'pinnedHeaderHeight',
            'plugins',
            'pressedDelay',
            'preventSelectionOnDisclose',
            'preventSelectionOnTool',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'right',
            'ripple',
            'rowLines',
            'rowNumbers',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'striped',
            'style',
            'tabIndex',
            'title',
            'titleBar',
            'toFrontOnShow',
            'tooltip',
            'top',
            'topRenderedIndex',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'variableHeights',
            'verticalOverflow',
            'viewModel',
            'visibleHeight',
            'visibleLeft',
            'visibleTop',
            'visibleWidth',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,grid,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecomplete', parameters: 'editor,value,startValue,The' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeedit', parameters: 'sender,location' },
            { name: 'beforegroupcollapse', parameters: 'grid,group' },
            { name: 'beforegroupexpand', parameters: 'grid,group' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeselectionextend', parameters: 'grid,An,extension' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestartedit', parameters: 'editor,boundEl,value,The' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'grid' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'grid,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'canceledit', parameters: 'editor,value,startValue' },
            { name: 'canceledit', parameters: 'sender,location' },
            { name: 'cellselection', parameters: 'grid,selection' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'grid,location' },
            { name: 'childlongpress', parameters: 'grid,location' },
            { name: 'childmouseenter', parameters: 'grid,location' },
            { name: 'childmouseleave', parameters: 'grid,location' },
            { name: 'childsingletap', parameters: 'grid,location' },
            { name: 'childtap', parameters: 'grid,location' },
            { name: 'childtaphold', parameters: 'grid,location' },
            { name: 'childtouchcancel', parameters: 'grid,location' },
            { name: 'childtouchend', parameters: 'grid,location' },
            { name: 'childtouchmove', parameters: 'grid,location' },
            { name: 'childtouchstart', parameters: 'grid,location' },
            { name: 'columnadd', parameters: 'grid,column,index' },
            { name: 'columnhide', parameters: 'grid,column' },
            { name: 'columnmenucreated', parameters: 'grid,column,menu' },
            { name: 'columnmove', parameters: 'grid,column,fromIndex,toIndex' },
            { name: 'columnremove', parameters: 'grid,column' },
            { name: 'columnresize', parameters: 'grid,column,width' },
            { name: 'columnselection', parameters: 'grid,selection' },
            { name: 'columnshow', parameters: 'grid,column' },
            { name: 'columnsort', parameters: 'grid,column,direction' },
            { name: 'complete', parameters: 'editor,value,startValue,The' },
            { name: 'deactivate', parameters: 'oldActiveItem,grid,newActiveItem' },
            { name: 'deselect', parameters: 'grid,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'edit', parameters: 'sender,location' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'grid,event' },
            { name: 'focusenter', parameters: 'grid,event' },
            { name: 'focusleave', parameters: 'grid,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'groupcollapse', parameters: 'grid,group' },
            { name: 'groupexpand', parameters: 'grid,group' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'grid,index,record,action' },
            { name: 'itemdoubletap', parameters: 'grid,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'grid,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'grid,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'grid,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'grid,index,target,record,e' },
            { name: 'itemswipe', parameters: 'grid,index,target,record,e' },
            { name: 'itemtap', parameters: 'grid,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'grid,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'grid,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'grid,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'grid,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'grid,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'grid,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'grid' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'grid,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'grid,selected' },
            { name: 'selectionextenderdrag', parameters: 'grid,An,extension' },
            { name: 'show', parameters: 'sender' },
            { name: 'specialkey', parameters: 'editor,field,event' },
            { name: 'startedit', parameters: 'editor,boundEl,value,The' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'grid' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateedit', parameters: 'sender,location' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecomplete',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeedit',
            'beforegroupcollapse',
            'beforegroupexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeselectionextend',
            'beforeshow',
            'beforestartedit',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'canceledit',
            'canceledit',
            'cellselection',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'columnadd',
            'columnhide',
            'columnmenucreated',
            'columnmove',
            'columnremove',
            'columnresize',
            'columnselection',
            'columnshow',
            'columnsort',
            'complete',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'disclose',
            'dockedchange',
            'edit',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'groupcollapse',
            'groupexpand',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemaction',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'selectionextenderdrag',
            'show',
            'specialkey',
            'startedit',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'validateedit',
            'widthchange',
            'ready'
        ];
        return gridMetaData;
    }());
    var ExtGridComponent = /** @class */ (function (_super) {
        __extends(ExtGridComponent, _super);
        function ExtGridComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtGridComponent_1 = ExtGridComponent;
        ExtGridComponent.prototype.ngOnInit = function () {
            this.baseOnInit(gridMetaData);
        };
        ExtGridComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtGridComponent_1;
        ExtGridComponent = ExtGridComponent_1 = __decorate([
            core.Component({
                selector: 'grid',
                inputs: gridMetaData.PROPERTIES,
                outputs: gridMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtGridComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtGridComponent);
        return ExtGridComponent;
    }(base));

    var headercontainerMetaData = /** @class */ (function () {
        function headercontainerMetaData() {
        }
        headercontainerMetaData.XTYPE = 'headercontainer';
        headercontainerMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'columns',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultColumnUI',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        headercontainerMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,headercontainer,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'headercontainer,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'headercontainer' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'headercontainer,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,headercontainer,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'headercontainer,event' },
            { name: 'focusenter', parameters: 'headercontainer,event' },
            { name: 'focusleave', parameters: 'headercontainer,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'headercontainer,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'headercontainer,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'headercontainer,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'headercontainer' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        headercontainerMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return headercontainerMetaData;
    }());
    var ExtHeadercontainerComponent = /** @class */ (function (_super) {
        __extends(ExtHeadercontainerComponent, _super);
        function ExtHeadercontainerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, headercontainerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtHeadercontainerComponent_1 = ExtHeadercontainerComponent;
        ExtHeadercontainerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(headercontainerMetaData);
        };
        ExtHeadercontainerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtHeadercontainerComponent_1;
        ExtHeadercontainerComponent = ExtHeadercontainerComponent_1 = __decorate([
            core.Component({
                selector: 'headercontainer',
                inputs: headercontainerMetaData.PROPERTIES,
                outputs: headercontainerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtHeadercontainerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtHeadercontainerComponent);
        return ExtHeadercontainerComponent;
    }(base));

    var lockedgridMetaData = /** @class */ (function () {
        function lockedgridMetaData() {
        }
        lockedgridMetaData.XTYPE = 'lockedgrid';
        lockedgridMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'columnMenu',
            'columns',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaultLockedRegion',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableColumnMove',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gridDefaults',
            'grouped',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideHeaders',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemConfig',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'leftGridDefaults',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'regions',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'rightGridDefaults',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'variableHeights',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        lockedgridMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,lockedgrid,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'lockedgrid,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'lockedgrid' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'lockedgrid' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'lockedgrid,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'lockedgrid' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'lockedgrid,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'lockedgrid' },
            { name: 'deactivate', parameters: 'oldActiveItem,lockedgrid,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'lockedgrid' },
            { name: 'drawershow', parameters: 'lockedgrid' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'lockedgrid' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'lockedgrid,event' },
            { name: 'focusenter', parameters: 'lockedgrid,event' },
            { name: 'focusleave', parameters: 'lockedgrid,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'lockedgrid,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'lockedgrid,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'lockedgrid,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'lockedgrid,context' },
            { name: 'resizedragcancel', parameters: 'lockedgrid,context' },
            { name: 'resizedragend', parameters: 'lockedgrid,context' },
            { name: 'resizedragstart', parameters: 'lockedgrid,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'lockedgrid' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        lockedgridMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return lockedgridMetaData;
    }());
    var ExtLockedgridComponent = /** @class */ (function (_super) {
        __extends(ExtLockedgridComponent, _super);
        function ExtLockedgridComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, lockedgridMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtLockedgridComponent_1 = ExtLockedgridComponent;
        ExtLockedgridComponent.prototype.ngOnInit = function () {
            this.baseOnInit(lockedgridMetaData);
        };
        ExtLockedgridComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtLockedgridComponent_1;
        ExtLockedgridComponent = ExtLockedgridComponent_1 = __decorate([
            core.Component({
                selector: 'lockedgrid',
                inputs: lockedgridMetaData.PROPERTIES,
                outputs: lockedgridMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtLockedgridComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtLockedgridComponent);
        return ExtLockedgridComponent;
    }(base));

    var lockedgridregionMetaData = /** @class */ (function () {
        function lockedgridregionMetaData() {
        }
        lockedgridregionMetaData.XTYPE = 'lockedgridregion';
        lockedgridregionMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'grid',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menuLabel',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'regionKey',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        lockedgridregionMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,lockedgridregion,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'lockedgridregion,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'lockedgridregion' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'lockedgridregion' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'lockedgridregion,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'lockedgridregion' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'lockedgridregion,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'lockedgridregion' },
            { name: 'deactivate', parameters: 'oldActiveItem,lockedgridregion,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'lockedgridregion' },
            { name: 'drawershow', parameters: 'lockedgridregion' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'lockedgridregion' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'lockedgridregion,event' },
            { name: 'focusenter', parameters: 'lockedgridregion,event' },
            { name: 'focusleave', parameters: 'lockedgridregion,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'lockedgridregion,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'lockedgridregion,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'lockedgridregion,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'lockedgridregion,context' },
            { name: 'resizedragcancel', parameters: 'lockedgridregion,context' },
            { name: 'resizedragend', parameters: 'lockedgridregion,context' },
            { name: 'resizedragstart', parameters: 'lockedgridregion,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'lockedgridregion' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        lockedgridregionMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return lockedgridregionMetaData;
    }());
    var ExtLockedgridregionComponent = /** @class */ (function (_super) {
        __extends(ExtLockedgridregionComponent, _super);
        function ExtLockedgridregionComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, lockedgridregionMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtLockedgridregionComponent_1 = ExtLockedgridregionComponent;
        ExtLockedgridregionComponent.prototype.ngOnInit = function () {
            this.baseOnInit(lockedgridregionMetaData);
        };
        ExtLockedgridregionComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtLockedgridregionComponent_1;
        ExtLockedgridregionComponent = ExtLockedgridregionComponent_1 = __decorate([
            core.Component({
                selector: 'lockedgridregion',
                inputs: lockedgridregionMetaData.PROPERTIES,
                outputs: lockedgridregionMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtLockedgridregionComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtLockedgridregionComponent);
        return ExtLockedgridregionComponent;
    }(base));

    var gridcolumnsmenuMetaData = /** @class */ (function () {
        function gridcolumnsmenuMetaData() {
        }
        gridcolumnsmenuMetaData.XTYPE = 'gridcolumnsmenu';
        gridcolumnsmenuMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clickHideDelay',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnClick',
            'hideOnMaskTap',
            'href',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'indented',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'target',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridcolumnsmenuMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridcolumnsmenu' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcolumnsmenu,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridcolumnsmenu,event' },
            { name: 'focusenter', parameters: 'gridcolumnsmenu,event' },
            { name: 'focusleave', parameters: 'gridcolumnsmenu,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridcolumnsmenu' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridcolumnsmenuMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridcolumnsmenuMetaData;
    }());
    var ExtGridcolumnsmenuComponent = /** @class */ (function (_super) {
        __extends(ExtGridcolumnsmenuComponent, _super);
        function ExtGridcolumnsmenuComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridcolumnsmenuMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtGridcolumnsmenuComponent_1 = ExtGridcolumnsmenuComponent;
        ExtGridcolumnsmenuComponent.prototype.ngOnInit = function () {
            this.baseOnInit(gridcolumnsmenuMetaData);
        };
        ExtGridcolumnsmenuComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtGridcolumnsmenuComponent_1;
        ExtGridcolumnsmenuComponent = ExtGridcolumnsmenuComponent_1 = __decorate([
            core.Component({
                selector: 'gridcolumnsmenu',
                inputs: gridcolumnsmenuMetaData.PROPERTIES,
                outputs: gridcolumnsmenuMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtGridcolumnsmenuComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtGridcolumnsmenuComponent);
        return ExtGridcolumnsmenuComponent;
    }(base));

    var gridgroupbythismenuitemMetaData = /** @class */ (function () {
        function gridgroupbythismenuitemMetaData() {
        }
        gridgroupbythismenuitemMetaData.XTYPE = 'gridgroupbythismenuitem';
        gridgroupbythismenuitemMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clickHideDelay',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnClick',
            'hideOnMaskTap',
            'href',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'indented',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'target',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridgroupbythismenuitemMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridgroupbythismenuitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridgroupbythismenuitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridgroupbythismenuitem,event' },
            { name: 'focusenter', parameters: 'gridgroupbythismenuitem,event' },
            { name: 'focusleave', parameters: 'gridgroupbythismenuitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridgroupbythismenuitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridgroupbythismenuitemMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridgroupbythismenuitemMetaData;
    }());
    var ExtGridgroupbythismenuitemComponent = /** @class */ (function (_super) {
        __extends(ExtGridgroupbythismenuitemComponent, _super);
        function ExtGridgroupbythismenuitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridgroupbythismenuitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtGridgroupbythismenuitemComponent_1 = ExtGridgroupbythismenuitemComponent;
        ExtGridgroupbythismenuitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit(gridgroupbythismenuitemMetaData);
        };
        ExtGridgroupbythismenuitemComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtGridgroupbythismenuitemComponent_1;
        ExtGridgroupbythismenuitemComponent = ExtGridgroupbythismenuitemComponent_1 = __decorate([
            core.Component({
                selector: 'gridgroupbythismenuitem',
                inputs: gridgroupbythismenuitemMetaData.PROPERTIES,
                outputs: gridgroupbythismenuitemMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtGridgroupbythismenuitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtGridgroupbythismenuitemComponent);
        return ExtGridgroupbythismenuitemComponent;
    }(base));

    var gridshowingroupsmenuitemMetaData = /** @class */ (function () {
        function gridshowingroupsmenuitemMetaData() {
        }
        gridshowingroupsmenuitemMetaData.XTYPE = 'gridshowingroupsmenuitem';
        gridshowingroupsmenuitemMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'checkChangeDisabled',
            'checked',
            'checkHandler',
            'clickHideDelay',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnClick',
            'hideOnMaskTap',
            'href',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'indented',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submenuText',
            'tabIndex',
            'target',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridshowingroupsmenuitemMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'gridshowingroupsmenuitem,checked' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridshowingroupsmenuitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridshowingroupsmenuitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'gridshowingroupsmenuitem,checked' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridshowingroupsmenuitem,event' },
            { name: 'focusenter', parameters: 'gridshowingroupsmenuitem,event' },
            { name: 'focusleave', parameters: 'gridshowingroupsmenuitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridshowingroupsmenuitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridshowingroupsmenuitemMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecheckchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'checkchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridshowingroupsmenuitemMetaData;
    }());
    var ExtGridshowingroupsmenuitemComponent = /** @class */ (function (_super) {
        __extends(ExtGridshowingroupsmenuitemComponent, _super);
        function ExtGridshowingroupsmenuitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridshowingroupsmenuitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtGridshowingroupsmenuitemComponent_1 = ExtGridshowingroupsmenuitemComponent;
        ExtGridshowingroupsmenuitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit(gridshowingroupsmenuitemMetaData);
        };
        ExtGridshowingroupsmenuitemComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtGridshowingroupsmenuitemComponent_1;
        ExtGridshowingroupsmenuitemComponent = ExtGridshowingroupsmenuitemComponent_1 = __decorate([
            core.Component({
                selector: 'gridshowingroupsmenuitem',
                inputs: gridshowingroupsmenuitemMetaData.PROPERTIES,
                outputs: gridshowingroupsmenuitemMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtGridshowingroupsmenuitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtGridshowingroupsmenuitemComponent);
        return ExtGridshowingroupsmenuitemComponent;
    }(base));

    var gridsortascmenuitemMetaData = /** @class */ (function () {
        function gridsortascmenuitemMetaData() {
        }
        gridsortascmenuitemMetaData.XTYPE = 'gridsortascmenuitem';
        gridsortascmenuitemMetaData.PROPERTIES = [
            'alignSelf',
            'allowUncheck',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'checkChangeDisabled',
            'checked',
            'checkHandler',
            'clickHideDelay',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'group',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnClick',
            'hideOnMaskTap',
            'href',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'indented',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submenuText',
            'tabIndex',
            'target',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridsortascmenuitemMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'gridsortascmenuitem,checked' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridsortascmenuitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridsortascmenuitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'gridsortascmenuitem,checked' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridsortascmenuitem,event' },
            { name: 'focusenter', parameters: 'gridsortascmenuitem,event' },
            { name: 'focusleave', parameters: 'gridsortascmenuitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridsortascmenuitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridsortascmenuitemMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecheckchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'checkchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridsortascmenuitemMetaData;
    }());
    var ExtGridsortascmenuitemComponent = /** @class */ (function (_super) {
        __extends(ExtGridsortascmenuitemComponent, _super);
        function ExtGridsortascmenuitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridsortascmenuitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtGridsortascmenuitemComponent_1 = ExtGridsortascmenuitemComponent;
        ExtGridsortascmenuitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit(gridsortascmenuitemMetaData);
        };
        ExtGridsortascmenuitemComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtGridsortascmenuitemComponent_1;
        ExtGridsortascmenuitemComponent = ExtGridsortascmenuitemComponent_1 = __decorate([
            core.Component({
                selector: 'gridsortascmenuitem',
                inputs: gridsortascmenuitemMetaData.PROPERTIES,
                outputs: gridsortascmenuitemMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtGridsortascmenuitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtGridsortascmenuitemComponent);
        return ExtGridsortascmenuitemComponent;
    }(base));

    var gridsortdescmenuitemMetaData = /** @class */ (function () {
        function gridsortdescmenuitemMetaData() {
        }
        gridsortdescmenuitemMetaData.XTYPE = 'gridsortdescmenuitem';
        gridsortdescmenuitemMetaData.PROPERTIES = [
            'alignSelf',
            'allowUncheck',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'checkChangeDisabled',
            'checked',
            'checkHandler',
            'clickHideDelay',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'group',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnClick',
            'hideOnMaskTap',
            'href',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'indented',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submenuText',
            'tabIndex',
            'target',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridsortdescmenuitemMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'gridsortdescmenuitem,checked' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridsortdescmenuitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridsortdescmenuitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'gridsortdescmenuitem,checked' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridsortdescmenuitem,event' },
            { name: 'focusenter', parameters: 'gridsortdescmenuitem,event' },
            { name: 'focusleave', parameters: 'gridsortdescmenuitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridsortdescmenuitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridsortdescmenuitemMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecheckchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'checkchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridsortdescmenuitemMetaData;
    }());
    var ExtGridsortdescmenuitemComponent = /** @class */ (function (_super) {
        __extends(ExtGridsortdescmenuitemComponent, _super);
        function ExtGridsortdescmenuitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridsortdescmenuitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtGridsortdescmenuitemComponent_1 = ExtGridsortdescmenuitemComponent;
        ExtGridsortdescmenuitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit(gridsortdescmenuitemMetaData);
        };
        ExtGridsortdescmenuitemComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtGridsortdescmenuitemComponent_1;
        ExtGridsortdescmenuitemComponent = ExtGridsortdescmenuitemComponent_1 = __decorate([
            core.Component({
                selector: 'gridsortdescmenuitem',
                inputs: gridsortdescmenuitemMetaData.PROPERTIES,
                outputs: gridsortdescmenuitemMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtGridsortdescmenuitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtGridsortdescmenuitemComponent);
        return ExtGridsortdescmenuitemComponent;
    }(base));

    var pagingtoolbarMetaData = /** @class */ (function () {
        function pagingtoolbarMetaData() {
        }
        pagingtoolbarMetaData.XTYPE = 'pagingtoolbar';
        pagingtoolbarMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultButtonUI',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'nextButton',
            'padding',
            'plugins',
            'prevButton',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sliderField',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summaryComponent',
            'tabIndex',
            'title',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pagingtoolbarMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pagingtoolbar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pagingtoolbar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pagingtoolbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pagingtoolbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,pagingtoolbar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pagingtoolbar,event' },
            { name: 'focusenter', parameters: 'pagingtoolbar,event' },
            { name: 'focusleave', parameters: 'pagingtoolbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pagingtoolbar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pagingtoolbar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pagingtoolbar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pagingtoolbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pagingtoolbarMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pagingtoolbarMetaData;
    }());
    var ExtPagingtoolbarComponent = /** @class */ (function (_super) {
        __extends(ExtPagingtoolbarComponent, _super);
        function ExtPagingtoolbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pagingtoolbarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPagingtoolbarComponent_1 = ExtPagingtoolbarComponent;
        ExtPagingtoolbarComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pagingtoolbarMetaData);
        };
        ExtPagingtoolbarComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPagingtoolbarComponent_1;
        ExtPagingtoolbarComponent = ExtPagingtoolbarComponent_1 = __decorate([
            core.Component({
                selector: 'pagingtoolbar',
                inputs: pagingtoolbarMetaData.PROPERTIES,
                outputs: pagingtoolbarMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPagingtoolbarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPagingtoolbarComponent);
        return ExtPagingtoolbarComponent;
    }(base));

    var gridrowMetaData = /** @class */ (function () {
        function gridrowMetaData() {
        }
        gridrowMetaData.XTYPE = 'gridrow';
        gridrowMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'body',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultCellUI',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'expandedField',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'recordIndex',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stickyVisibility',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridrowMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridrow' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridrow,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridrow,event' },
            { name: 'focusenter', parameters: 'gridrow,event' },
            { name: 'focusleave', parameters: 'gridrow,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridrow' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridrowMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridrowMetaData;
    }());
    var ExtGridrowComponent = /** @class */ (function (_super) {
        __extends(ExtGridrowComponent, _super);
        function ExtGridrowComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridrowMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtGridrowComponent_1 = ExtGridrowComponent;
        ExtGridrowComponent.prototype.ngOnInit = function () {
            this.baseOnInit(gridrowMetaData);
        };
        ExtGridrowComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtGridrowComponent_1;
        ExtGridrowComponent = ExtGridrowComponent_1 = __decorate([
            core.Component({
                selector: 'gridrow',
                inputs: gridrowMetaData.PROPERTIES,
                outputs: gridrowMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtGridrowComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtGridrowComponent);
        return ExtGridrowComponent;
    }(base));

    var rowbodyMetaData = /** @class */ (function () {
        function rowbodyMetaData() {
        }
        rowbodyMetaData.XTYPE = 'rowbody';
        rowbodyMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        rowbodyMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'rowbody' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'rowbody,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'rowbody,event' },
            { name: 'focusenter', parameters: 'rowbody,event' },
            { name: 'focusleave', parameters: 'rowbody,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'rowbody' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        rowbodyMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return rowbodyMetaData;
    }());
    var ExtRowbodyComponent = /** @class */ (function (_super) {
        __extends(ExtRowbodyComponent, _super);
        function ExtRowbodyComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, rowbodyMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtRowbodyComponent_1 = ExtRowbodyComponent;
        ExtRowbodyComponent.prototype.ngOnInit = function () {
            this.baseOnInit(rowbodyMetaData);
        };
        ExtRowbodyComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtRowbodyComponent_1;
        ExtRowbodyComponent = ExtRowbodyComponent_1 = __decorate([
            core.Component({
                selector: 'rowbody',
                inputs: rowbodyMetaData.PROPERTIES,
                outputs: rowbodyMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtRowbodyComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtRowbodyComponent);
        return ExtRowbodyComponent;
    }(base));

    var roweditorbarMetaData = /** @class */ (function () {
        function roweditorbarMetaData() {
        }
        roweditorbarMetaData.XTYPE = 'roweditorbar';
        roweditorbarMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        roweditorbarMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,roweditorbar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'roweditorbar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'roweditorbar' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'roweditorbar' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'roweditorbar,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'roweditorbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'roweditorbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'roweditorbar' },
            { name: 'deactivate', parameters: 'oldActiveItem,roweditorbar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'roweditorbar' },
            { name: 'drawershow', parameters: 'roweditorbar' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'roweditorbar' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'roweditorbar,event' },
            { name: 'focusenter', parameters: 'roweditorbar,event' },
            { name: 'focusleave', parameters: 'roweditorbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'roweditorbar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'roweditorbar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'roweditorbar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'roweditorbar,context' },
            { name: 'resizedragcancel', parameters: 'roweditorbar,context' },
            { name: 'resizedragend', parameters: 'roweditorbar,context' },
            { name: 'resizedragstart', parameters: 'roweditorbar,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'roweditorbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        roweditorbarMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return roweditorbarMetaData;
    }());
    var ExtRoweditorbarComponent = /** @class */ (function (_super) {
        __extends(ExtRoweditorbarComponent, _super);
        function ExtRoweditorbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, roweditorbarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtRoweditorbarComponent_1 = ExtRoweditorbarComponent;
        ExtRoweditorbarComponent.prototype.ngOnInit = function () {
            this.baseOnInit(roweditorbarMetaData);
        };
        ExtRoweditorbarComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtRoweditorbarComponent_1;
        ExtRoweditorbarComponent = ExtRoweditorbarComponent_1 = __decorate([
            core.Component({
                selector: 'roweditorbar',
                inputs: roweditorbarMetaData.PROPERTIES,
                outputs: roweditorbarMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtRoweditorbarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtRoweditorbarComponent);
        return ExtRoweditorbarComponent;
    }(base));

    var roweditorcellMetaData = /** @class */ (function () {
        function roweditorcellMetaData() {
        }
        roweditorcellMetaData.XTYPE = 'roweditorcell';
        roweditorcellMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        roweditorcellMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'roweditorcell' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'roweditorcell,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'roweditorcell,event' },
            { name: 'focusenter', parameters: 'roweditorcell,event' },
            { name: 'focusleave', parameters: 'roweditorcell,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'roweditorcell' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        roweditorcellMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return roweditorcellMetaData;
    }());
    var ExtRoweditorcellComponent = /** @class */ (function (_super) {
        __extends(ExtRoweditorcellComponent, _super);
        function ExtRoweditorcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, roweditorcellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtRoweditorcellComponent_1 = ExtRoweditorcellComponent;
        ExtRoweditorcellComponent.prototype.ngOnInit = function () {
            this.baseOnInit(roweditorcellMetaData);
        };
        ExtRoweditorcellComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtRoweditorcellComponent_1;
        ExtRoweditorcellComponent = ExtRoweditorcellComponent_1 = __decorate([
            core.Component({
                selector: 'roweditorcell',
                inputs: roweditorcellMetaData.PROPERTIES,
                outputs: roweditorcellMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtRoweditorcellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtRoweditorcellComponent);
        return ExtRoweditorcellComponent;
    }(base));

    var roweditorMetaData = /** @class */ (function () {
        function roweditorMetaData() {
        }
        roweditorMetaData.XTYPE = 'roweditor';
        roweditorMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'buttonAlign',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataMap',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'owner',
            'ownerListeners',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'recordIndex',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sourceListeners',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'storeListeners',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        roweditorMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,roweditor,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'roweditor,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'roweditor' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'roweditor,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,roweditor,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'roweditor,event' },
            { name: 'focusenter', parameters: 'roweditor,event' },
            { name: 'focusleave', parameters: 'roweditor,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'roweditor,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'roweditor,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'roweditor,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'roweditor' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'dataItem,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        roweditorMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return roweditorMetaData;
    }());
    var ExtRoweditorComponent = /** @class */ (function (_super) {
        __extends(ExtRoweditorComponent, _super);
        function ExtRoweditorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, roweditorMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtRoweditorComponent_1 = ExtRoweditorComponent;
        ExtRoweditorComponent.prototype.ngOnInit = function () {
            this.baseOnInit(roweditorMetaData);
        };
        ExtRoweditorComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtRoweditorComponent_1;
        ExtRoweditorComponent = ExtRoweditorComponent_1 = __decorate([
            core.Component({
                selector: 'roweditor',
                inputs: roweditorMetaData.PROPERTIES,
                outputs: roweditorMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtRoweditorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtRoweditorComponent);
        return ExtRoweditorComponent;
    }(base));

    var roweditorgapMetaData = /** @class */ (function () {
        function roweditorgapMetaData() {
        }
        roweditorgapMetaData.XTYPE = 'roweditorgap';
        roweditorgapMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        roweditorgapMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'roweditorgap' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'roweditorgap,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'roweditorgap,event' },
            { name: 'focusenter', parameters: 'roweditorgap,event' },
            { name: 'focusleave', parameters: 'roweditorgap,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'roweditorgap' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        roweditorgapMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return roweditorgapMetaData;
    }());
    var ExtRoweditorgapComponent = /** @class */ (function (_super) {
        __extends(ExtRoweditorgapComponent, _super);
        function ExtRoweditorgapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, roweditorgapMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtRoweditorgapComponent_1 = ExtRoweditorgapComponent;
        ExtRoweditorgapComponent.prototype.ngOnInit = function () {
            this.baseOnInit(roweditorgapMetaData);
        };
        ExtRoweditorgapComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtRoweditorgapComponent_1;
        ExtRoweditorgapComponent = ExtRoweditorgapComponent_1 = __decorate([
            core.Component({
                selector: 'roweditorgap',
                inputs: roweditorgapMetaData.PROPERTIES,
                outputs: roweditorgapMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtRoweditorgapComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtRoweditorgapComponent);
        return ExtRoweditorgapComponent;
    }(base));

    var rowheaderMetaData = /** @class */ (function () {
        function rowheaderMetaData() {
        }
        rowheaderMetaData.XTYPE = 'rowheader';
        rowheaderMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'group',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        rowheaderMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'rowheader' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'rowheader,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'rowheader,event' },
            { name: 'focusenter', parameters: 'rowheader,event' },
            { name: 'focusleave', parameters: 'rowheader,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'rowheader' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        rowheaderMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return rowheaderMetaData;
    }());
    var ExtRowheaderComponent = /** @class */ (function (_super) {
        __extends(ExtRowheaderComponent, _super);
        function ExtRowheaderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, rowheaderMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtRowheaderComponent_1 = ExtRowheaderComponent;
        ExtRowheaderComponent.prototype.ngOnInit = function () {
            this.baseOnInit(rowheaderMetaData);
        };
        ExtRowheaderComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtRowheaderComponent_1;
        ExtRowheaderComponent = ExtRowheaderComponent_1 = __decorate([
            core.Component({
                selector: 'rowheader',
                inputs: rowheaderMetaData.PROPERTIES,
                outputs: rowheaderMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtRowheaderComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtRowheaderComponent);
        return ExtRowheaderComponent;
    }(base));

    var gridsummaryrowMetaData = /** @class */ (function () {
        function gridsummaryrowMetaData() {
        }
        gridsummaryrowMetaData.XTYPE = 'gridsummaryrow';
        gridsummaryrowMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'body',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultCellUI',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'expandedField',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'recordIndex',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stickyVisibility',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridsummaryrowMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridsummaryrow' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridsummaryrow,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridsummaryrow,event' },
            { name: 'focusenter', parameters: 'gridsummaryrow,event' },
            { name: 'focusleave', parameters: 'gridsummaryrow,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridsummaryrow' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridsummaryrowMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridsummaryrowMetaData;
    }());
    var ExtGridsummaryrowComponent = /** @class */ (function (_super) {
        __extends(ExtGridsummaryrowComponent, _super);
        function ExtGridsummaryrowComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridsummaryrowMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtGridsummaryrowComponent_1 = ExtGridsummaryrowComponent;
        ExtGridsummaryrowComponent.prototype.ngOnInit = function () {
            this.baseOnInit(gridsummaryrowMetaData);
        };
        ExtGridsummaryrowComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtGridsummaryrowComponent_1;
        ExtGridsummaryrowComponent = ExtGridsummaryrowComponent_1 = __decorate([
            core.Component({
                selector: 'gridsummaryrow',
                inputs: gridsummaryrowMetaData.PROPERTIES,
                outputs: gridsummaryrowMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtGridsummaryrowComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtGridsummaryrowComponent);
        return ExtGridsummaryrowComponent;
    }(base));

    var treeMetaData = /** @class */ (function () {
        function treeMetaData() {
        }
        treeMetaData.XTYPE = 'tree';
        treeMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'bufferSize',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'collapseDefaults',
            'collapsible',
            'columnLines',
            'columnMenu',
            'columnResize',
            'columns',
            'columnsMenuItem',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'disclosureProperty',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'enableColumnMove',
            'expanderFirst',
            'expanderOnly',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'folderSort',
            'fullscreen',
            'grouped',
            'groupFooter',
            'groupHeader',
            'grouping',
            'groupPlaceholder',
            'height',
            'hidden',
            'hideAnimation',
            'hideHeaders',
            'hideMode',
            'hideOnMaskTap',
            'hideScrollbar',
            'horizontalOverflow',
            'html',
            'id',
            'inactiveChildTabIndex',
            'indexBar',
            'infinite',
            'inline',
            'innerCls',
            'innerCtHeight',
            'innerWidth',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemConfig',
            'itemContentCls',
            'itemDataMap',
            'itemId',
            'itemInnerCls',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'maintainChildNodes',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxItemCache',
            'maxWidth',
            'minHeight',
            'minimumBufferDistance',
            'minWidth',
            'modal',
            'modelValidation',
            'multiColumnSort',
            'name',
            'nameable',
            'nameHolder',
            'onItemDisclosure',
            'padding',
            'pinFooters',
            'pinHeaders',
            'pinnedFooter',
            'pinnedFooterHeight',
            'pinnedHeader',
            'pinnedHeaderHeight',
            'plugins',
            'pressedDelay',
            'preventSelectionOnDisclose',
            'preventSelectionOnTool',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'right',
            'ripple',
            'rowLines',
            'rowNumbers',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selection',
            'selectOnExpander',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'singleExpand',
            'sortable',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'striped',
            'style',
            'tabIndex',
            'title',
            'titleBar',
            'toFrontOnShow',
            'tooltip',
            'top',
            'topRenderedIndex',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'variableHeights',
            'verticalOverflow',
            'viewModel',
            'visibleHeight',
            'visibleLeft',
            'visibleTop',
            'visibleWidth',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        treeMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,tree,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'tree,checked,current,record,e' },
            { name: 'beforecomplete', parameters: 'editor,value,startValue,The' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeedit', parameters: 'sender,location' },
            { name: 'beforegroupcollapse', parameters: 'tree,group' },
            { name: 'beforegroupexpand', parameters: 'tree,group' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeload', parameters: 'store,operation' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforenodecollapse', parameters: 'node,record' },
            { name: 'beforenodeexpand', parameters: 'row,record' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeselectionextend', parameters: 'grid,An,extension' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestartedit', parameters: 'editor,boundEl,value,The' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'tree' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tree,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'canceledit', parameters: 'editor,value,startValue' },
            { name: 'cellselection', parameters: 'grid,selection' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'cell,checked,record,e' },
            { name: 'childdoubletap', parameters: 'tree,location' },
            { name: 'childlongpress', parameters: 'tree,location' },
            { name: 'childmouseenter', parameters: 'tree,location' },
            { name: 'childmouseleave', parameters: 'tree,location' },
            { name: 'childsingletap', parameters: 'tree,location' },
            { name: 'childtap', parameters: 'tree,location' },
            { name: 'childtaphold', parameters: 'tree,location' },
            { name: 'childtouchcancel', parameters: 'tree,location' },
            { name: 'childtouchend', parameters: 'tree,location' },
            { name: 'childtouchmove', parameters: 'tree,location' },
            { name: 'childtouchstart', parameters: 'tree,location' },
            { name: 'columnadd', parameters: 'tree,column,index' },
            { name: 'columnhide', parameters: 'tree,column' },
            { name: 'columnmenucreated', parameters: 'grid,column,menu' },
            { name: 'columnmove', parameters: 'tree,column,fromIndex,toIndex' },
            { name: 'columnremove', parameters: 'tree,column' },
            { name: 'columnresize', parameters: 'tree,column,width' },
            { name: 'columnselection', parameters: 'grid,selection' },
            { name: 'columnshow', parameters: 'tree,column' },
            { name: 'columnsort', parameters: 'tree,column,direction' },
            { name: 'complete', parameters: 'editor,value,startValue,The' },
            { name: 'deactivate', parameters: 'oldActiveItem,tree,newActiveItem' },
            { name: 'deselect', parameters: 'tree,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'edit', parameters: 'sender,location' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tree,event' },
            { name: 'focusenter', parameters: 'tree,event' },
            { name: 'focusleave', parameters: 'tree,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'groupcollapse', parameters: 'tree,group' },
            { name: 'groupexpand', parameters: 'tree,group' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'tree,index,record,action' },
            { name: 'itemdoubletap', parameters: 'tree,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'tree,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'tree,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'tree,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'tree,index,target,record,e' },
            { name: 'itemswipe', parameters: 'tree,index,target,record,e' },
            { name: 'itemtap', parameters: 'tree,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'tree,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'tree,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'tree,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'tree,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'tree,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'load', parameters: 'tree,records,successful,operation,node' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'tree,to,from' },
            { name: 'nodecollapse', parameters: 'node,record' },
            { name: 'nodeexpand', parameters: 'row,record' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'tree' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'tree,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'tree,selected' },
            { name: 'selectionextenderdrag', parameters: 'grid,An,extension' },
            { name: 'show', parameters: 'sender' },
            { name: 'specialkey', parameters: 'editor,field,event' },
            { name: 'startedit', parameters: 'editor,boundEl,value,The' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'tree' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateedit', parameters: 'sender,location' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        treeMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecheckchange',
            'beforecomplete',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeedit',
            'beforegroupcollapse',
            'beforegroupexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforeload',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforenodecollapse',
            'beforenodeexpand',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeselectionextend',
            'beforeshow',
            'beforestartedit',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'canceledit',
            'cellselection',
            'centeredchange',
            'checkchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'columnadd',
            'columnhide',
            'columnmenucreated',
            'columnmove',
            'columnremove',
            'columnresize',
            'columnselection',
            'columnshow',
            'columnsort',
            'complete',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'disclose',
            'dockedchange',
            'edit',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'groupcollapse',
            'groupexpand',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemaction',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'load',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'nodecollapse',
            'nodeexpand',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'selectionextenderdrag',
            'show',
            'specialkey',
            'startedit',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'validateedit',
            'widthchange',
            'ready'
        ];
        return treeMetaData;
    }());
    var ExtTreeComponent = /** @class */ (function (_super) {
        __extends(ExtTreeComponent, _super);
        function ExtTreeComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, treeMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTreeComponent_1 = ExtTreeComponent;
        ExtTreeComponent.prototype.ngOnInit = function () {
            this.baseOnInit(treeMetaData);
        };
        ExtTreeComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTreeComponent_1;
        ExtTreeComponent = ExtTreeComponent_1 = __decorate([
            core.Component({
                selector: 'tree',
                inputs: treeMetaData.PROPERTIES,
                outputs: treeMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTreeComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTreeComponent);
        return ExtTreeComponent;
    }(base));

    var imageMetaData = /** @class */ (function () {
        function imageMetaData() {
        }
        imageMetaData.XTYPE = 'image';
        imageMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'backgroundCls',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'imageCls',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'mode',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'src',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        imageMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'image' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'image,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'error', parameters: 'image,e' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'image,event' },
            { name: 'focusenter', parameters: 'image,event' },
            { name: 'focusleave', parameters: 'image,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'load', parameters: 'image,e' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'image,e' },
            { name: 'tofront', parameters: 'image' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        imageMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'error',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'load',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return imageMetaData;
    }());
    var ExtImageComponent = /** @class */ (function (_super) {
        __extends(ExtImageComponent, _super);
        function ExtImageComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, imageMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtImageComponent_1 = ExtImageComponent;
        ExtImageComponent.prototype.ngOnInit = function () {
            this.baseOnInit(imageMetaData);
        };
        ExtImageComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtImageComponent_1;
        ExtImageComponent = ExtImageComponent_1 = __decorate([
            core.Component({
                selector: 'image',
                inputs: imageMetaData.PROPERTIES,
                outputs: imageMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtImageComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtImageComponent);
        return ExtImageComponent;
    }(base));

    var imgMetaData = /** @class */ (function () {
        function imgMetaData() {
        }
        imgMetaData.XTYPE = 'img';
        imgMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'backgroundCls',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'imageCls',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'mode',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'src',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        imgMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'image' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'image,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'error', parameters: 'image,e' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'image,event' },
            { name: 'focusenter', parameters: 'image,event' },
            { name: 'focusleave', parameters: 'image,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'load', parameters: 'image,e' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'image,e' },
            { name: 'tofront', parameters: 'image' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        imgMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'error',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'load',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return imgMetaData;
    }());
    var ExtImgComponent = /** @class */ (function (_super) {
        __extends(ExtImgComponent, _super);
        function ExtImgComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, imgMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtImgComponent_1 = ExtImgComponent;
        ExtImgComponent.prototype.ngOnInit = function () {
            this.baseOnInit(imgMetaData);
        };
        ExtImgComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtImgComponent_1;
        ExtImgComponent = ExtImgComponent_1 = __decorate([
            core.Component({
                selector: 'img',
                inputs: imgMetaData.PROPERTIES,
                outputs: imgMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtImgComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtImgComponent);
        return ExtImgComponent;
    }(base));

    var indicatorMetaData = /** @class */ (function () {
        function indicatorMetaData() {
        }
        indicatorMetaData.XTYPE = 'indicator';
        indicatorMetaData.PROPERTIES = [
            'activeIndex',
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'count',
            'data',
            'defaultListenerScope',
            'direction',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tapMode',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        indicatorMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'indicator' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'indicator,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'indicator,event' },
            { name: 'focusenter', parameters: 'indicator,event' },
            { name: 'focusleave', parameters: 'indicator,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'indicatortap', parameters: 'indicator,index,item' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'next', parameters: 'indicator' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'previous', parameters: 'indicator' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'indicator' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        indicatorMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'indicatortap',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'next',
            'orientationchange',
            'painted',
            'positionedchange',
            'previous',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return indicatorMetaData;
    }());
    var ExtIndicatorComponent = /** @class */ (function (_super) {
        __extends(ExtIndicatorComponent, _super);
        function ExtIndicatorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, indicatorMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtIndicatorComponent_1 = ExtIndicatorComponent;
        ExtIndicatorComponent.prototype.ngOnInit = function () {
            this.baseOnInit(indicatorMetaData);
        };
        ExtIndicatorComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtIndicatorComponent_1;
        ExtIndicatorComponent = ExtIndicatorComponent_1 = __decorate([
            core.Component({
                selector: 'indicator',
                inputs: indicatorMetaData.PROPERTIES,
                outputs: indicatorMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtIndicatorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtIndicatorComponent);
        return ExtIndicatorComponent;
    }(base));

    var labelMetaData = /** @class */ (function () {
        function labelMetaData() {
        }
        labelMetaData.XTYPE = 'label';
        labelMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        labelMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'label' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'label,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'label,event' },
            { name: 'focusenter', parameters: 'label,event' },
            { name: 'focusleave', parameters: 'label,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'label' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        labelMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return labelMetaData;
    }());
    var ExtLabelComponent = /** @class */ (function (_super) {
        __extends(ExtLabelComponent, _super);
        function ExtLabelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, labelMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtLabelComponent_1 = ExtLabelComponent;
        ExtLabelComponent.prototype.ngOnInit = function () {
            this.baseOnInit(labelMetaData);
        };
        ExtLabelComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtLabelComponent_1;
        ExtLabelComponent = ExtLabelComponent_1 = __decorate([
            core.Component({
                selector: 'label',
                inputs: labelMetaData.PROPERTIES,
                outputs: labelMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtLabelComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtLabelComponent);
        return ExtLabelComponent;
    }(base));

    var treelistMetaData = /** @class */ (function () {
        function treelistMetaData() {
        }
        treelistMetaData.XTYPE = 'treelist';
        treelistMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'defaults',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'expanderFirst',
            'expanderOnly',
            'flex',
            'floated',
            'floatLeafItems',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightPath',
            'html',
            'id',
            'indent',
            'instanceCls',
            'itemId',
            'itemRipple',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'micro',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selection',
            'selectOnExpander',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'singleExpand',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        treelistMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'treelist' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'treelist,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'treelist,event' },
            { name: 'focusenter', parameters: 'treelist,event' },
            { name: 'focusleave', parameters: 'treelist,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemclick', parameters: 'sender,info' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'selectionchange', parameters: 'treelist,record' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'treelist' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        treelistMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemclick',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'selectionchange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return treelistMetaData;
    }());
    var ExtTreelistComponent = /** @class */ (function (_super) {
        __extends(ExtTreelistComponent, _super);
        function ExtTreelistComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, treelistMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTreelistComponent_1 = ExtTreelistComponent;
        ExtTreelistComponent.prototype.ngOnInit = function () {
            this.baseOnInit(treelistMetaData);
        };
        ExtTreelistComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTreelistComponent_1;
        ExtTreelistComponent = ExtTreelistComponent_1 = __decorate([
            core.Component({
                selector: 'treelist',
                inputs: treelistMetaData.PROPERTIES,
                outputs: treelistMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTreelistComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTreelistComponent);
        return ExtTreelistComponent;
    }(base));

    var treelistitemMetaData = /** @class */ (function () {
        function treelistitemMetaData() {
        }
        treelistitemMetaData.XTYPE = 'treelistitem';
        treelistitemMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'expandable',
            'expanded',
            'flex',
            'floated',
            'focusCls',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'iconClsProperty',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'leaf',
            'listeners',
            'loading',
            'margin',
            'name',
            'nameable',
            'node',
            'over',
            'owner',
            'parentItem',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'rowCls',
            'rowClsProperty',
            'selected',
            'selectedParent',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'text',
            'textProperty',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        treelistitemMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'treelistitem' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'treelistitem,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'treelistitem,event' },
            { name: 'focusenter', parameters: 'treelistitem,event' },
            { name: 'focusleave', parameters: 'treelistitem,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'treelistitem' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        treelistitemMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return treelistitemMetaData;
    }());
    var ExtTreelistitemComponent = /** @class */ (function (_super) {
        __extends(ExtTreelistitemComponent, _super);
        function ExtTreelistitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, treelistitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTreelistitemComponent_1 = ExtTreelistitemComponent;
        ExtTreelistitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit(treelistitemMetaData);
        };
        ExtTreelistitemComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTreelistitemComponent_1;
        ExtTreelistitemComponent = ExtTreelistitemComponent_1 = __decorate([
            core.Component({
                selector: 'treelistitem',
                inputs: treelistitemMetaData.PROPERTIES,
                outputs: treelistitemMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTreelistitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTreelistitemComponent);
        return ExtTreelistitemComponent;
    }(base));

    var loadmaskMetaData = /** @class */ (function () {
        function loadmaskMetaData() {
        }
        loadmaskMetaData.XTYPE = 'loadmask';
        loadmaskMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'indicator',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'message',
            'messageCls',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'transparent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        loadmaskMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'loadmask' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'loadmask,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'loadmask,event' },
            { name: 'focusenter', parameters: 'loadmask,event' },
            { name: 'focusleave', parameters: 'loadmask,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'loadmask,e' },
            { name: 'tofront', parameters: 'loadmask' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        loadmaskMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return loadmaskMetaData;
    }());
    var ExtLoadmaskComponent = /** @class */ (function (_super) {
        __extends(ExtLoadmaskComponent, _super);
        function ExtLoadmaskComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, loadmaskMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtLoadmaskComponent_1 = ExtLoadmaskComponent;
        ExtLoadmaskComponent.prototype.ngOnInit = function () {
            this.baseOnInit(loadmaskMetaData);
        };
        ExtLoadmaskComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtLoadmaskComponent_1;
        ExtLoadmaskComponent = ExtLoadmaskComponent_1 = __decorate([
            core.Component({
                selector: 'loadmask',
                inputs: loadmaskMetaData.PROPERTIES,
                outputs: loadmaskMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtLoadmaskComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtLoadmaskComponent);
        return ExtLoadmaskComponent;
    }(base));

    var maskMetaData = /** @class */ (function () {
        function maskMetaData() {
        }
        maskMetaData.XTYPE = 'mask';
        maskMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'transparent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        maskMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'mask' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'mask,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'mask,event' },
            { name: 'focusenter', parameters: 'mask,event' },
            { name: 'focusleave', parameters: 'mask,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'mask,e' },
            { name: 'tofront', parameters: 'mask' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        maskMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return maskMetaData;
    }());
    var ExtMaskComponent = /** @class */ (function (_super) {
        __extends(ExtMaskComponent, _super);
        function ExtMaskComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, maskMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtMaskComponent_1 = ExtMaskComponent;
        ExtMaskComponent.prototype.ngOnInit = function () {
            this.baseOnInit(maskMetaData);
        };
        ExtMaskComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtMaskComponent_1;
        ExtMaskComponent = ExtMaskComponent_1 = __decorate([
            core.Component({
                selector: 'mask',
                inputs: maskMetaData.PROPERTIES,
                outputs: maskMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtMaskComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtMaskComponent);
        return ExtMaskComponent;
    }(base));

    var mediaMetaData = /** @class */ (function () {
        function mediaMetaData() {
        }
        mediaMetaData.XTYPE = 'media';
        mediaMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoPause',
            'autoResume',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'controls',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'loop',
            'margin',
            'maxHeight',
            'maxWidth',
            'media',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'muted',
            'name',
            'nameable',
            'padding',
            'plugins',
            'preload',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'viewModel',
            'volume',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        mediaMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'media' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'media,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'ended', parameters: 'media,time' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'media,event' },
            { name: 'focusenter', parameters: 'media,event' },
            { name: 'focusleave', parameters: 'media,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'mutedchange', parameters: 'media,muted' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pause', parameters: 'media,time' },
            { name: 'play', parameters: 'media' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'stop', parameters: 'media' },
            { name: 'timeupdate', parameters: 'media,time' },
            { name: 'tofront', parameters: 'media' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'volumechange', parameters: 'media,volume' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        mediaMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'ended',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'mutedchange',
            'orientationchange',
            'painted',
            'pause',
            'play',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'stop',
            'timeupdate',
            'tofront',
            'topchange',
            'updatedata',
            'volumechange',
            'widthchange',
            'ready'
        ];
        return mediaMetaData;
    }());
    var ExtMediaComponent = /** @class */ (function (_super) {
        __extends(ExtMediaComponent, _super);
        function ExtMediaComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, mediaMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtMediaComponent_1 = ExtMediaComponent;
        ExtMediaComponent.prototype.ngOnInit = function () {
            this.baseOnInit(mediaMetaData);
        };
        ExtMediaComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtMediaComponent_1;
        ExtMediaComponent = ExtMediaComponent_1 = __decorate([
            core.Component({
                selector: 'media',
                inputs: mediaMetaData.PROPERTIES,
                outputs: mediaMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtMediaComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtMediaComponent);
        return ExtMediaComponent;
    }(base));

    var menucheckitemMetaData = /** @class */ (function () {
        function menucheckitemMetaData() {
        }
        menucheckitemMetaData.XTYPE = 'menucheckitem';
        menucheckitemMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'checkChangeDisabled',
            'checked',
            'checkHandler',
            'clickHideDelay',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnClick',
            'hideOnMaskTap',
            'href',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'indented',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submenuText',
            'tabIndex',
            'target',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        menucheckitemMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'menucheckitem,checked' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'menucheckitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menucheckitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'menucheckitem,checked' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'menucheckitem,event' },
            { name: 'focusenter', parameters: 'menucheckitem,event' },
            { name: 'focusleave', parameters: 'menucheckitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'menucheckitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        menucheckitemMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecheckchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'checkchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return menucheckitemMetaData;
    }());
    var ExtMenucheckitemComponent = /** @class */ (function (_super) {
        __extends(ExtMenucheckitemComponent, _super);
        function ExtMenucheckitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, menucheckitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtMenucheckitemComponent_1 = ExtMenucheckitemComponent;
        ExtMenucheckitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit(menucheckitemMetaData);
        };
        ExtMenucheckitemComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtMenucheckitemComponent_1;
        ExtMenucheckitemComponent = ExtMenucheckitemComponent_1 = __decorate([
            core.Component({
                selector: 'menucheckitem',
                inputs: menucheckitemMetaData.PROPERTIES,
                outputs: menucheckitemMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtMenucheckitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtMenucheckitemComponent);
        return ExtMenucheckitemComponent;
    }(base));

    var menuitemMetaData = /** @class */ (function () {
        function menuitemMetaData() {
        }
        menuitemMetaData.XTYPE = 'menuitem';
        menuitemMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clickHideDelay',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnClick',
            'hideOnMaskTap',
            'href',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'indented',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'target',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        menuitemMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'menuitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menuitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'menuitem,event' },
            { name: 'focusenter', parameters: 'menuitem,event' },
            { name: 'focusleave', parameters: 'menuitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'menuitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        menuitemMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return menuitemMetaData;
    }());
    var ExtMenuitemComponent = /** @class */ (function (_super) {
        __extends(ExtMenuitemComponent, _super);
        function ExtMenuitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, menuitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtMenuitemComponent_1 = ExtMenuitemComponent;
        ExtMenuitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit(menuitemMetaData);
        };
        ExtMenuitemComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtMenuitemComponent_1;
        ExtMenuitemComponent = ExtMenuitemComponent_1 = __decorate([
            core.Component({
                selector: 'menuitem',
                inputs: menuitemMetaData.PROPERTIES,
                outputs: menuitemMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtMenuitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtMenuitemComponent);
        return ExtMenuitemComponent;
    }(base));

    var menuMetaData = /** @class */ (function () {
        function menuMetaData() {
        }
        menuMetaData.XTYPE = 'menu';
        menuMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'allowOtherMenus',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoHide',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'groups',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'ignoreParentClicks',
            'inactiveChildTabIndex',
            'indented',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'mouseLeaveDelay',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        menuMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,menu,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'menu,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'menu' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'menu' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'menu,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'menu' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menu,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'menu' },
            { name: 'deactivate', parameters: 'oldActiveItem,menu,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'menu' },
            { name: 'drawershow', parameters: 'menu' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'menu' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'menu,event' },
            { name: 'focusenter', parameters: 'menu,event' },
            { name: 'focusleave', parameters: 'menu,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'groupchange', parameters: 'menu,groupName,newValue,oldValue' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'menu,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'menu,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'menu,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'menu,context' },
            { name: 'resizedragcancel', parameters: 'menu,context' },
            { name: 'resizedragend', parameters: 'menu,context' },
            { name: 'resizedragstart', parameters: 'menu,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'menu' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        menuMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'groupchange',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return menuMetaData;
    }());
    var ExtMenuComponent = /** @class */ (function (_super) {
        __extends(ExtMenuComponent, _super);
        function ExtMenuComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, menuMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtMenuComponent_1 = ExtMenuComponent;
        ExtMenuComponent.prototype.ngOnInit = function () {
            this.baseOnInit(menuMetaData);
        };
        ExtMenuComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtMenuComponent_1;
        ExtMenuComponent = ExtMenuComponent_1 = __decorate([
            core.Component({
                selector: 'menu',
                inputs: menuMetaData.PROPERTIES,
                outputs: menuMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtMenuComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtMenuComponent);
        return ExtMenuComponent;
    }(base));

    var menuradioitemMetaData = /** @class */ (function () {
        function menuradioitemMetaData() {
        }
        menuradioitemMetaData.XTYPE = 'menuradioitem';
        menuradioitemMetaData.PROPERTIES = [
            'alignSelf',
            'allowUncheck',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'checkChangeDisabled',
            'checked',
            'checkHandler',
            'clickHideDelay',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'group',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnClick',
            'hideOnMaskTap',
            'href',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'indented',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submenuText',
            'tabIndex',
            'target',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        menuradioitemMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'menuradioitem,checked' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'menuradioitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menuradioitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'menuradioitem,checked' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'menuradioitem,event' },
            { name: 'focusenter', parameters: 'menuradioitem,event' },
            { name: 'focusleave', parameters: 'menuradioitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'menuradioitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        menuradioitemMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecheckchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'checkchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return menuradioitemMetaData;
    }());
    var ExtMenuradioitemComponent = /** @class */ (function (_super) {
        __extends(ExtMenuradioitemComponent, _super);
        function ExtMenuradioitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, menuradioitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtMenuradioitemComponent_1 = ExtMenuradioitemComponent;
        ExtMenuradioitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit(menuradioitemMetaData);
        };
        ExtMenuradioitemComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtMenuradioitemComponent_1;
        ExtMenuradioitemComponent = ExtMenuradioitemComponent_1 = __decorate([
            core.Component({
                selector: 'menuradioitem',
                inputs: menuradioitemMetaData.PROPERTIES,
                outputs: menuradioitemMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtMenuradioitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtMenuradioitemComponent);
        return ExtMenuradioitemComponent;
    }(base));

    var menuseparatorMetaData = /** @class */ (function () {
        function menuseparatorMetaData() {
        }
        menuseparatorMetaData.XTYPE = 'menuseparator';
        menuseparatorMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        menuseparatorMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'menuseparator' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menuseparator,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'menuseparator,event' },
            { name: 'focusenter', parameters: 'menuseparator,event' },
            { name: 'focusleave', parameters: 'menuseparator,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'menuseparator' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        menuseparatorMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return menuseparatorMetaData;
    }());
    var ExtMenuseparatorComponent = /** @class */ (function (_super) {
        __extends(ExtMenuseparatorComponent, _super);
        function ExtMenuseparatorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, menuseparatorMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtMenuseparatorComponent_1 = ExtMenuseparatorComponent;
        ExtMenuseparatorComponent.prototype.ngOnInit = function () {
            this.baseOnInit(menuseparatorMetaData);
        };
        ExtMenuseparatorComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtMenuseparatorComponent_1;
        ExtMenuseparatorComponent = ExtMenuseparatorComponent_1 = __decorate([
            core.Component({
                selector: 'menuseparator',
                inputs: menuseparatorMetaData.PROPERTIES,
                outputs: menuseparatorMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtMenuseparatorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtMenuseparatorComponent);
        return ExtMenuseparatorComponent;
    }(base));

    var messageboxMetaData = /** @class */ (function () {
        function messageboxMetaData() {
        }
        messageboxMetaData.XTYPE = 'messagebox';
        messageboxMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'constrainDrag',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultTextHeight',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'dismissAction',
            'dismissHandler',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maskTapHandler',
            'maxHeight',
            'maximizable',
            'maximizeAnimation',
            'maximized',
            'maximizeProxy',
            'maximizeTool',
            'maxWidth',
            'message',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'msg',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'prompt',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'restorable',
            'restoreAnimation',
            'restoreTool',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        messageboxMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,messagebox,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'messagebox,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'messagebox' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'messagebox' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaximize', parameters: 'dialog' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'messagebox,context' },
            { name: 'beforerestore', parameters: 'dialog' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'messagebox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'messagebox,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'messagebox' },
            { name: 'deactivate', parameters: 'oldActiveItem,messagebox,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'messagebox' },
            { name: 'drawershow', parameters: 'messagebox' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'messagebox' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'messagebox,event' },
            { name: 'focusenter', parameters: 'messagebox,event' },
            { name: 'focusleave', parameters: 'messagebox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maximize', parameters: 'dialog' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'messagebox,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'messagebox,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'messagebox,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'messagebox,context' },
            { name: 'resizedragcancel', parameters: 'messagebox,context' },
            { name: 'resizedragend', parameters: 'messagebox,context' },
            { name: 'resizedragstart', parameters: 'messagebox,context' },
            { name: 'restore', parameters: 'dialog' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'messagebox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        messageboxMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaximize',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerestore',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maximize',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'restore',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return messageboxMetaData;
    }());
    var ExtMessageboxComponent = /** @class */ (function (_super) {
        __extends(ExtMessageboxComponent, _super);
        function ExtMessageboxComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, messageboxMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtMessageboxComponent_1 = ExtMessageboxComponent;
        ExtMessageboxComponent.prototype.ngOnInit = function () {
            this.baseOnInit(messageboxMetaData);
        };
        ExtMessageboxComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtMessageboxComponent_1;
        ExtMessageboxComponent = ExtMessageboxComponent_1 = __decorate([
            core.Component({
                selector: 'messagebox',
                inputs: messageboxMetaData.PROPERTIES,
                outputs: messageboxMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtMessageboxComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtMessageboxComponent);
        return ExtMessageboxComponent;
    }(base));

    var navigationviewMetaData = /** @class */ (function () {
        function navigationviewMetaData() {
        }
        navigationviewMetaData.XTYPE = 'navigationview';
        navigationviewMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultBackButtonText',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'navigationBar',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'useTitleForBackButtonText',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        navigationviewMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,navigationview,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'navigationview,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'back', parameters: 'navigationview' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'navigationview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'navigationview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,navigationview,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'navigationview,event' },
            { name: 'focusenter', parameters: 'navigationview,event' },
            { name: 'focusleave', parameters: 'navigationview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'navigationview,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pop', parameters: 'navigationview,view' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'push', parameters: 'navigationview,view' },
            { name: 'remove', parameters: 'navigationview,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'navigationview,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'navigationview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        navigationviewMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'back',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'pop',
            'positionedchange',
            'push',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return navigationviewMetaData;
    }());
    var ExtNavigationviewComponent = /** @class */ (function (_super) {
        __extends(ExtNavigationviewComponent, _super);
        function ExtNavigationviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, navigationviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtNavigationviewComponent_1 = ExtNavigationviewComponent;
        ExtNavigationviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit(navigationviewMetaData);
        };
        ExtNavigationviewComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtNavigationviewComponent_1;
        ExtNavigationviewComponent = ExtNavigationviewComponent_1 = __decorate([
            core.Component({
                selector: 'navigationview',
                inputs: navigationviewMetaData.PROPERTIES,
                outputs: navigationviewMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtNavigationviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtNavigationviewComponent);
        return ExtNavigationviewComponent;
    }(base));

    var panelMetaData = /** @class */ (function () {
        function panelMetaData() {
        }
        panelMetaData.XTYPE = 'panel';
        panelMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        panelMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,panel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'panel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'panel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'panel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'panel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'panel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'panel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'panel' },
            { name: 'deactivate', parameters: 'oldActiveItem,panel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'panel' },
            { name: 'drawershow', parameters: 'panel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'panel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'panel,event' },
            { name: 'focusenter', parameters: 'panel,event' },
            { name: 'focusleave', parameters: 'panel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'panel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'panel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'panel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'panel,context' },
            { name: 'resizedragcancel', parameters: 'panel,context' },
            { name: 'resizedragend', parameters: 'panel,context' },
            { name: 'resizedragstart', parameters: 'panel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'panel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        panelMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return panelMetaData;
    }());
    var ExtPanelComponent = /** @class */ (function (_super) {
        __extends(ExtPanelComponent, _super);
        function ExtPanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, panelMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPanelComponent_1 = ExtPanelComponent;
        ExtPanelComponent.prototype.ngOnInit = function () {
            this.baseOnInit(panelMetaData);
        };
        ExtPanelComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPanelComponent_1;
        ExtPanelComponent = ExtPanelComponent_1 = __decorate([
            core.Component({
                selector: 'panel',
                inputs: panelMetaData.PROPERTIES,
                outputs: panelMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPanelComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPanelComponent);
        return ExtPanelComponent;
    }(base));

    var accordionMetaData = /** @class */ (function () {
        function accordionMetaData() {
        }
        accordionMetaData.XTYPE = 'accordion';
        accordionMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaultPanelUI',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'expandedFirst',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'openable',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        accordionMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,accordion,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'accordion,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'accordion' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'accordion' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'accordion,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'accordion' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'accordion,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'accordion' },
            { name: 'deactivate', parameters: 'oldActiveItem,accordion,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'accordion' },
            { name: 'drawershow', parameters: 'accordion' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'accordion' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'accordion,event' },
            { name: 'focusenter', parameters: 'accordion,event' },
            { name: 'focusleave', parameters: 'accordion,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'accordion,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'accordion,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'accordion,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'accordion,context' },
            { name: 'resizedragcancel', parameters: 'accordion,context' },
            { name: 'resizedragend', parameters: 'accordion,context' },
            { name: 'resizedragstart', parameters: 'accordion,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'accordion' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        accordionMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return accordionMetaData;
    }());
    var ExtAccordionComponent = /** @class */ (function (_super) {
        __extends(ExtAccordionComponent, _super);
        function ExtAccordionComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, accordionMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtAccordionComponent_1 = ExtAccordionComponent;
        ExtAccordionComponent.prototype.ngOnInit = function () {
            this.baseOnInit(accordionMetaData);
        };
        ExtAccordionComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtAccordionComponent_1;
        ExtAccordionComponent = ExtAccordionComponent_1 = __decorate([
            core.Component({
                selector: 'accordion',
                inputs: accordionMetaData.PROPERTIES,
                outputs: accordionMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtAccordionComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtAccordionComponent);
        return ExtAccordionComponent;
    }(base));

    var datepanelMetaData = /** @class */ (function () {
        function datepanelMetaData() {
        }
        datepanelMetaData.XTYPE = 'datepanel';
        datepanelMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoConfirm',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'captionFormat',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dateCellFormat',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'disabledDates',
            'disabledDays',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusableDate',
            'focusCls',
            'format',
            'fullscreen',
            'handler',
            'header',
            'headerFormat',
            'headerLength',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideCaptions',
            'hideMode',
            'hideOnMaskTap',
            'hideOutside',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxDate',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minDate',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'navigationPosition',
            'nextText',
            'padding',
            'panes',
            'plugins',
            'prevText',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selectOnNavigate',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAfterMaxDate',
            'showAnimation',
            'showBeforeMinDate',
            'showFooter',
            'showTodayButton',
            'specialDates',
            'specialDays',
            'splitTitle',
            'standardButtons',
            'startDay',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleAnimation',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transformCellCls',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weekendDays',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'yearPicker',
            'yearPickerDefaults',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datepanelMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,datepanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'datepanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'datepanel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'datepanel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'datepanel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datepanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datepanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'datepanel' },
            { name: 'deactivate', parameters: 'oldActiveItem,datepanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'datepanel' },
            { name: 'drawershow', parameters: 'datepanel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'datepanel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datepanel,event' },
            { name: 'focusenter', parameters: 'datepanel,event' },
            { name: 'focusleave', parameters: 'datepanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'datepanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'datepanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'datepanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'datepanel,context' },
            { name: 'resizedragcancel', parameters: 'datepanel,context' },
            { name: 'resizedragend', parameters: 'datepanel,context' },
            { name: 'resizedragstart', parameters: 'datepanel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datepanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datepanelMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return datepanelMetaData;
    }());
    var ExtDatepanelComponent = /** @class */ (function (_super) {
        __extends(ExtDatepanelComponent, _super);
        function ExtDatepanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datepanelMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtDatepanelComponent_1 = ExtDatepanelComponent;
        ExtDatepanelComponent.prototype.ngOnInit = function () {
            this.baseOnInit(datepanelMetaData);
        };
        ExtDatepanelComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtDatepanelComponent_1;
        ExtDatepanelComponent = ExtDatepanelComponent_1 = __decorate([
            core.Component({
                selector: 'datepanel',
                inputs: datepanelMetaData.PROPERTIES,
                outputs: datepanelMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtDatepanelComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtDatepanelComponent);
        return ExtDatepanelComponent;
    }(base));

    var datetitleMetaData = /** @class */ (function () {
        function datetitleMetaData() {
        }
        datetitleMetaData.XTYPE = 'datetitle';
        datetitleMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'glyph',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'rotateIcon',
            'rotation',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'text',
            'textAlign',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datetitleMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datetitle' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datetitle,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datetitle,event' },
            { name: 'focusenter', parameters: 'datetitle,event' },
            { name: 'focusleave', parameters: 'datetitle,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datetitle' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datetitleMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return datetitleMetaData;
    }());
    var ExtDatetitleComponent = /** @class */ (function (_super) {
        __extends(ExtDatetitleComponent, _super);
        function ExtDatetitleComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datetitleMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtDatetitleComponent_1 = ExtDatetitleComponent;
        ExtDatetitleComponent.prototype.ngOnInit = function () {
            this.baseOnInit(datetitleMetaData);
        };
        ExtDatetitleComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtDatetitleComponent_1;
        ExtDatetitleComponent = ExtDatetitleComponent_1 = __decorate([
            core.Component({
                selector: 'datetitle',
                inputs: datetitleMetaData.PROPERTIES,
                outputs: datetitleMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtDatetitleComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtDatetitleComponent);
        return ExtDatetitleComponent;
    }(base));

    var panelheaderMetaData = /** @class */ (function () {
        function panelheaderMetaData() {
        }
        panelheaderMetaData.XTYPE = 'panelheader';
        panelheaderMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'glyph',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'position',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'title',
            'titleAlign',
            'titleRotation',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        panelheaderMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,panelheader,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'panelheader,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'panelheader' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'panelheader,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,panelheader,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'panelheader,event' },
            { name: 'focusenter', parameters: 'panelheader,event' },
            { name: 'focusleave', parameters: 'panelheader,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'panelheader,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'panelheader,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'panelheader,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'panelheader' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        panelheaderMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return panelheaderMetaData;
    }());
    var ExtPanelheaderComponent = /** @class */ (function (_super) {
        __extends(ExtPanelheaderComponent, _super);
        function ExtPanelheaderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, panelheaderMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPanelheaderComponent_1 = ExtPanelheaderComponent;
        ExtPanelheaderComponent.prototype.ngOnInit = function () {
            this.baseOnInit(panelheaderMetaData);
        };
        ExtPanelheaderComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPanelheaderComponent_1;
        ExtPanelheaderComponent = ExtPanelheaderComponent_1 = __decorate([
            core.Component({
                selector: 'panelheader',
                inputs: panelheaderMetaData.PROPERTIES,
                outputs: panelheaderMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPanelheaderComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPanelheaderComponent);
        return ExtPanelheaderComponent;
    }(base));

    var timepanelMetaData = /** @class */ (function () {
        function timepanelMetaData() {
        }
        timepanelMetaData.XTYPE = 'timepanel';
        timepanelMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignPMInside',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoAdvance',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'confirmable',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'declineHandler',
            'defaultButtons',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'handler',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hourDisplayFormat',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'meridiem',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'mode',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'vertical',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        timepanelMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,timepanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'timepanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'timepanel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'timepanel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'timepanel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'timepanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'timepanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'timepanel' },
            { name: 'deactivate', parameters: 'oldActiveItem,timepanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'timepanel' },
            { name: 'drawershow', parameters: 'timepanel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'timepanel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'timepanel,event' },
            { name: 'focusenter', parameters: 'timepanel,event' },
            { name: 'focusleave', parameters: 'timepanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'timepanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'timepanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'timepanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'timepanel,context' },
            { name: 'resizedragcancel', parameters: 'timepanel,context' },
            { name: 'resizedragend', parameters: 'timepanel,context' },
            { name: 'resizedragstart', parameters: 'timepanel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'timepanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        timepanelMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return timepanelMetaData;
    }());
    var ExtTimepanelComponent = /** @class */ (function (_super) {
        __extends(ExtTimepanelComponent, _super);
        function ExtTimepanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, timepanelMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTimepanelComponent_1 = ExtTimepanelComponent;
        ExtTimepanelComponent.prototype.ngOnInit = function () {
            this.baseOnInit(timepanelMetaData);
        };
        ExtTimepanelComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTimepanelComponent_1;
        ExtTimepanelComponent = ExtTimepanelComponent_1 = __decorate([
            core.Component({
                selector: 'timepanel',
                inputs: timepanelMetaData.PROPERTIES,
                outputs: timepanelMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTimepanelComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTimepanelComponent);
        return ExtTimepanelComponent;
    }(base));

    var paneltitleMetaData = /** @class */ (function () {
        function paneltitleMetaData() {
        }
        paneltitleMetaData.XTYPE = 'paneltitle';
        paneltitleMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'glyph',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'rotateIcon',
            'rotation',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'text',
            'textAlign',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        paneltitleMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'paneltitle' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'paneltitle,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'paneltitle,event' },
            { name: 'focusenter', parameters: 'paneltitle,event' },
            { name: 'focusleave', parameters: 'paneltitle,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'paneltitle' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        paneltitleMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return paneltitleMetaData;
    }());
    var ExtPaneltitleComponent = /** @class */ (function (_super) {
        __extends(ExtPaneltitleComponent, _super);
        function ExtPaneltitleComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, paneltitleMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPaneltitleComponent_1 = ExtPaneltitleComponent;
        ExtPaneltitleComponent.prototype.ngOnInit = function () {
            this.baseOnInit(paneltitleMetaData);
        };
        ExtPaneltitleComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPaneltitleComponent_1;
        ExtPaneltitleComponent = ExtPaneltitleComponent_1 = __decorate([
            core.Component({
                selector: 'paneltitle',
                inputs: paneltitleMetaData.PROPERTIES,
                outputs: paneltitleMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPaneltitleComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPaneltitleComponent);
        return ExtPaneltitleComponent;
    }(base));

    var yearpickerMetaData = /** @class */ (function () {
        function yearpickerMetaData() {
        }
        yearpickerMetaData.XTYPE = 'yearpicker';
        yearpickerMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'bufferSize',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'collapseDefaults',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'disclosureProperty',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'grouped',
            'groupFooter',
            'groupHeader',
            'grouping',
            'groupPlaceholder',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'horizontalOverflow',
            'html',
            'id',
            'inactiveChildTabIndex',
            'indexBar',
            'infinite',
            'inline',
            'innerCls',
            'innerCtHeight',
            'innerWidth',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemConfig',
            'itemContentCls',
            'itemDataMap',
            'itemId',
            'itemInnerCls',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'maintainChildNodes',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxItemCache',
            'maxWidth',
            'minHeight',
            'minimumBufferDistance',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'onItemDisclosure',
            'padding',
            'pinFooters',
            'pinHeaders',
            'pinnedFooter',
            'pinnedFooterHeight',
            'pinnedHeader',
            'pinnedHeaderHeight',
            'plugins',
            'pressedDelay',
            'preventSelectionOnDisclose',
            'preventSelectionOnTool',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'rowLines',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'striped',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'topRenderedIndex',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'variableHeights',
            'verticalOverflow',
            'viewModel',
            'visibleHeight',
            'visibleLeft',
            'visibleTop',
            'visibleWidth',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        yearpickerMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,yearpicker,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforegroupcollapse', parameters: 'yearpicker,group' },
            { name: 'beforegroupexpand', parameters: 'yearpicker,group' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'yearpicker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'yearpicker,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'yearpicker,location' },
            { name: 'childlongpress', parameters: 'yearpicker,location' },
            { name: 'childmouseenter', parameters: 'yearpicker,location' },
            { name: 'childmouseleave', parameters: 'yearpicker,location' },
            { name: 'childsingletap', parameters: 'yearpicker,location' },
            { name: 'childtap', parameters: 'yearpicker,location' },
            { name: 'childtaphold', parameters: 'yearpicker,location' },
            { name: 'childtouchcancel', parameters: 'yearpicker,location' },
            { name: 'childtouchend', parameters: 'yearpicker,location' },
            { name: 'childtouchmove', parameters: 'yearpicker,location' },
            { name: 'childtouchstart', parameters: 'yearpicker,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,yearpicker,newActiveItem' },
            { name: 'deselect', parameters: 'yearpicker,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'yearpicker,event' },
            { name: 'focusenter', parameters: 'yearpicker,event' },
            { name: 'focusleave', parameters: 'yearpicker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'groupcollapse', parameters: 'yearpicker,group' },
            { name: 'groupexpand', parameters: 'yearpicker,group' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'yearpicker,index,record,action' },
            { name: 'itemdoubletap', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemswipe', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtap', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'yearpicker,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'yearpicker,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'yearpicker' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'yearpicker,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'yearpicker,selected' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'yearpicker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        yearpickerMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforegroupcollapse',
            'beforegroupexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'disclose',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'groupcollapse',
            'groupexpand',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemaction',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return yearpickerMetaData;
    }());
    var ExtYearpickerComponent = /** @class */ (function (_super) {
        __extends(ExtYearpickerComponent, _super);
        function ExtYearpickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, yearpickerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtYearpickerComponent_1 = ExtYearpickerComponent;
        ExtYearpickerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(yearpickerMetaData);
        };
        ExtYearpickerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtYearpickerComponent_1;
        ExtYearpickerComponent = ExtYearpickerComponent_1 = __decorate([
            core.Component({
                selector: 'yearpicker',
                inputs: yearpickerMetaData.PROPERTIES,
                outputs: yearpickerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtYearpickerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtYearpickerComponent);
        return ExtYearpickerComponent;
    }(base));

    var datepickerMetaData = /** @class */ (function () {
        function datepickerMetaData() {
        }
        datepickerMetaData.XTYPE = 'datepicker';
        datepickerMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cancelButton',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'cover',
            'data',
            'dayText',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'doneButton',
            'draggable',
            'enter',
            'exit',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'monthText',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'reveal',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'side',
            'slotOrder',
            'slots',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchX',
            'stretchY',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolbar',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'useTitles',
            'value',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'yearFrom',
            'yearText',
            'yearTo',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datepickerMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,datepicker,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'datepicker,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'datepicker' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'datepicker' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'datepicker,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datepicker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datepicker,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'datepicker' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'datepicker,value' },
            { name: 'collapse', parameters: 'datepicker' },
            { name: 'deactivate', parameters: 'oldActiveItem,datepicker,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'datepicker' },
            { name: 'drawershow', parameters: 'datepicker' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'datepicker' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datepicker,event' },
            { name: 'focusenter', parameters: 'datepicker,event' },
            { name: 'focusleave', parameters: 'datepicker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'datepicker,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pick', parameters: 'datepicker,values,slot' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'datepicker,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'datepicker,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'datepicker,context' },
            { name: 'resizedragcancel', parameters: 'datepicker,context' },
            { name: 'resizedragend', parameters: 'datepicker,context' },
            { name: 'resizedragstart', parameters: 'datepicker,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datepicker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datepickerMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'cancel',
            'centeredchange',
            'change',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'pick',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return datepickerMetaData;
    }());
    var ExtDatepickerComponent = /** @class */ (function (_super) {
        __extends(ExtDatepickerComponent, _super);
        function ExtDatepickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datepickerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtDatepickerComponent_1 = ExtDatepickerComponent;
        ExtDatepickerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(datepickerMetaData);
        };
        ExtDatepickerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtDatepickerComponent_1;
        ExtDatepickerComponent = ExtDatepickerComponent_1 = __decorate([
            core.Component({
                selector: 'datepicker',
                inputs: datepickerMetaData.PROPERTIES,
                outputs: datepickerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtDatepickerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtDatepickerComponent);
        return ExtDatepickerComponent;
    }(base));

    var pickerMetaData = /** @class */ (function () {
        function pickerMetaData() {
        }
        pickerMetaData.XTYPE = 'picker';
        pickerMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cancelButton',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'cover',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'doneButton',
            'draggable',
            'enter',
            'exit',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'reveal',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'side',
            'slots',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchX',
            'stretchY',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolbar',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'useTitles',
            'value',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pickerMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,picker,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'picker,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'picker' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'picker' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'picker,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'picker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'picker,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'picker' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'picker,values' },
            { name: 'collapse', parameters: 'picker' },
            { name: 'deactivate', parameters: 'oldActiveItem,picker,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'picker' },
            { name: 'drawershow', parameters: 'picker' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'picker' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'picker,event' },
            { name: 'focusenter', parameters: 'picker,event' },
            { name: 'focusleave', parameters: 'picker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'picker,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pick', parameters: 'picker,values,slot' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'picker,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'picker,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'picker,context' },
            { name: 'resizedragcancel', parameters: 'picker,context' },
            { name: 'resizedragend', parameters: 'picker,context' },
            { name: 'resizedragstart', parameters: 'picker,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'picker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pickerMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'cancel',
            'centeredchange',
            'change',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'pick',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pickerMetaData;
    }());
    var ExtPickerComponent = /** @class */ (function (_super) {
        __extends(ExtPickerComponent, _super);
        function ExtPickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pickerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPickerComponent_1 = ExtPickerComponent;
        ExtPickerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pickerMetaData);
        };
        ExtPickerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPickerComponent_1;
        ExtPickerComponent = ExtPickerComponent_1 = __decorate([
            core.Component({
                selector: 'picker',
                inputs: pickerMetaData.PROPERTIES,
                outputs: pickerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPickerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPickerComponent);
        return ExtPickerComponent;
    }(base));

    var selectpickerMetaData = /** @class */ (function () {
        function selectpickerMetaData() {
        }
        selectpickerMetaData.XTYPE = 'selectpicker';
        selectpickerMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cancelButton',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'cover',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'doneButton',
            'draggable',
            'enter',
            'exit',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'reveal',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'side',
            'slots',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchX',
            'stretchY',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolbar',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'useTitles',
            'value',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        selectpickerMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,selectpicker,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'selectpicker,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'selectpicker' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'selectpicker' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'selectpicker,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'selectpicker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'selectpicker,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'selectpicker' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'selectpicker,values' },
            { name: 'collapse', parameters: 'selectpicker' },
            { name: 'deactivate', parameters: 'oldActiveItem,selectpicker,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'selectpicker' },
            { name: 'drawershow', parameters: 'selectpicker' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'selectpicker' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'selectpicker,event' },
            { name: 'focusenter', parameters: 'selectpicker,event' },
            { name: 'focusleave', parameters: 'selectpicker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'selectpicker,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pick', parameters: 'selectpicker,values,slot' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'selectpicker,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'selectpicker,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'selectpicker,context' },
            { name: 'resizedragcancel', parameters: 'selectpicker,context' },
            { name: 'resizedragend', parameters: 'selectpicker,context' },
            { name: 'resizedragstart', parameters: 'selectpicker,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'selectpicker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        selectpickerMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'cancel',
            'centeredchange',
            'change',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'pick',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return selectpickerMetaData;
    }());
    var ExtSelectpickerComponent = /** @class */ (function (_super) {
        __extends(ExtSelectpickerComponent, _super);
        function ExtSelectpickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, selectpickerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSelectpickerComponent_1 = ExtSelectpickerComponent;
        ExtSelectpickerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(selectpickerMetaData);
        };
        ExtSelectpickerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSelectpickerComponent_1;
        ExtSelectpickerComponent = ExtSelectpickerComponent_1 = __decorate([
            core.Component({
                selector: 'selectpicker',
                inputs: selectpickerMetaData.PROPERTIES,
                outputs: selectpickerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSelectpickerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSelectpickerComponent);
        return ExtSelectpickerComponent;
    }(base));

    var pickerslotMetaData = /** @class */ (function () {
        function pickerslotMetaData() {
        }
        pickerslotMetaData.XTYPE = 'pickerslot';
        pickerslotMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'displayed',
            'displayField',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'inline',
            'innerCls',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemId',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'lastSelected',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selected',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showTitle',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'title',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'valueField',
            'verticallyCenterItems',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pickerslotMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pickerslot,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'pickerslot' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pickerslot,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'pickerslot,location' },
            { name: 'childlongpress', parameters: 'pickerslot,location' },
            { name: 'childmouseenter', parameters: 'pickerslot,location' },
            { name: 'childmouseleave', parameters: 'pickerslot,location' },
            { name: 'childsingletap', parameters: 'pickerslot,location' },
            { name: 'childtap', parameters: 'pickerslot,location' },
            { name: 'childtaphold', parameters: 'pickerslot,location' },
            { name: 'childtouchcancel', parameters: 'pickerslot,location' },
            { name: 'childtouchend', parameters: 'pickerslot,location' },
            { name: 'childtouchmove', parameters: 'pickerslot,location' },
            { name: 'childtouchstart', parameters: 'pickerslot,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,pickerslot,newActiveItem' },
            { name: 'deselect', parameters: 'pickerslot,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pickerslot,event' },
            { name: 'focusenter', parameters: 'pickerslot,event' },
            { name: 'focusleave', parameters: 'pickerslot,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemswipe', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtap', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'pickerslot,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'pickerslot,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'pickerslot' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pickerslot,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'pickerslot,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'slotpick', parameters: 'pickerslot,value,node' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'pickerslot' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pickerslotMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'rowselection',
            'scrollablechange',
            'select',
            'selectionchange',
            'show',
            'slotpick',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pickerslotMetaData;
    }());
    var ExtPickerslotComponent = /** @class */ (function (_super) {
        __extends(ExtPickerslotComponent, _super);
        function ExtPickerslotComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pickerslotMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPickerslotComponent_1 = ExtPickerslotComponent;
        ExtPickerslotComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pickerslotMetaData);
        };
        ExtPickerslotComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPickerslotComponent_1;
        ExtPickerslotComponent = ExtPickerslotComponent_1 = __decorate([
            core.Component({
                selector: 'pickerslot',
                inputs: pickerslotMetaData.PROPERTIES,
                outputs: pickerslotMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPickerslotComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPickerslotComponent);
        return ExtPickerslotComponent;
    }(base));

    var tabletpickerMetaData = /** @class */ (function () {
        function tabletpickerMetaData() {
        }
        tabletpickerMetaData.XTYPE = 'tabletpicker';
        tabletpickerMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        tabletpickerMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,tabletpicker,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'tabletpicker,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'tabletpicker' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'tabletpicker' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'tabletpicker,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tabletpicker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tabletpicker,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'tabletpicker' },
            { name: 'deactivate', parameters: 'oldActiveItem,tabletpicker,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'tabletpicker' },
            { name: 'drawershow', parameters: 'tabletpicker' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'tabletpicker' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tabletpicker,event' },
            { name: 'focusenter', parameters: 'tabletpicker,event' },
            { name: 'focusleave', parameters: 'tabletpicker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'tabletpicker,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'tabletpicker,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'tabletpicker,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'tabletpicker,context' },
            { name: 'resizedragcancel', parameters: 'tabletpicker,context' },
            { name: 'resizedragend', parameters: 'tabletpicker,context' },
            { name: 'resizedragstart', parameters: 'tabletpicker,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'tabletpicker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        tabletpickerMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return tabletpickerMetaData;
    }());
    var ExtTabletpickerComponent = /** @class */ (function (_super) {
        __extends(ExtTabletpickerComponent, _super);
        function ExtTabletpickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, tabletpickerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTabletpickerComponent_1 = ExtTabletpickerComponent;
        ExtTabletpickerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(tabletpickerMetaData);
        };
        ExtTabletpickerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTabletpickerComponent_1;
        ExtTabletpickerComponent = ExtTabletpickerComponent_1 = __decorate([
            core.Component({
                selector: 'tabletpicker',
                inputs: tabletpickerMetaData.PROPERTIES,
                outputs: tabletpickerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTabletpickerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTabletpickerComponent);
        return ExtTabletpickerComponent;
    }(base));

    var pivotgridcellMetaData = /** @class */ (function () {
        function pivotgridcellMetaData() {
        }
        pivotgridcellMetaData.XTYPE = 'pivotgridcell';
        pivotgridcellMetaData.PROPERTIES = [
            'align',
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'flex',
            'floated',
            'focusCls',
            'formatter',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderer',
            'renderTo',
            'ripple',
            'scope',
            'selectable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'tpl',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotgridcellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'pivotgridcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotgridcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'pivotgridcell,event' },
            { name: 'focusenter', parameters: 'pivotgridcell,event' },
            { name: 'focusleave', parameters: 'pivotgridcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'pivotgridcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotgridcellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return pivotgridcellMetaData;
    }());
    var ExtPivotgridcellComponent = /** @class */ (function (_super) {
        __extends(ExtPivotgridcellComponent, _super);
        function ExtPivotgridcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotgridcellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPivotgridcellComponent_1 = ExtPivotgridcellComponent;
        ExtPivotgridcellComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pivotgridcellMetaData);
        };
        ExtPivotgridcellComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPivotgridcellComponent_1;
        ExtPivotgridcellComponent = ExtPivotgridcellComponent_1 = __decorate([
            core.Component({
                selector: 'pivotgridcell',
                inputs: pivotgridcellMetaData.PROPERTIES,
                outputs: pivotgridcellMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPivotgridcellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPivotgridcellComponent);
        return ExtPivotgridcellComponent;
    }(base));

    var pivotgridgroupcellMetaData = /** @class */ (function () {
        function pivotgridgroupcellMetaData() {
        }
        pivotgridgroupcellMetaData.XTYPE = 'pivotgridgroupcell';
        pivotgridgroupcellMetaData.PROPERTIES = [
            'align',
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'flex',
            'floated',
            'focusCls',
            'formatter',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderer',
            'renderTo',
            'ripple',
            'scope',
            'selectable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'tpl',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotgridgroupcellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'pivotgridgroupcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotgridgroupcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'pivotgridgroupcell,event' },
            { name: 'focusenter', parameters: 'pivotgridgroupcell,event' },
            { name: 'focusleave', parameters: 'pivotgridgroupcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'pivotgridgroupcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotgridgroupcellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return pivotgridgroupcellMetaData;
    }());
    var ExtPivotgridgroupcellComponent = /** @class */ (function (_super) {
        __extends(ExtPivotgridgroupcellComponent, _super);
        function ExtPivotgridgroupcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotgridgroupcellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPivotgridgroupcellComponent_1 = ExtPivotgridgroupcellComponent;
        ExtPivotgridgroupcellComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pivotgridgroupcellMetaData);
        };
        ExtPivotgridgroupcellComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPivotgridgroupcellComponent_1;
        ExtPivotgridgroupcellComponent = ExtPivotgridgroupcellComponent_1 = __decorate([
            core.Component({
                selector: 'pivotgridgroupcell',
                inputs: pivotgridgroupcellMetaData.PROPERTIES,
                outputs: pivotgridgroupcellMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPivotgridgroupcellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPivotgridgroupcellComponent);
        return ExtPivotgridgroupcellComponent;
    }(base));

    var pivotd3containerMetaData = /** @class */ (function () {
        function pivotd3containerMetaData() {
        }
        pivotd3containerMetaData.XTYPE = 'pivotd3container';
        pivotd3containerMetaData.PROPERTIES = [
            'configurator',
            'drawing',
            'matrix',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotd3containerMetaData.EVENTS = [
            { name: 'ready', parameters: '' }
        ];
        pivotd3containerMetaData.EVENTNAMES = [
            'ready'
        ];
        return pivotd3containerMetaData;
    }());
    var ExtPivotd3containerComponent = /** @class */ (function (_super) {
        __extends(ExtPivotd3containerComponent, _super);
        function ExtPivotd3containerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotd3containerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPivotd3containerComponent_1 = ExtPivotd3containerComponent;
        ExtPivotd3containerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pivotd3containerMetaData);
        };
        ExtPivotd3containerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPivotd3containerComponent_1;
        ExtPivotd3containerComponent = ExtPivotd3containerComponent_1 = __decorate([
            core.Component({
                selector: 'pivotd3container',
                inputs: pivotd3containerMetaData.PROPERTIES,
                outputs: pivotd3containerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPivotd3containerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPivotd3containerComponent);
        return ExtPivotd3containerComponent;
    }(base));

    var pivotheatmapMetaData = /** @class */ (function () {
        function pivotheatmapMetaData() {
        }
        pivotheatmapMetaData.XTYPE = 'pivotheatmap';
        pivotheatmapMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultFormatter',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'labels',
            'left',
            'legend',
            'listeners',
            'margin',
            'matrix',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tiles',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xAxis',
            'xtype',
            'y',
            'yAxis',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotheatmapMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivotheatmap' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotheatmap,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotheatmap,event' },
            { name: 'focusenter', parameters: 'pivotheatmap,event' },
            { name: 'focusleave', parameters: 'pivotheatmap,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivotheatmap' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotheatmapMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotheatmapMetaData;
    }());
    var ExtPivotheatmapComponent = /** @class */ (function (_super) {
        __extends(ExtPivotheatmapComponent, _super);
        function ExtPivotheatmapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotheatmapMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPivotheatmapComponent_1 = ExtPivotheatmapComponent;
        ExtPivotheatmapComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pivotheatmapMetaData);
        };
        ExtPivotheatmapComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPivotheatmapComponent_1;
        ExtPivotheatmapComponent = ExtPivotheatmapComponent_1 = __decorate([
            core.Component({
                selector: 'pivotheatmap',
                inputs: pivotheatmapMetaData.PROPERTIES,
                outputs: pivotheatmapMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPivotheatmapComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPivotheatmapComponent);
        return ExtPivotheatmapComponent;
    }(base));

    var pivottreemapMetaData = /** @class */ (function () {
        function pivottreemapMetaData() {
        }
        pivottreemapMetaData.XTYPE = 'pivottreemap';
        pivottreemapMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoExpand',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'busyLayoutText',
            'centered',
            'clipScene',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'expandEventName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hierarchyCls',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'leafTile',
            'left',
            'linkKey',
            'listeners',
            'margin',
            'matrix',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nodeChildren',
            'nodeClass',
            'nodeKey',
            'nodeText',
            'nodeTransform',
            'nodeValue',
            'noParentValue',
            'noSizeLayout',
            'padding',
            'parentTile',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderLinks',
            'renderTo',
            'right',
            'ripple',
            'rootVisible',
            'scaleLabels',
            'scrollable',
            'selectEventName',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tiling',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivottreemapMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivottreemap' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivottreemap,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivottreemap,event' },
            { name: 'focusenter', parameters: 'pivottreemap,event' },
            { name: 'focusleave', parameters: 'pivottreemap,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivottreemap' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivottreemapMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivottreemapMetaData;
    }());
    var ExtPivottreemapComponent = /** @class */ (function (_super) {
        __extends(ExtPivottreemapComponent, _super);
        function ExtPivottreemapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivottreemapMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPivottreemapComponent_1 = ExtPivottreemapComponent;
        ExtPivottreemapComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pivottreemapMetaData);
        };
        ExtPivottreemapComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPivottreemapComponent_1;
        ExtPivottreemapComponent = ExtPivottreemapComponent_1 = __decorate([
            core.Component({
                selector: 'pivottreemap',
                inputs: pivottreemapMetaData.PROPERTIES,
                outputs: pivottreemapMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPivottreemapComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPivottreemapComponent);
        return ExtPivottreemapComponent;
    }(base));

    var pivotgridMetaData = /** @class */ (function () {
        function pivotgridMetaData() {
        }
        pivotgridMetaData.XTYPE = 'pivotgrid';
        pivotgridMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'bufferSize',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'clsGrandTotal',
            'clsGroupTotal',
            'collapseDefaults',
            'collapsible',
            'columnLines',
            'columnMenu',
            'columnResize',
            'columns',
            'columnsMenuItem',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'disclosureProperty',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'enableColumnMove',
            'enableColumnSort',
            'enableLoadMask',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'grouped',
            'groupFooter',
            'groupHeader',
            'grouping',
            'groupPlaceholder',
            'height',
            'hidden',
            'hideAnimation',
            'hideHeaders',
            'hideMode',
            'hideOnMaskTap',
            'hideScrollbar',
            'horizontalOverflow',
            'html',
            'id',
            'inactiveChildTabIndex',
            'indexBar',
            'infinite',
            'inline',
            'innerCls',
            'innerCtHeight',
            'innerWidth',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemConfig',
            'itemContentCls',
            'itemDataMap',
            'itemId',
            'itemInnerCls',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'leftAxisCellConfig',
            'listeners',
            'loadingHeight',
            'loadingText',
            'maintainChildNodes',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'matrix',
            'maxHeight',
            'maxItemCache',
            'maxWidth',
            'minHeight',
            'minimumBufferDistance',
            'minWidth',
            'modal',
            'modelValidation',
            'multiColumnSort',
            'name',
            'nameable',
            'nameHolder',
            'onItemDisclosure',
            'padding',
            'pinFooters',
            'pinHeaders',
            'pinnedFooter',
            'pinnedFooterHeight',
            'pinnedHeader',
            'pinnedHeaderHeight',
            'plugins',
            'pressedDelay',
            'preventSelectionOnDisclose',
            'preventSelectionOnTool',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'right',
            'ripple',
            'rowLines',
            'rowNumbers',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selection',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'startColGroupsCollapsed',
            'startRowGroupsCollapsed',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'striped',
            'style',
            'tabIndex',
            'title',
            'titleBar',
            'toFrontOnShow',
            'tooltip',
            'top',
            'topAxisCellConfig',
            'topRenderedIndex',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'variableHeights',
            'verticalOverflow',
            'viewModel',
            'visibleHeight',
            'visibleLeft',
            'visibleTop',
            'visibleWidth',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotgridMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotgrid,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecomplete', parameters: 'editor,value,startValue,The' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeedit', parameters: 'sender,location' },
            { name: 'beforegroupcollapse', parameters: 'pivotgrid,group' },
            { name: 'beforegroupexpand', parameters: 'pivotgrid,group' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeselectionextend', parameters: 'grid,An,extension' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestartedit', parameters: 'editor,boundEl,value,The' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'pivotgrid' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotgrid,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'canceledit', parameters: 'editor,value,startValue' },
            { name: 'cellselection', parameters: 'grid,selection' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'pivotgrid,location' },
            { name: 'childlongpress', parameters: 'pivotgrid,location' },
            { name: 'childmouseenter', parameters: 'pivotgrid,location' },
            { name: 'childmouseleave', parameters: 'pivotgrid,location' },
            { name: 'childsingletap', parameters: 'pivotgrid,location' },
            { name: 'childtap', parameters: 'pivotgrid,location' },
            { name: 'childtaphold', parameters: 'pivotgrid,location' },
            { name: 'childtouchcancel', parameters: 'pivotgrid,location' },
            { name: 'childtouchend', parameters: 'pivotgrid,location' },
            { name: 'childtouchmove', parameters: 'pivotgrid,location' },
            { name: 'childtouchstart', parameters: 'pivotgrid,location' },
            { name: 'columnadd', parameters: 'pivotgrid,column,index' },
            { name: 'columnhide', parameters: 'pivotgrid,column' },
            { name: 'columnmenucreated', parameters: 'grid,column,menu' },
            { name: 'columnmove', parameters: 'pivotgrid,column,fromIndex,toIndex' },
            { name: 'columnremove', parameters: 'pivotgrid,column' },
            { name: 'columnresize', parameters: 'pivotgrid,column,width' },
            { name: 'columnselection', parameters: 'grid,selection' },
            { name: 'columnshow', parameters: 'pivotgrid,column' },
            { name: 'columnsort', parameters: 'pivotgrid,column,direction' },
            { name: 'complete', parameters: 'editor,value,startValue,The' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotgrid,newActiveItem' },
            { name: 'deselect', parameters: 'pivotgrid,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'edit', parameters: 'sender,location' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotgrid,event' },
            { name: 'focusenter', parameters: 'pivotgrid,event' },
            { name: 'focusleave', parameters: 'pivotgrid,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'groupcollapse', parameters: 'pivotgrid,group' },
            { name: 'groupexpand', parameters: 'pivotgrid,group' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'pivotgrid,index,record,action' },
            { name: 'itemdoubletap', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemswipe', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtap', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'pivotgrid,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pivotbeforereconfigure', parameters: 'matrix,config' },
            { name: 'pivotbeforerequest', parameters: 'matrix,params' },
            { name: 'pivotbuildtotals', parameters: 'matrix,totals' },
            { name: 'pivotcolumnsbuilt', parameters: 'matrix,columns' },
            { name: 'pivotdone', parameters: 'matrix' },
            { name: 'pivotgroupcelldoubletap', parameters: 'params,e' },
            { name: 'pivotgroupcelltap', parameters: 'params,e' },
            { name: 'pivotgroupcelltaphold', parameters: 'params,e' },
            { name: 'pivotgroupcollapse', parameters: 'matrix,type,group' },
            { name: 'pivotgroupdoubletap', parameters: 'params,e' },
            { name: 'pivotgroupexpand', parameters: 'matrix,type,group' },
            { name: 'pivotgrouptap', parameters: 'params,e' },
            { name: 'pivotgrouptaphold', parameters: 'params,e' },
            { name: 'pivotitemcelldoubletap', parameters: 'params,e' },
            { name: 'pivotitemcelltap', parameters: 'params,e' },
            { name: 'pivotitemcelltaphold', parameters: 'params,e' },
            { name: 'pivotitemdoubletap', parameters: 'params,e' },
            { name: 'pivotitemtap', parameters: 'params,e' },
            { name: 'pivotitemtaphold', parameters: 'params,e' },
            { name: 'pivotmodelbuilt', parameters: 'matrix,model' },
            { name: 'pivotprogress', parameters: 'matrix,index,total' },
            { name: 'pivotreconfigure', parameters: 'matrix,config' },
            { name: 'pivotrecordbuilt', parameters: 'matrix,record' },
            { name: 'pivotrequestexception', parameters: 'matrix,response' },
            { name: 'pivotstart', parameters: 'matrix' },
            { name: 'pivotstorebuilt', parameters: 'matrix,store' },
            { name: 'pivottotalcelldoubletap', parameters: 'params,e' },
            { name: 'pivottotalcelltap', parameters: 'params,e' },
            { name: 'pivottotalcelltaphold', parameters: 'params,e' },
            { name: 'pivottotaldoubletap', parameters: 'params,e' },
            { name: 'pivottotaltap', parameters: 'params,e' },
            { name: 'pivottotaltaphold', parameters: 'params,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'pivotgrid' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotgrid,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'pivotgrid,selected' },
            { name: 'selectionextenderdrag', parameters: 'grid,An,extension' },
            { name: 'show', parameters: 'sender' },
            { name: 'specialkey', parameters: 'editor,field,event' },
            { name: 'startedit', parameters: 'editor,boundEl,value,The' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'pivotgrid' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateedit', parameters: 'sender,location' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotgridMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecomplete',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeedit',
            'beforegroupcollapse',
            'beforegroupexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeselectionextend',
            'beforeshow',
            'beforestartedit',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'canceledit',
            'cellselection',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'columnadd',
            'columnhide',
            'columnmenucreated',
            'columnmove',
            'columnremove',
            'columnresize',
            'columnselection',
            'columnshow',
            'columnsort',
            'complete',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'disclose',
            'dockedchange',
            'edit',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'groupcollapse',
            'groupexpand',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemaction',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'pivotbeforereconfigure',
            'pivotbeforerequest',
            'pivotbuildtotals',
            'pivotcolumnsbuilt',
            'pivotdone',
            'pivotgroupcelldoubletap',
            'pivotgroupcelltap',
            'pivotgroupcelltaphold',
            'pivotgroupcollapse',
            'pivotgroupdoubletap',
            'pivotgroupexpand',
            'pivotgrouptap',
            'pivotgrouptaphold',
            'pivotitemcelldoubletap',
            'pivotitemcelltap',
            'pivotitemcelltaphold',
            'pivotitemdoubletap',
            'pivotitemtap',
            'pivotitemtaphold',
            'pivotmodelbuilt',
            'pivotprogress',
            'pivotreconfigure',
            'pivotrecordbuilt',
            'pivotrequestexception',
            'pivotstart',
            'pivotstorebuilt',
            'pivottotalcelldoubletap',
            'pivottotalcelltap',
            'pivottotalcelltaphold',
            'pivottotaldoubletap',
            'pivottotaltap',
            'pivottotaltaphold',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'selectionextenderdrag',
            'show',
            'specialkey',
            'startedit',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'validateedit',
            'widthchange',
            'ready'
        ];
        return pivotgridMetaData;
    }());
    var ExtPivotgridComponent = /** @class */ (function (_super) {
        __extends(ExtPivotgridComponent, _super);
        function ExtPivotgridComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotgridMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPivotgridComponent_1 = ExtPivotgridComponent;
        ExtPivotgridComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pivotgridMetaData);
        };
        ExtPivotgridComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPivotgridComponent_1;
        ExtPivotgridComponent = ExtPivotgridComponent_1 = __decorate([
            core.Component({
                selector: 'pivotgrid',
                inputs: pivotgridMetaData.PROPERTIES,
                outputs: pivotgridMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPivotgridComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPivotgridComponent);
        return ExtPivotgridComponent;
    }(base));

    var pivotconfigfieldMetaData = /** @class */ (function () {
        function pivotconfigfieldMetaData() {
        }
        pivotconfigfieldMetaData.XTYPE = 'pivotconfigfield';
        pivotconfigfieldMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataMap',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'recordIndex',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotconfigfieldMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotconfigfield,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotconfigfield,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivotconfigfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotconfigfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotconfigfield,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotconfigfield,event' },
            { name: 'focusenter', parameters: 'pivotconfigfield,event' },
            { name: 'focusleave', parameters: 'pivotconfigfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotconfigfield,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotconfigfield,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotconfigfield,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivotconfigfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'dataItem,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotconfigfieldMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotconfigfieldMetaData;
    }());
    var ExtPivotconfigfieldComponent = /** @class */ (function (_super) {
        __extends(ExtPivotconfigfieldComponent, _super);
        function ExtPivotconfigfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotconfigfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPivotconfigfieldComponent_1 = ExtPivotconfigfieldComponent;
        ExtPivotconfigfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pivotconfigfieldMetaData);
        };
        ExtPivotconfigfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPivotconfigfieldComponent_1;
        ExtPivotconfigfieldComponent = ExtPivotconfigfieldComponent_1 = __decorate([
            core.Component({
                selector: 'pivotconfigfield',
                inputs: pivotconfigfieldMetaData.PROPERTIES,
                outputs: pivotconfigfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPivotconfigfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPivotconfigfieldComponent);
        return ExtPivotconfigfieldComponent;
    }(base));

    var pivotconfigcontainerMetaData = /** @class */ (function () {
        function pivotconfigcontainerMetaData() {
        }
        pivotconfigcontainerMetaData.XTYPE = 'pivotconfigcontainer';
        pivotconfigcontainerMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'fieldType',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotconfigcontainerMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotconfigcontainer,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotconfigcontainer,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'pivotconfigcontainer' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'pivotconfigcontainer' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'pivotconfigcontainer,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivotconfigcontainer' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotconfigcontainer,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'pivotconfigcontainer' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotconfigcontainer,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'pivotconfigcontainer' },
            { name: 'drawershow', parameters: 'pivotconfigcontainer' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'pivotconfigcontainer' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotconfigcontainer,event' },
            { name: 'focusenter', parameters: 'pivotconfigcontainer,event' },
            { name: 'focusleave', parameters: 'pivotconfigcontainer,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotconfigcontainer,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotconfigcontainer,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotconfigcontainer,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'pivotconfigcontainer,context' },
            { name: 'resizedragcancel', parameters: 'pivotconfigcontainer,context' },
            { name: 'resizedragend', parameters: 'pivotconfigcontainer,context' },
            { name: 'resizedragstart', parameters: 'pivotconfigcontainer,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivotconfigcontainer' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotconfigcontainerMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotconfigcontainerMetaData;
    }());
    var ExtPivotconfigcontainerComponent = /** @class */ (function (_super) {
        __extends(ExtPivotconfigcontainerComponent, _super);
        function ExtPivotconfigcontainerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotconfigcontainerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPivotconfigcontainerComponent_1 = ExtPivotconfigcontainerComponent;
        ExtPivotconfigcontainerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pivotconfigcontainerMetaData);
        };
        ExtPivotconfigcontainerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPivotconfigcontainerComponent_1;
        ExtPivotconfigcontainerComponent = ExtPivotconfigcontainerComponent_1 = __decorate([
            core.Component({
                selector: 'pivotconfigcontainer',
                inputs: pivotconfigcontainerMetaData.PROPERTIES,
                outputs: pivotconfigcontainerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPivotconfigcontainerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPivotconfigcontainerComponent);
        return ExtPivotconfigcontainerComponent;
    }(base));

    var pivotconfigformMetaData = /** @class */ (function () {
        function pivotconfigformMetaData() {
        }
        pivotconfigformMetaData.XTYPE = 'pivotconfigform';
        pivotconfigformMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'api',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'baseParams',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'bubbleDirty',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableSubmissionForm',
            'enctype',
            'fieldDefaults',
            'fieldSeparators',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'inputBorders',
            'instanceCls',
            'itemId',
            'items',
            'jsonSubmit',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'method',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multipartDetection',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'paramOrder',
            'paramsAsHash',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'standardSubmit',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submitOnAction',
            'tabIndex',
            'tbar',
            'timeout',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackResetOnLoad',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotconfigformMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotconfigform,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotconfigform,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'pivotconfigform' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'pivotconfigform' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'pivotconfigform,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'pivotconfigform,values,options,e' },
            { name: 'beforetofront', parameters: 'pivotconfigform' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotconfigform,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'pivotconfigform' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotconfigform,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'pivotconfigform,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'pivotconfigform' },
            { name: 'drawershow', parameters: 'pivotconfigform' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'pivotconfigform,result' },
            { name: 'expand', parameters: 'pivotconfigform' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotconfigform,event' },
            { name: 'focusenter', parameters: 'pivotconfigform,event' },
            { name: 'focusleave', parameters: 'pivotconfigform,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotconfigform,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotconfigform,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotconfigform,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'pivotconfigform,context' },
            { name: 'resizedragcancel', parameters: 'pivotconfigform,context' },
            { name: 'resizedragend', parameters: 'pivotconfigform,context' },
            { name: 'resizedragstart', parameters: 'pivotconfigform,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'pivotconfigform,result,e' },
            { name: 'tofront', parameters: 'pivotconfigform' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotconfigformMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforesubmit',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'exception',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'submit',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotconfigformMetaData;
    }());
    var ExtPivotconfigformComponent = /** @class */ (function (_super) {
        __extends(ExtPivotconfigformComponent, _super);
        function ExtPivotconfigformComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotconfigformMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPivotconfigformComponent_1 = ExtPivotconfigformComponent;
        ExtPivotconfigformComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pivotconfigformMetaData);
        };
        ExtPivotconfigformComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPivotconfigformComponent_1;
        ExtPivotconfigformComponent = ExtPivotconfigformComponent_1 = __decorate([
            core.Component({
                selector: 'pivotconfigform',
                inputs: pivotconfigformMetaData.PROPERTIES,
                outputs: pivotconfigformMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPivotconfigformComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPivotconfigformComponent);
        return ExtPivotconfigformComponent;
    }(base));

    var pivotconfigpanelMetaData = /** @class */ (function () {
        function pivotconfigpanelMetaData() {
        }
        pivotconfigpanelMetaData.XTYPE = 'pivotconfigpanel';
        pivotconfigpanelMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'panelAggFieldsText',
            'panelAggFieldsTitle',
            'panelAllFieldsText',
            'panelAllFieldsTitle',
            'panelLeftFieldsText',
            'panelLeftFieldsTitle',
            'panelTopFieldsText',
            'panelTopFieldsTitle',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotconfigpanelMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotconfigpanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotconfigpanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'pivotconfigpanel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'pivotconfigpanel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'pivotconfigpanel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivotconfigpanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotconfigpanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'pivotconfigpanel' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotconfigpanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'pivotconfigpanel' },
            { name: 'drawershow', parameters: 'pivotconfigpanel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'pivotconfigpanel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotconfigpanel,event' },
            { name: 'focusenter', parameters: 'pivotconfigpanel,event' },
            { name: 'focusleave', parameters: 'pivotconfigpanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotconfigpanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotconfigpanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotconfigpanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'pivotconfigpanel,context' },
            { name: 'resizedragcancel', parameters: 'pivotconfigpanel,context' },
            { name: 'resizedragend', parameters: 'pivotconfigpanel,context' },
            { name: 'resizedragstart', parameters: 'pivotconfigpanel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivotconfigpanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotconfigpanelMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotconfigpanelMetaData;
    }());
    var ExtPivotconfigpanelComponent = /** @class */ (function (_super) {
        __extends(ExtPivotconfigpanelComponent, _super);
        function ExtPivotconfigpanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotconfigpanelMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPivotconfigpanelComponent_1 = ExtPivotconfigpanelComponent;
        ExtPivotconfigpanelComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pivotconfigpanelMetaData);
        };
        ExtPivotconfigpanelComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPivotconfigpanelComponent_1;
        ExtPivotconfigpanelComponent = ExtPivotconfigpanelComponent_1 = __decorate([
            core.Component({
                selector: 'pivotconfigpanel',
                inputs: pivotconfigpanelMetaData.PROPERTIES,
                outputs: pivotconfigpanelMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPivotconfigpanelComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPivotconfigpanelComponent);
        return ExtPivotconfigpanelComponent;
    }(base));

    var pivotsettingsMetaData = /** @class */ (function () {
        function pivotsettingsMetaData() {
        }
        pivotsettingsMetaData.XTYPE = 'pivotsettings';
        pivotsettingsMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'api',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'baseParams',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'bubbleDirty',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableSubmissionForm',
            'enctype',
            'fieldDefaults',
            'fieldSeparators',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'inputBorders',
            'instanceCls',
            'itemId',
            'items',
            'jsonSubmit',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'method',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multipartDetection',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'paramOrder',
            'paramsAsHash',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'standardSubmit',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submitOnAction',
            'tabIndex',
            'tbar',
            'timeout',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackResetOnLoad',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotsettingsMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotsettings,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotsettings,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'pivotsettings' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'pivotsettings' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'pivotsettings,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'pivotsettings,values,options,e' },
            { name: 'beforetofront', parameters: 'pivotsettings' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotsettings,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'pivotsettings' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotsettings,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'pivotsettings,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'pivotsettings' },
            { name: 'drawershow', parameters: 'pivotsettings' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'pivotsettings,result' },
            { name: 'expand', parameters: 'pivotsettings' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotsettings,event' },
            { name: 'focusenter', parameters: 'pivotsettings,event' },
            { name: 'focusleave', parameters: 'pivotsettings,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotsettings,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotsettings,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotsettings,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'pivotsettings,context' },
            { name: 'resizedragcancel', parameters: 'pivotsettings,context' },
            { name: 'resizedragend', parameters: 'pivotsettings,context' },
            { name: 'resizedragstart', parameters: 'pivotsettings,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'pivotsettings,result,e' },
            { name: 'tofront', parameters: 'pivotsettings' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotsettingsMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforesubmit',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'exception',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'submit',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotsettingsMetaData;
    }());
    var ExtPivotsettingsComponent = /** @class */ (function (_super) {
        __extends(ExtPivotsettingsComponent, _super);
        function ExtPivotsettingsComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotsettingsMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPivotsettingsComponent_1 = ExtPivotsettingsComponent;
        ExtPivotsettingsComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pivotsettingsMetaData);
        };
        ExtPivotsettingsComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPivotsettingsComponent_1;
        ExtPivotsettingsComponent = ExtPivotsettingsComponent_1 = __decorate([
            core.Component({
                selector: 'pivotsettings',
                inputs: pivotsettingsMetaData.PROPERTIES,
                outputs: pivotsettingsMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPivotsettingsComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPivotsettingsComponent);
        return ExtPivotsettingsComponent;
    }(base));

    var pivotrangeeditorMetaData = /** @class */ (function () {
        function pivotrangeeditorMetaData() {
        }
        pivotrangeeditorMetaData.XTYPE = 'pivotrangeeditor';
        pivotrangeeditorMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'api',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'baseParams',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'bubbleDirty',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableSubmissionForm',
            'enctype',
            'fieldDefaults',
            'fieldSeparators',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'inputBorders',
            'instanceCls',
            'itemId',
            'items',
            'jsonSubmit',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'method',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multipartDetection',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'paramOrder',
            'paramsAsHash',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'standardSubmit',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submitOnAction',
            'tabIndex',
            'tbar',
            'timeout',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackResetOnLoad',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotrangeeditorMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotrangeeditor,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotrangeeditor,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'pivotrangeeditor' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'pivotrangeeditor' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'pivotrangeeditor,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'pivotrangeeditor,values,options,e' },
            { name: 'beforetofront', parameters: 'pivotrangeeditor' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotrangeeditor,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'pivotrangeeditor' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotrangeeditor,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'pivotrangeeditor,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'pivotrangeeditor' },
            { name: 'drawershow', parameters: 'pivotrangeeditor' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'pivotrangeeditor,result' },
            { name: 'expand', parameters: 'pivotrangeeditor' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotrangeeditor,event' },
            { name: 'focusenter', parameters: 'pivotrangeeditor,event' },
            { name: 'focusleave', parameters: 'pivotrangeeditor,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotrangeeditor,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotrangeeditor,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotrangeeditor,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'pivotrangeeditor,context' },
            { name: 'resizedragcancel', parameters: 'pivotrangeeditor,context' },
            { name: 'resizedragend', parameters: 'pivotrangeeditor,context' },
            { name: 'resizedragstart', parameters: 'pivotrangeeditor,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'pivotrangeeditor,result,e' },
            { name: 'tofront', parameters: 'pivotrangeeditor' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotrangeeditorMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforesubmit',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'exception',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'submit',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotrangeeditorMetaData;
    }());
    var ExtPivotrangeeditorComponent = /** @class */ (function (_super) {
        __extends(ExtPivotrangeeditorComponent, _super);
        function ExtPivotrangeeditorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotrangeeditorMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPivotrangeeditorComponent_1 = ExtPivotrangeeditorComponent;
        ExtPivotrangeeditorComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pivotrangeeditorMetaData);
        };
        ExtPivotrangeeditorComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPivotrangeeditorComponent_1;
        ExtPivotrangeeditorComponent = ExtPivotrangeeditorComponent_1 = __decorate([
            core.Component({
                selector: 'pivotrangeeditor',
                inputs: pivotrangeeditorMetaData.PROPERTIES,
                outputs: pivotrangeeditorMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPivotrangeeditorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPivotrangeeditorComponent);
        return ExtPivotrangeeditorComponent;
    }(base));

    var pivotgridrowMetaData = /** @class */ (function () {
        function pivotgridrowMetaData() {
        }
        pivotgridrowMetaData.XTYPE = 'pivotgridrow';
        pivotgridrowMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'body',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultCellUI',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'expandedField',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'recordIndex',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stickyVisibility',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotgridrowMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivotgridrow' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotgridrow,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotgridrow,event' },
            { name: 'focusenter', parameters: 'pivotgridrow,event' },
            { name: 'focusleave', parameters: 'pivotgridrow,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivotgridrow' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotgridrowMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotgridrowMetaData;
    }());
    var ExtPivotgridrowComponent = /** @class */ (function (_super) {
        __extends(ExtPivotgridrowComponent, _super);
        function ExtPivotgridrowComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotgridrowMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPivotgridrowComponent_1 = ExtPivotgridrowComponent;
        ExtPivotgridrowComponent.prototype.ngOnInit = function () {
            this.baseOnInit(pivotgridrowMetaData);
        };
        ExtPivotgridrowComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPivotgridrowComponent_1;
        ExtPivotgridrowComponent = ExtPivotgridrowComponent_1 = __decorate([
            core.Component({
                selector: 'pivotgridrow',
                inputs: pivotgridrowMetaData.PROPERTIES,
                outputs: pivotgridrowMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPivotgridrowComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPivotgridrowComponent);
        return ExtPivotgridrowComponent;
    }(base));

    var progressMetaData = /** @class */ (function () {
        function progressMetaData() {
        }
        progressMetaData.XTYPE = 'progress';
        progressMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'animate',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'text',
            'textTpl',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        progressMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'progress' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'progress,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'progress,event' },
            { name: 'focusenter', parameters: 'progress,event' },
            { name: 'focusleave', parameters: 'progress,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'progress' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        progressMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return progressMetaData;
    }());
    var ExtProgressComponent = /** @class */ (function (_super) {
        __extends(ExtProgressComponent, _super);
        function ExtProgressComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, progressMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtProgressComponent_1 = ExtProgressComponent;
        ExtProgressComponent.prototype.ngOnInit = function () {
            this.baseOnInit(progressMetaData);
        };
        ExtProgressComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtProgressComponent_1;
        ExtProgressComponent = ExtProgressComponent_1 = __decorate([
            core.Component({
                selector: 'progress',
                inputs: progressMetaData.PROPERTIES,
                outputs: progressMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtProgressComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtProgressComponent);
        return ExtProgressComponent;
    }(base));

    var progressbarwidgetMetaData = /** @class */ (function () {
        function progressbarwidgetMetaData() {
        }
        progressbarwidgetMetaData.XTYPE = 'progressbarwidget';
        progressbarwidgetMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'animate',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'text',
            'textTpl',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        progressbarwidgetMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'progress' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'progress,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'progress,event' },
            { name: 'focusenter', parameters: 'progress,event' },
            { name: 'focusleave', parameters: 'progress,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'progress' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        progressbarwidgetMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return progressbarwidgetMetaData;
    }());
    var ExtProgressbarwidgetComponent = /** @class */ (function (_super) {
        __extends(ExtProgressbarwidgetComponent, _super);
        function ExtProgressbarwidgetComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, progressbarwidgetMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtProgressbarwidgetComponent_1 = ExtProgressbarwidgetComponent;
        ExtProgressbarwidgetComponent.prototype.ngOnInit = function () {
            this.baseOnInit(progressbarwidgetMetaData);
        };
        ExtProgressbarwidgetComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtProgressbarwidgetComponent_1;
        ExtProgressbarwidgetComponent = ExtProgressbarwidgetComponent_1 = __decorate([
            core.Component({
                selector: 'progressbarwidget',
                inputs: progressbarwidgetMetaData.PROPERTIES,
                outputs: progressbarwidgetMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtProgressbarwidgetComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtProgressbarwidgetComponent);
        return ExtProgressbarwidgetComponent;
    }(base));

    var segmentedbuttonMetaData = /** @class */ (function () {
        function segmentedbuttonMetaData() {
        }
        segmentedbuttonMetaData.XTYPE = 'segmentedbutton';
        segmentedbuttonMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowDepress',
            'allowFocusingDisabledChildren',
            'allowMultiple',
            'allowToggle',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'defaultUI',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'forceSelection',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'pressedButtons',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'vertical',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        segmentedbuttonMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,segmentedbutton,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'segmentedbutton,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'segmentedbutton' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'segmentedbutton,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'segmentedbutton,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,segmentedbutton,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'segmentedbutton,event' },
            { name: 'focusenter', parameters: 'segmentedbutton,event' },
            { name: 'focusleave', parameters: 'segmentedbutton,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'segmentedbutton,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'segmentedbutton,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'segmentedbutton,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'segmentedbutton' },
            { name: 'toggle', parameters: 'segmentedbutton,button,isPressed' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        segmentedbuttonMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'toggle',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return segmentedbuttonMetaData;
    }());
    var ExtSegmentedbuttonComponent = /** @class */ (function (_super) {
        __extends(ExtSegmentedbuttonComponent, _super);
        function ExtSegmentedbuttonComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, segmentedbuttonMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSegmentedbuttonComponent_1 = ExtSegmentedbuttonComponent;
        ExtSegmentedbuttonComponent.prototype.ngOnInit = function () {
            this.baseOnInit(segmentedbuttonMetaData);
        };
        ExtSegmentedbuttonComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSegmentedbuttonComponent_1;
        ExtSegmentedbuttonComponent = ExtSegmentedbuttonComponent_1 = __decorate([
            core.Component({
                selector: 'segmentedbutton',
                inputs: segmentedbuttonMetaData.PROPERTIES,
                outputs: segmentedbuttonMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSegmentedbuttonComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSegmentedbuttonComponent);
        return ExtSegmentedbuttonComponent;
    }(base));

    var sheetMetaData = /** @class */ (function () {
        function sheetMetaData() {
        }
        sheetMetaData.XTYPE = 'sheet';
        sheetMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'cover',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enter',
            'exit',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'reveal',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'side',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchX',
            'stretchY',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sheetMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,sheet,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'sheet,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'sheet' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'sheet' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'sheet,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sheet' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sheet,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'sheet' },
            { name: 'deactivate', parameters: 'oldActiveItem,sheet,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'sheet' },
            { name: 'drawershow', parameters: 'sheet' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'sheet' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sheet,event' },
            { name: 'focusenter', parameters: 'sheet,event' },
            { name: 'focusleave', parameters: 'sheet,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'sheet,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'sheet,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'sheet,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'sheet,context' },
            { name: 'resizedragcancel', parameters: 'sheet,context' },
            { name: 'resizedragend', parameters: 'sheet,context' },
            { name: 'resizedragstart', parameters: 'sheet,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sheet' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sheetMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sheetMetaData;
    }());
    var ExtSheetComponent = /** @class */ (function (_super) {
        __extends(ExtSheetComponent, _super);
        function ExtSheetComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sheetMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSheetComponent_1 = ExtSheetComponent;
        ExtSheetComponent.prototype.ngOnInit = function () {
            this.baseOnInit(sheetMetaData);
        };
        ExtSheetComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSheetComponent_1;
        ExtSheetComponent = ExtSheetComponent_1 = __decorate([
            core.Component({
                selector: 'sheet',
                inputs: sheetMetaData.PROPERTIES,
                outputs: sheetMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSheetComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSheetComponent);
        return ExtSheetComponent;
    }(base));

    var sliderMetaData = /** @class */ (function () {
        function sliderMetaData() {
        }
        sliderMetaData.XTYPE = 'slider';
        sliderMetaData.PROPERTIES = [
            'alignSelf',
            'allowThumbsOverlapping',
            'alwaysOnTop',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'increment',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxValue',
            'maxWidth',
            'minHeight',
            'minValue',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'thumbDefaults',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'valueIsArray',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sliderMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'slider' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'slider,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'slider,thumb,newValue,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drag', parameters: 'slider,thumb,e' },
            { name: 'dragend', parameters: 'slider,thumb,value,e' },
            { name: 'dragstart', parameters: 'slider,thumb,value,e' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'slider,event' },
            { name: 'focusenter', parameters: 'slider,event' },
            { name: 'focusleave', parameters: 'slider,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'slider' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sliderMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drag',
            'dragend',
            'dragstart',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sliderMetaData;
    }());
    var ExtSliderComponent = /** @class */ (function (_super) {
        __extends(ExtSliderComponent, _super);
        function ExtSliderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sliderMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSliderComponent_1 = ExtSliderComponent;
        ExtSliderComponent.prototype.ngOnInit = function () {
            this.baseOnInit(sliderMetaData);
        };
        ExtSliderComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSliderComponent_1;
        ExtSliderComponent = ExtSliderComponent_1 = __decorate([
            core.Component({
                selector: 'slider',
                inputs: sliderMetaData.PROPERTIES,
                outputs: sliderMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSliderComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSliderComponent);
        return ExtSliderComponent;
    }(base));

    var thumbMetaData = /** @class */ (function () {
        function thumbMetaData() {
        }
        thumbMetaData.XTYPE = 'thumb';
        thumbMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'fillCls',
            'fillTrack',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        thumbMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'thumb' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'thumb,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'thumb,event' },
            { name: 'focusenter', parameters: 'thumb,event' },
            { name: 'focusleave', parameters: 'thumb,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'thumb' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        thumbMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return thumbMetaData;
    }());
    var ExtThumbComponent = /** @class */ (function (_super) {
        __extends(ExtThumbComponent, _super);
        function ExtThumbComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, thumbMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtThumbComponent_1 = ExtThumbComponent;
        ExtThumbComponent.prototype.ngOnInit = function () {
            this.baseOnInit(thumbMetaData);
        };
        ExtThumbComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtThumbComponent_1;
        ExtThumbComponent = ExtThumbComponent_1 = __decorate([
            core.Component({
                selector: 'thumb',
                inputs: thumbMetaData.PROPERTIES,
                outputs: thumbMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtThumbComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtThumbComponent);
        return ExtThumbComponent;
    }(base));

    var togglesliderMetaData = /** @class */ (function () {
        function togglesliderMetaData() {
        }
        togglesliderMetaData.XTYPE = 'toggleslider';
        togglesliderMetaData.PROPERTIES = [
            'alignSelf',
            'allowThumbsOverlapping',
            'alwaysOnTop',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'increment',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxValue',
            'maxWidth',
            'minHeight',
            'minValue',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'thumbDefaults',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'valueIsArray',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        togglesliderMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'toggleslider' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'toggleslider,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'toggleslider,thumb,newValue,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drag', parameters: 'toggleslider,thumb,e' },
            { name: 'dragend', parameters: 'toggleslider,thumb,value,e' },
            { name: 'dragstart', parameters: 'toggleslider,thumb,value,e' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'toggleslider,event' },
            { name: 'focusenter', parameters: 'toggleslider,event' },
            { name: 'focusleave', parameters: 'toggleslider,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'toggleslider' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        togglesliderMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drag',
            'dragend',
            'dragstart',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return togglesliderMetaData;
    }());
    var ExtTogglesliderComponent = /** @class */ (function (_super) {
        __extends(ExtTogglesliderComponent, _super);
        function ExtTogglesliderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, togglesliderMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTogglesliderComponent_1 = ExtTogglesliderComponent;
        ExtTogglesliderComponent.prototype.ngOnInit = function () {
            this.baseOnInit(togglesliderMetaData);
        };
        ExtTogglesliderComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTogglesliderComponent_1;
        ExtTogglesliderComponent = ExtTogglesliderComponent_1 = __decorate([
            core.Component({
                selector: 'toggleslider',
                inputs: togglesliderMetaData.PROPERTIES,
                outputs: togglesliderMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTogglesliderComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTogglesliderComponent);
        return ExtTogglesliderComponent;
    }(base));

    var spacerMetaData = /** @class */ (function () {
        function spacerMetaData() {
        }
        spacerMetaData.XTYPE = 'spacer';
        spacerMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        spacerMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'spacer' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'spacer,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'spacer,event' },
            { name: 'focusenter', parameters: 'spacer,event' },
            { name: 'focusleave', parameters: 'spacer,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'spacer' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        spacerMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return spacerMetaData;
    }());
    var ExtSpacerComponent = /** @class */ (function (_super) {
        __extends(ExtSpacerComponent, _super);
        function ExtSpacerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, spacerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSpacerComponent_1 = ExtSpacerComponent;
        ExtSpacerComponent.prototype.ngOnInit = function () {
            this.baseOnInit(spacerMetaData);
        };
        ExtSpacerComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSpacerComponent_1;
        ExtSpacerComponent = ExtSpacerComponent_1 = __decorate([
            core.Component({
                selector: 'spacer',
                inputs: spacerMetaData.PROPERTIES,
                outputs: spacerMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSpacerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSpacerComponent);
        return ExtSpacerComponent;
    }(base));

    var sparklinebarMetaData = /** @class */ (function () {
        function sparklinebarMetaData() {
        }
        sparklinebarMetaData.XTYPE = 'sparklinebar';
        sparklinebarMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'barColor',
            'barSpacing',
            'barWidth',
            'bind',
            'border',
            'bottom',
            'centered',
            'chartRangeClip',
            'chartRangeMax',
            'chartRangeMin',
            'cls',
            'colorMap',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'disableTooltips',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightColor',
            'highlightLighten',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'lineColor',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'negBarColor',
            'nullColor',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stackedBarColor',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipTpl',
            'toFrontOnShow',
            'tooltip',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zeroAxis',
            'zeroColor',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sparklinebarMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinebar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinebar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinebar,event' },
            { name: 'focusenter', parameters: 'sparklinebar,event' },
            { name: 'focusleave', parameters: 'sparklinebar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinebar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sparklinebarMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sparklinebarMetaData;
    }());
    var ExtSparklinebarComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinebarComponent, _super);
        function ExtSparklinebarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sparklinebarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSparklinebarComponent_1 = ExtSparklinebarComponent;
        ExtSparklinebarComponent.prototype.ngOnInit = function () {
            this.baseOnInit(sparklinebarMetaData);
        };
        ExtSparklinebarComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSparklinebarComponent_1;
        ExtSparklinebarComponent = ExtSparklinebarComponent_1 = __decorate([
            core.Component({
                selector: 'sparklinebar',
                inputs: sparklinebarMetaData.PROPERTIES,
                outputs: sparklinebarMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSparklinebarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSparklinebarComponent);
        return ExtSparklinebarComponent;
    }(base));

    var sparklineMetaData = /** @class */ (function () {
        function sparklineMetaData() {
        }
        sparklineMetaData.XTYPE = 'sparkline';
        sparklineMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'disableTooltips',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightColor',
            'highlightLighten',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'lineColor',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipTpl',
            'toFrontOnShow',
            'tooltip',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sparklineMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparkline' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparkline,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparkline,event' },
            { name: 'focusenter', parameters: 'sparkline,event' },
            { name: 'focusleave', parameters: 'sparkline,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparkline' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sparklineMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sparklineMetaData;
    }());
    var ExtSparklineComponent = /** @class */ (function (_super) {
        __extends(ExtSparklineComponent, _super);
        function ExtSparklineComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sparklineMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSparklineComponent_1 = ExtSparklineComponent;
        ExtSparklineComponent.prototype.ngOnInit = function () {
            this.baseOnInit(sparklineMetaData);
        };
        ExtSparklineComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSparklineComponent_1;
        ExtSparklineComponent = ExtSparklineComponent_1 = __decorate([
            core.Component({
                selector: 'sparkline',
                inputs: sparklineMetaData.PROPERTIES,
                outputs: sparklineMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSparklineComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSparklineComponent);
        return ExtSparklineComponent;
    }(base));

    var sparklineboxMetaData = /** @class */ (function () {
        function sparklineboxMetaData() {
        }
        sparklineboxMetaData.XTYPE = 'sparklinebox';
        sparklineboxMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'boxFillColor',
            'boxLineColor',
            'centered',
            'chartRangeMax',
            'chartRangeMin',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'disableTooltips',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightColor',
            'highlightLighten',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'lineColor',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'medianColor',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'outlierFillColor',
            'outlierIQR',
            'outlierLineColor',
            'padding',
            'plugins',
            'publishes',
            'raw',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showOutliers',
            'spotRadius',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'target',
            'targetColor',
            'tipTpl',
            'toFrontOnShow',
            'tooltip',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'values',
            'viewModel',
            'weight',
            'whiskerColor',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sparklineboxMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinebox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinebox,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinebox,event' },
            { name: 'focusenter', parameters: 'sparklinebox,event' },
            { name: 'focusleave', parameters: 'sparklinebox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinebox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sparklineboxMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sparklineboxMetaData;
    }());
    var ExtSparklineboxComponent = /** @class */ (function (_super) {
        __extends(ExtSparklineboxComponent, _super);
        function ExtSparklineboxComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sparklineboxMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSparklineboxComponent_1 = ExtSparklineboxComponent;
        ExtSparklineboxComponent.prototype.ngOnInit = function () {
            this.baseOnInit(sparklineboxMetaData);
        };
        ExtSparklineboxComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSparklineboxComponent_1;
        ExtSparklineboxComponent = ExtSparklineboxComponent_1 = __decorate([
            core.Component({
                selector: 'sparklinebox',
                inputs: sparklineboxMetaData.PROPERTIES,
                outputs: sparklineboxMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSparklineboxComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSparklineboxComponent);
        return ExtSparklineboxComponent;
    }(base));

    var sparklinebulletMetaData = /** @class */ (function () {
        function sparklinebulletMetaData() {
        }
        sparklinebulletMetaData.XTYPE = 'sparklinebullet';
        sparklinebulletMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'base',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'disableTooltips',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightColor',
            'highlightLighten',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'lineColor',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'performanceColor',
            'plugins',
            'publishes',
            'rangeColors',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'targetColor',
            'targetWidth',
            'tipTpl',
            'toFrontOnShow',
            'tooltip',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sparklinebulletMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinebullet' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinebullet,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinebullet,event' },
            { name: 'focusenter', parameters: 'sparklinebullet,event' },
            { name: 'focusleave', parameters: 'sparklinebullet,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinebullet' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sparklinebulletMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sparklinebulletMetaData;
    }());
    var ExtSparklinebulletComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinebulletComponent, _super);
        function ExtSparklinebulletComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sparklinebulletMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSparklinebulletComponent_1 = ExtSparklinebulletComponent;
        ExtSparklinebulletComponent.prototype.ngOnInit = function () {
            this.baseOnInit(sparklinebulletMetaData);
        };
        ExtSparklinebulletComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSparklinebulletComponent_1;
        ExtSparklinebulletComponent = ExtSparklinebulletComponent_1 = __decorate([
            core.Component({
                selector: 'sparklinebullet',
                inputs: sparklinebulletMetaData.PROPERTIES,
                outputs: sparklinebulletMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSparklinebulletComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSparklinebulletComponent);
        return ExtSparklinebulletComponent;
    }(base));

    var sparklinediscreteMetaData = /** @class */ (function () {
        function sparklinediscreteMetaData() {
        }
        sparklinediscreteMetaData.XTYPE = 'sparklinediscrete';
        sparklinediscreteMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'chartRangeClip',
            'chartRangeMax',
            'chartRangeMin',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'disableTooltips',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightColor',
            'highlightLighten',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'lineColor',
            'lineHeight',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'thresholdColor',
            'thresholdValue',
            'tipTpl',
            'toFrontOnShow',
            'tooltip',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sparklinediscreteMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinediscrete' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinediscrete,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinediscrete,event' },
            { name: 'focusenter', parameters: 'sparklinediscrete,event' },
            { name: 'focusleave', parameters: 'sparklinediscrete,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinediscrete' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sparklinediscreteMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sparklinediscreteMetaData;
    }());
    var ExtSparklinediscreteComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinediscreteComponent, _super);
        function ExtSparklinediscreteComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sparklinediscreteMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSparklinediscreteComponent_1 = ExtSparklinediscreteComponent;
        ExtSparklinediscreteComponent.prototype.ngOnInit = function () {
            this.baseOnInit(sparklinediscreteMetaData);
        };
        ExtSparklinediscreteComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSparklinediscreteComponent_1;
        ExtSparklinediscreteComponent = ExtSparklinediscreteComponent_1 = __decorate([
            core.Component({
                selector: 'sparklinediscrete',
                inputs: sparklinediscreteMetaData.PROPERTIES,
                outputs: sparklinediscreteMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSparklinediscreteComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSparklinediscreteComponent);
        return ExtSparklinediscreteComponent;
    }(base));

    var sparklinelineMetaData = /** @class */ (function () {
        function sparklinelineMetaData() {
        }
        sparklinelineMetaData.XTYPE = 'sparklineline';
        sparklinelineMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'chartRangeMax',
            'chartRangeMaxX',
            'chartRangeMin',
            'chartRangeMinX',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'disableTooltips',
            'displayed',
            'docked',
            'draggable',
            'drawNormalOnTop',
            'fillColor',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightColor',
            'highlightLighten',
            'highlightLineColor',
            'highlightSpotColor',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'lineColor',
            'lineWidth',
            'listeners',
            'margin',
            'maxHeight',
            'maxSpotColor',
            'maxWidth',
            'minHeight',
            'minSpotColor',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'normalRangeColor',
            'normalRangeMax',
            'normalRangeMin',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'spotColor',
            'spotRadius',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipTpl',
            'toFrontOnShow',
            'tooltip',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'values',
            'valueSpots',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sparklinelineMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklineline' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklineline,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklineline,event' },
            { name: 'focusenter', parameters: 'sparklineline,event' },
            { name: 'focusleave', parameters: 'sparklineline,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklineline' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sparklinelineMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sparklinelineMetaData;
    }());
    var ExtSparklinelineComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinelineComponent, _super);
        function ExtSparklinelineComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sparklinelineMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSparklinelineComponent_1 = ExtSparklinelineComponent;
        ExtSparklinelineComponent.prototype.ngOnInit = function () {
            this.baseOnInit(sparklinelineMetaData);
        };
        ExtSparklinelineComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSparklinelineComponent_1;
        ExtSparklinelineComponent = ExtSparklinelineComponent_1 = __decorate([
            core.Component({
                selector: 'sparklineline',
                inputs: sparklinelineMetaData.PROPERTIES,
                outputs: sparklinelineMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSparklinelineComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSparklinelineComponent);
        return ExtSparklinelineComponent;
    }(base));

    var sparklinepieMetaData = /** @class */ (function () {
        function sparklinepieMetaData() {
        }
        sparklinepieMetaData.XTYPE = 'sparklinepie';
        sparklinepieMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'borderColor',
            'borderWidth',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'disableTooltips',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightColor',
            'highlightLighten',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'lineColor',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'offset',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sliceColors',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipTpl',
            'toFrontOnShow',
            'tooltip',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sparklinepieMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinepie' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinepie,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinepie,event' },
            { name: 'focusenter', parameters: 'sparklinepie,event' },
            { name: 'focusleave', parameters: 'sparklinepie,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinepie' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sparklinepieMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sparklinepieMetaData;
    }());
    var ExtSparklinepieComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinepieComponent, _super);
        function ExtSparklinepieComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sparklinepieMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSparklinepieComponent_1 = ExtSparklinepieComponent;
        ExtSparklinepieComponent.prototype.ngOnInit = function () {
            this.baseOnInit(sparklinepieMetaData);
        };
        ExtSparklinepieComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSparklinepieComponent_1;
        ExtSparklinepieComponent = ExtSparklinepieComponent_1 = __decorate([
            core.Component({
                selector: 'sparklinepie',
                inputs: sparklinepieMetaData.PROPERTIES,
                outputs: sparklinepieMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSparklinepieComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSparklinepieComponent);
        return ExtSparklinepieComponent;
    }(base));

    var sparklinetristateMetaData = /** @class */ (function () {
        function sparklinetristateMetaData() {
        }
        sparklinetristateMetaData.XTYPE = 'sparklinetristate';
        sparklinetristateMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'barSpacing',
            'barWidth',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'colorMap',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'disableTooltips',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightColor',
            'highlightLighten',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'lineColor',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'negBarColor',
            'padding',
            'plugins',
            'posBarColor',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipTpl',
            'toFrontOnShow',
            'tooltip',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zeroBarColor',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sparklinetristateMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinetristate' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinetristate,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinetristate,event' },
            { name: 'focusenter', parameters: 'sparklinetristate,event' },
            { name: 'focusleave', parameters: 'sparklinetristate,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinetristate' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sparklinetristateMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sparklinetristateMetaData;
    }());
    var ExtSparklinetristateComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinetristateComponent, _super);
        function ExtSparklinetristateComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sparklinetristateMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSparklinetristateComponent_1 = ExtSparklinetristateComponent;
        ExtSparklinetristateComponent.prototype.ngOnInit = function () {
            this.baseOnInit(sparklinetristateMetaData);
        };
        ExtSparklinetristateComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSparklinetristateComponent_1;
        ExtSparklinetristateComponent = ExtSparklinetristateComponent_1 = __decorate([
            core.Component({
                selector: 'sparklinetristate',
                inputs: sparklinetristateMetaData.PROPERTIES,
                outputs: sparklinetristateMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSparklinetristateComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSparklinetristateComponent);
        return ExtSparklinetristateComponent;
    }(base));

    var splitbuttonMetaData = /** @class */ (function () {
        function splitbuttonMetaData() {
        }
        splitbuttonMetaData.XTYPE = 'splitbutton';
        splitbuttonMetaData.PROPERTIES = [
            'alignSelf',
            'allowDepress',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'arrow',
            'arrowAlign',
            'arrowHandler',
            'autoEvent',
            'axisLock',
            'badgeText',
            'bind',
            'border',
            'bottom',
            'buttonType',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableToggle',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'pressed',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchMenu',
            'style',
            'tabIndex',
            'text',
            'textAlign',
            'toFrontOnShow',
            'toggleHandler',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        splitbuttonMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'arrowclick', parameters: 'splitbutton,e' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepressedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'splitbutton' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'splitbutton,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'splitbutton,event' },
            { name: 'focusenter', parameters: 'splitbutton,event' },
            { name: 'focusleave', parameters: 'splitbutton,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'pressedchange', parameters: 'sender,value,oldValue' },
            { name: 'release', parameters: 'splitbutton,e' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'splitbutton,e' },
            { name: 'tofront', parameters: 'splitbutton' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        splitbuttonMetaData.EVENTNAMES = [
            'added',
            'arrowclick',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforepressedchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'pressedchange',
            'release',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return splitbuttonMetaData;
    }());
    var ExtSplitbuttonComponent = /** @class */ (function (_super) {
        __extends(ExtSplitbuttonComponent, _super);
        function ExtSplitbuttonComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, splitbuttonMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtSplitbuttonComponent_1 = ExtSplitbuttonComponent;
        ExtSplitbuttonComponent.prototype.ngOnInit = function () {
            this.baseOnInit(splitbuttonMetaData);
        };
        ExtSplitbuttonComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtSplitbuttonComponent_1;
        ExtSplitbuttonComponent = ExtSplitbuttonComponent_1 = __decorate([
            core.Component({
                selector: 'splitbutton',
                inputs: splitbuttonMetaData.PROPERTIES,
                outputs: splitbuttonMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtSplitbuttonComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtSplitbuttonComponent);
        return ExtSplitbuttonComponent;
    }(base));

    var tabbarMetaData = /** @class */ (function () {
        function tabbarMetaData() {
        }
        tabbarMetaData.XTYPE = 'tabbar';
        tabbarMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'activeTab',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'animateIndicator',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultButtonUI',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultTabUI',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tabRotation',
            'title',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        tabbarMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,tabbar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'activeTabchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'tabbar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeactiveTabchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tabbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tabbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,tabbar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tabbar,event' },
            { name: 'focusenter', parameters: 'tabbar,event' },
            { name: 'focusleave', parameters: 'tabbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'tabbar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'tabbar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'tabbar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tabchange', parameters: 'tabbar,newTab,oldTab' },
            { name: 'tofront', parameters: 'tabbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        tabbarMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'activeTabchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforeactiveTabchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tabchange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return tabbarMetaData;
    }());
    var ExtTabbarComponent = /** @class */ (function (_super) {
        __extends(ExtTabbarComponent, _super);
        function ExtTabbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, tabbarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTabbarComponent_1 = ExtTabbarComponent;
        ExtTabbarComponent.prototype.ngOnInit = function () {
            this.baseOnInit(tabbarMetaData);
        };
        ExtTabbarComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTabbarComponent_1;
        ExtTabbarComponent = ExtTabbarComponent_1 = __decorate([
            core.Component({
                selector: 'tabbar',
                inputs: tabbarMetaData.PROPERTIES,
                outputs: tabbarMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTabbarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTabbarComponent);
        return ExtTabbarComponent;
    }(base));

    var tabpanelMetaData = /** @class */ (function () {
        function tabpanelMetaData() {
        }
        tabpanelMetaData.XTYPE = 'tabpanel';
        tabpanelMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoOrientAnimation',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scroll',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabBar',
            'tabBarPosition',
            'tabIndex',
            'tabRotation',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        tabpanelMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,tabpanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'tabpanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tabpanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tabpanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,tabpanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tabpanel,event' },
            { name: 'focusenter', parameters: 'tabpanel,event' },
            { name: 'focusleave', parameters: 'tabpanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'tabpanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'tabpanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'tabpanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'tabpanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        tabpanelMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return tabpanelMetaData;
    }());
    var ExtTabpanelComponent = /** @class */ (function (_super) {
        __extends(ExtTabpanelComponent, _super);
        function ExtTabpanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, tabpanelMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTabpanelComponent_1 = ExtTabpanelComponent;
        ExtTabpanelComponent.prototype.ngOnInit = function () {
            this.baseOnInit(tabpanelMetaData);
        };
        ExtTabpanelComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTabpanelComponent_1;
        ExtTabpanelComponent = ExtTabpanelComponent_1 = __decorate([
            core.Component({
                selector: 'tabpanel',
                inputs: tabpanelMetaData.PROPERTIES,
                outputs: tabpanelMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTabpanelComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTabpanelComponent);
        return ExtTabpanelComponent;
    }(base));

    var tabMetaData = /** @class */ (function () {
        function tabMetaData() {
        }
        tabMetaData.XTYPE = 'tab';
        tabMetaData.PROPERTIES = [
            'active',
            'alignSelf',
            'allowDepress',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'arrow',
            'arrowAlign',
            'autoEvent',
            'axisLock',
            'badgeText',
            'bind',
            'border',
            'bottom',
            'buttonType',
            'centered',
            'closable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableToggle',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'pressed',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'rotation',
            'scope',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchMenu',
            'style',
            'tabIndex',
            'tabPosition',
            'text',
            'textAlign',
            'title',
            'toFrontOnShow',
            'toggleHandler',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        tabMetaData.EVENTS = [
            { name: 'activate', parameters: 'tab' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepressedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tab' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tab,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'tab' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tab,event' },
            { name: 'focusenter', parameters: 'tab,event' },
            { name: 'focusleave', parameters: 'tab,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'pressedchange', parameters: 'sender,value,oldValue' },
            { name: 'release', parameters: 'tab,e' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'tab,e' },
            { name: 'tofront', parameters: 'tab' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        tabMetaData.EVENTNAMES = [
            'activate',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforepressedchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'pressedchange',
            'release',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return tabMetaData;
    }());
    var ExtTabComponent = /** @class */ (function (_super) {
        __extends(ExtTabComponent, _super);
        function ExtTabComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, tabMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTabComponent_1 = ExtTabComponent;
        ExtTabComponent.prototype.ngOnInit = function () {
            this.baseOnInit(tabMetaData);
        };
        ExtTabComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTabComponent_1;
        ExtTabComponent = ExtTabComponent_1 = __decorate([
            core.Component({
                selector: 'tab',
                inputs: tabMetaData.PROPERTIES,
                outputs: tabMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTabComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTabComponent);
        return ExtTabComponent;
    }(base));

    var tooltipMetaData = /** @class */ (function () {
        function tooltipMetaData() {
        }
        tooltipMetaData.XTYPE = 'tooltip';
        tooltipMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'alignDelegate',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'allowOver',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'anchorToTarget',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoHide',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyCls',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'delegate',
            'disabled',
            'dismissDelay',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideDelay',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'mouseOffset',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'quickShowInterval',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showDelay',
            'showOnTap',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'target',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackMouse',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        tooltipMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,tooltip,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'tooltip,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'tooltip' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'tooltip' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'tooltip,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tooltip' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tooltip,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'tooltip' },
            { name: 'deactivate', parameters: 'oldActiveItem,tooltip,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'tooltip' },
            { name: 'drawershow', parameters: 'tooltip' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'tooltip' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tooltip,event' },
            { name: 'focusenter', parameters: 'tooltip,event' },
            { name: 'focusleave', parameters: 'tooltip,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'tooltip,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'tooltip,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'tooltip,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'tooltip,context' },
            { name: 'resizedragcancel', parameters: 'tooltip,context' },
            { name: 'resizedragend', parameters: 'tooltip,context' },
            { name: 'resizedragstart', parameters: 'tooltip,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'tooltip' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        tooltipMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return tooltipMetaData;
    }());
    var ExtTooltipComponent = /** @class */ (function (_super) {
        __extends(ExtTooltipComponent, _super);
        function ExtTooltipComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, tooltipMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTooltipComponent_1 = ExtTooltipComponent;
        ExtTooltipComponent.prototype.ngOnInit = function () {
            this.baseOnInit(tooltipMetaData);
        };
        ExtTooltipComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTooltipComponent_1;
        ExtTooltipComponent = ExtTooltipComponent_1 = __decorate([
            core.Component({
                selector: 'tooltip',
                inputs: tooltipMetaData.PROPERTIES,
                outputs: tooltipMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTooltipComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTooltipComponent);
        return ExtTooltipComponent;
    }(base));

    var titleMetaData = /** @class */ (function () {
        function titleMetaData() {
        }
        titleMetaData.XTYPE = 'title';
        titleMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'title',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        titleMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'title' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'title,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'title,event' },
            { name: 'focusenter', parameters: 'title,event' },
            { name: 'focusleave', parameters: 'title,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'title' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        titleMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return titleMetaData;
    }());
    var ExtTitleComponent = /** @class */ (function (_super) {
        __extends(ExtTitleComponent, _super);
        function ExtTitleComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, titleMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTitleComponent_1 = ExtTitleComponent;
        ExtTitleComponent.prototype.ngOnInit = function () {
            this.baseOnInit(titleMetaData);
        };
        ExtTitleComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTitleComponent_1;
        ExtTitleComponent = ExtTitleComponent_1 = __decorate([
            core.Component({
                selector: 'title',
                inputs: titleMetaData.PROPERTIES,
                outputs: titleMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTitleComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTitleComponent);
        return ExtTitleComponent;
    }(base));

    var titlebarMetaData = /** @class */ (function () {
        function titlebarMetaData() {
        }
        titlebarMetaData.XTYPE = 'titlebar';
        titlebarMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultButtonUI',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxButtonWidth',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        titlebarMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,titlebar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'titlebar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'titlebar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'titlebar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,titlebar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'titlebar,event' },
            { name: 'focusenter', parameters: 'titlebar,event' },
            { name: 'focusleave', parameters: 'titlebar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'titlebar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'titlebar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'titlebar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'titlebar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        titlebarMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return titlebarMetaData;
    }());
    var ExtTitlebarComponent = /** @class */ (function (_super) {
        __extends(ExtTitlebarComponent, _super);
        function ExtTitlebarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, titlebarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtTitlebarComponent_1 = ExtTitlebarComponent;
        ExtTitlebarComponent.prototype.ngOnInit = function () {
            this.baseOnInit(titlebarMetaData);
        };
        ExtTitlebarComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtTitlebarComponent_1;
        ExtTitlebarComponent = ExtTitlebarComponent_1 = __decorate([
            core.Component({
                selector: 'titlebar',
                inputs: titlebarMetaData.PROPERTIES,
                outputs: titlebarMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtTitlebarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtTitlebarComponent);
        return ExtTitlebarComponent;
    }(base));

    var toolMetaData = /** @class */ (function () {
        function toolMetaData() {
        }
        toolMetaData.XTYPE = 'tool';
        toolMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'passive',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stopEvent',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toolOwner',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'type',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        toolMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tool' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tool,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'click', parameters: 'tool,e,owner' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tool,event' },
            { name: 'focusenter', parameters: 'tool,event' },
            { name: 'focusleave', parameters: 'tool,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'tool' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        toolMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return toolMetaData;
    }());
    var ExtToolComponent = /** @class */ (function (_super) {
        __extends(ExtToolComponent, _super);
        function ExtToolComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, toolMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtToolComponent_1 = ExtToolComponent;
        ExtToolComponent.prototype.ngOnInit = function () {
            this.baseOnInit(toolMetaData);
        };
        ExtToolComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtToolComponent_1;
        ExtToolComponent = ExtToolComponent_1 = __decorate([
            core.Component({
                selector: 'tool',
                inputs: toolMetaData.PROPERTIES,
                outputs: toolMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtToolComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtToolComponent);
        return ExtToolComponent;
    }(base));

    var paneltoolMetaData = /** @class */ (function () {
        function paneltoolMetaData() {
        }
        paneltoolMetaData.XTYPE = 'paneltool';
        paneltoolMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'passive',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stopEvent',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toolOwner',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'type',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        paneltoolMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tool' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tool,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'click', parameters: 'tool,e,owner' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tool,event' },
            { name: 'focusenter', parameters: 'tool,event' },
            { name: 'focusleave', parameters: 'tool,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'tool' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        paneltoolMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return paneltoolMetaData;
    }());
    var ExtPaneltoolComponent = /** @class */ (function (_super) {
        __extends(ExtPaneltoolComponent, _super);
        function ExtPaneltoolComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, paneltoolMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtPaneltoolComponent_1 = ExtPaneltoolComponent;
        ExtPaneltoolComponent.prototype.ngOnInit = function () {
            this.baseOnInit(paneltoolMetaData);
        };
        ExtPaneltoolComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtPaneltoolComponent_1;
        ExtPaneltoolComponent = ExtPaneltoolComponent_1 = __decorate([
            core.Component({
                selector: 'paneltool',
                inputs: paneltoolMetaData.PROPERTIES,
                outputs: paneltoolMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtPaneltoolComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtPaneltoolComponent);
        return ExtPaneltoolComponent;
    }(base));

    var toolbarMetaData = /** @class */ (function () {
        function toolbarMetaData() {
        }
        toolbarMetaData.XTYPE = 'toolbar';
        toolbarMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultButtonUI',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'title',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        toolbarMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,toolbar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'toolbar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'toolbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'toolbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,toolbar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'toolbar,event' },
            { name: 'focusenter', parameters: 'toolbar,event' },
            { name: 'focusleave', parameters: 'toolbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'toolbar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'toolbar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'toolbar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'toolbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        toolbarMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return toolbarMetaData;
    }());
    var ExtToolbarComponent = /** @class */ (function (_super) {
        __extends(ExtToolbarComponent, _super);
        function ExtToolbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, toolbarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtToolbarComponent_1 = ExtToolbarComponent;
        ExtToolbarComponent.prototype.ngOnInit = function () {
            this.baseOnInit(toolbarMetaData);
        };
        ExtToolbarComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtToolbarComponent_1;
        ExtToolbarComponent = ExtToolbarComponent_1 = __decorate([
            core.Component({
                selector: 'toolbar',
                inputs: toolbarMetaData.PROPERTIES,
                outputs: toolbarMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtToolbarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtToolbarComponent);
        return ExtToolbarComponent;
    }(base));

    var colorbuttonMetaData = /** @class */ (function () {
        function colorbuttonMetaData() {
        }
        colorbuttonMetaData.XTYPE = 'colorbutton';
        colorbuttonMetaData.PROPERTIES = [
            'alignSelf',
            'alphaDecimalFormat',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'color',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'format',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'popup',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        colorbuttonMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'colorbutton' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'colorbutton,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'colorbutton,color,previousColor' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'colorbutton,event' },
            { name: 'focusenter', parameters: 'colorbutton,event' },
            { name: 'focusleave', parameters: 'colorbutton,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'colorbutton' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        colorbuttonMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return colorbuttonMetaData;
    }());
    var ExtColorbuttonComponent = /** @class */ (function (_super) {
        __extends(ExtColorbuttonComponent, _super);
        function ExtColorbuttonComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, colorbuttonMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtColorbuttonComponent_1 = ExtColorbuttonComponent;
        ExtColorbuttonComponent.prototype.ngOnInit = function () {
            this.baseOnInit(colorbuttonMetaData);
        };
        ExtColorbuttonComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtColorbuttonComponent_1;
        ExtColorbuttonComponent = ExtColorbuttonComponent_1 = __decorate([
            core.Component({
                selector: 'colorbutton',
                inputs: colorbuttonMetaData.PROPERTIES,
                outputs: colorbuttonMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtColorbuttonComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtColorbuttonComponent);
        return ExtColorbuttonComponent;
    }(base));

    var colorpickercolorpreviewMetaData = /** @class */ (function () {
        function colorpickercolorpreviewMetaData() {
        }
        colorpickercolorpreviewMetaData.XTYPE = 'colorpickercolorpreview';
        colorpickercolorpreviewMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        colorpickercolorpreviewMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'colorpickercolorpreview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'colorpickercolorpreview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'colorpickercolorpreview,event' },
            { name: 'focusenter', parameters: 'colorpickercolorpreview,event' },
            { name: 'focusleave', parameters: 'colorpickercolorpreview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'colorpickercolorpreview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        colorpickercolorpreviewMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return colorpickercolorpreviewMetaData;
    }());
    var ExtColorpickercolorpreviewComponent = /** @class */ (function (_super) {
        __extends(ExtColorpickercolorpreviewComponent, _super);
        function ExtColorpickercolorpreviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, colorpickercolorpreviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtColorpickercolorpreviewComponent_1 = ExtColorpickercolorpreviewComponent;
        ExtColorpickercolorpreviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit(colorpickercolorpreviewMetaData);
        };
        ExtColorpickercolorpreviewComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtColorpickercolorpreviewComponent_1;
        ExtColorpickercolorpreviewComponent = ExtColorpickercolorpreviewComponent_1 = __decorate([
            core.Component({
                selector: 'colorpickercolorpreview',
                inputs: colorpickercolorpreviewMetaData.PROPERTIES,
                outputs: colorpickercolorpreviewMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtColorpickercolorpreviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtColorpickercolorpreviewComponent);
        return ExtColorpickercolorpreviewComponent;
    }(base));

    var colorfieldMetaData = /** @class */ (function () {
        function colorfieldMetaData() {
        }
        colorfieldMetaData.XTYPE = 'colorfield';
        colorfieldMetaData.PROPERTIES = [
            'alignSelf',
            'alignTarget',
            'alphaDecimalFormat',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'bubbleDirty',
            'centered',
            'clearable',
            'cls',
            'color',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'format',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'plugins',
            'popup',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stripCharsRe',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        colorfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'colorfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'colorfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'colorfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'colorfield,color,previousColor' },
            { name: 'clearicontap', parameters: 'colorfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'colorfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'colorfield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'colorfield,e' },
            { name: 'focusenter', parameters: 'colorfield,event' },
            { name: 'focusleave', parameters: 'colorfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'colorfield,e' },
            { name: 'keyup', parameters: 'colorfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'colorfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'colorfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'colorfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        colorfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'dirtychange',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keydown',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return colorfieldMetaData;
    }());
    var ExtColorfieldComponent = /** @class */ (function (_super) {
        __extends(ExtColorfieldComponent, _super);
        function ExtColorfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, colorfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtColorfieldComponent_1 = ExtColorfieldComponent;
        ExtColorfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit(colorfieldMetaData);
        };
        ExtColorfieldComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtColorfieldComponent_1;
        ExtColorfieldComponent = ExtColorfieldComponent_1 = __decorate([
            core.Component({
                selector: 'colorfield',
                inputs: colorfieldMetaData.PROPERTIES,
                outputs: colorfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtColorfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtColorfieldComponent);
        return ExtColorfieldComponent;
    }(base));

    var colorselectorMetaData = /** @class */ (function () {
        function colorselectorMetaData() {
        }
        colorselectorMetaData.XTYPE = 'colorselector';
        colorselectorMetaData.PROPERTIES = [
            'alphaDecimalFormat',
            'cancelButtonText',
            'color',
            'fieldPad',
            'fieldWidth',
            'format',
            'okButtonText',
            'showOkCancelButtons',
            'showPreviousColor',
            'value',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        colorselectorMetaData.EVENTS = [
            { name: 'cancel', parameters: 'colorselector' },
            { name: 'change', parameters: 'colorselector,color,previousColor' },
            { name: 'ok', parameters: 'colorselector,color' },
            { name: 'ready', parameters: '' }
        ];
        colorselectorMetaData.EVENTNAMES = [
            'cancel',
            'change',
            'ok',
            'ready'
        ];
        return colorselectorMetaData;
    }());
    var ExtColorselectorComponent = /** @class */ (function (_super) {
        __extends(ExtColorselectorComponent, _super);
        function ExtColorselectorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, colorselectorMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtColorselectorComponent_1 = ExtColorselectorComponent;
        ExtColorselectorComponent.prototype.ngOnInit = function () {
            this.baseOnInit(colorselectorMetaData);
        };
        ExtColorselectorComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtColorselectorComponent_1;
        ExtColorselectorComponent = ExtColorselectorComponent_1 = __decorate([
            core.Component({
                selector: 'colorselector',
                inputs: colorselectorMetaData.PROPERTIES,
                outputs: colorselectorMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtColorselectorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtColorselectorComponent);
        return ExtColorselectorComponent;
    }(base));

    var gaugeMetaData = /** @class */ (function () {
        function gaugeMetaData() {
        }
        gaugeMetaData.XTYPE = 'gauge';
        gaugeMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'angleOffset',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clockwise',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxValue',
            'maxWidth',
            'minHeight',
            'minValue',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'needle',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'textAlign',
            'textOffset',
            'textTpl',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackLength',
            'trackStart',
            'trackStyle',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'valueStyle',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gaugeMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gauge' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gauge,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gauge,event' },
            { name: 'focusenter', parameters: 'gauge,event' },
            { name: 'focusleave', parameters: 'gauge,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gauge' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gaugeMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gaugeMetaData;
    }());
    var ExtGaugeComponent = /** @class */ (function (_super) {
        __extends(ExtGaugeComponent, _super);
        function ExtGaugeComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gaugeMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtGaugeComponent_1 = ExtGaugeComponent;
        ExtGaugeComponent.prototype.ngOnInit = function () {
            this.baseOnInit(gaugeMetaData);
        };
        ExtGaugeComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtGaugeComponent_1;
        ExtGaugeComponent = ExtGaugeComponent_1 = __decorate([
            core.Component({
                selector: 'gauge',
                inputs: gaugeMetaData.PROPERTIES,
                outputs: gaugeMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtGaugeComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtGaugeComponent);
        return ExtGaugeComponent;
    }(base));

    var mapMetaData = /** @class */ (function () {
        function mapMetaData() {
        }
        mapMetaData.XTYPE = 'map';
        mapMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'geo',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'map',
            'mapListeners',
            'mapOptions',
            'margin',
            'markers',
            'markerTemplate',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'requiredScripts',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'useCurrentLocation',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        mapMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,map,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'map,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'map' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'map,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centerchange', parameters: 'map,map,center' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,map,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'map,event' },
            { name: 'focusenter', parameters: 'map,event' },
            { name: 'focusleave', parameters: 'map,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maprender', parameters: 'map,map' },
            { name: 'markerclick', parameters: 'map,info' },
            { name: 'markerdblclick', parameters: 'map,info' },
            { name: 'markerdrag', parameters: 'map,info' },
            { name: 'markerdragend', parameters: 'map,info' },
            { name: 'markerdragstart', parameters: 'map,info' },
            { name: 'markermousedown', parameters: 'map,info' },
            { name: 'markermouseout', parameters: 'map,info' },
            { name: 'markermouseover', parameters: 'map,info' },
            { name: 'markermouseup', parameters: 'map,info' },
            { name: 'markerrightclick', parameters: 'map,info' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'map,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'map,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'map,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'map' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'typechange', parameters: 'map,map,mapType' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'zoomchange', parameters: 'map,map,zoomLevel' },
            { name: 'ready', parameters: '' }
        ];
        mapMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centerchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maprender',
            'markerclick',
            'markerdblclick',
            'markerdrag',
            'markerdragend',
            'markerdragstart',
            'markermousedown',
            'markermouseout',
            'markermouseover',
            'markermouseup',
            'markerrightclick',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'typechange',
            'updatedata',
            'widthchange',
            'zoomchange',
            'ready'
        ];
        return mapMetaData;
    }());
    var ExtMapComponent = /** @class */ (function (_super) {
        __extends(ExtMapComponent, _super);
        function ExtMapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, mapMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtMapComponent_1 = ExtMapComponent;
        ExtMapComponent.prototype.ngOnInit = function () {
            this.baseOnInit(mapMetaData);
        };
        ExtMapComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtMapComponent_1;
        ExtMapComponent = ExtMapComponent_1 = __decorate([
            core.Component({
                selector: 'map',
                inputs: mapMetaData.PROPERTIES,
                outputs: mapMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtMapComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtMapComponent);
        return ExtMapComponent;
    }(base));

    var google_mapMetaData = /** @class */ (function () {
        function google_mapMetaData() {
        }
        google_mapMetaData.XTYPE = 'google-map';
        google_mapMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'geo',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'map',
            'mapListeners',
            'mapOptions',
            'margin',
            'markers',
            'markerTemplate',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'requiredScripts',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'useCurrentLocation',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        google_mapMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,map,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'map,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'map' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'map,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centerchange', parameters: 'map,map,center' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,map,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'map,event' },
            { name: 'focusenter', parameters: 'map,event' },
            { name: 'focusleave', parameters: 'map,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maprender', parameters: 'map,map' },
            { name: 'markerclick', parameters: 'map,info' },
            { name: 'markerdblclick', parameters: 'map,info' },
            { name: 'markerdrag', parameters: 'map,info' },
            { name: 'markerdragend', parameters: 'map,info' },
            { name: 'markerdragstart', parameters: 'map,info' },
            { name: 'markermousedown', parameters: 'map,info' },
            { name: 'markermouseout', parameters: 'map,info' },
            { name: 'markermouseover', parameters: 'map,info' },
            { name: 'markermouseup', parameters: 'map,info' },
            { name: 'markerrightclick', parameters: 'map,info' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'map,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'map,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'map,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'map' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'typechange', parameters: 'map,map,mapType' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'zoomchange', parameters: 'map,map,zoomLevel' },
            { name: 'ready', parameters: '' }
        ];
        google_mapMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centerchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maprender',
            'markerclick',
            'markerdblclick',
            'markerdrag',
            'markerdragend',
            'markerdragstart',
            'markermousedown',
            'markermouseout',
            'markermouseover',
            'markermouseup',
            'markerrightclick',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'typechange',
            'updatedata',
            'widthchange',
            'zoomchange',
            'ready'
        ];
        return google_mapMetaData;
    }());
    var ExtGoogle_mapComponent = /** @class */ (function (_super) {
        __extends(ExtGoogle_mapComponent, _super);
        function ExtGoogle_mapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, google_mapMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtGoogle_mapComponent_1 = ExtGoogle_mapComponent;
        ExtGoogle_mapComponent.prototype.ngOnInit = function () {
            this.baseOnInit(google_mapMetaData);
        };
        ExtGoogle_mapComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtGoogle_mapComponent_1;
        ExtGoogle_mapComponent = ExtGoogle_mapComponent_1 = __decorate([
            core.Component({
                selector: 'google-map',
                inputs: google_mapMetaData.PROPERTIES,
                outputs: google_mapMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtGoogle_mapComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtGoogle_mapComponent);
        return ExtGoogle_mapComponent;
    }(base));

    var ratingMetaData = /** @class */ (function () {
        function ratingMetaData() {
        }
        ratingMetaData.XTYPE = 'rating';
        ratingMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'animate',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'family',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'glyphs',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'limit',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minimum',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'overStyle',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'rounding',
            'scale',
            'scrollable',
            'selectedStyle',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tip',
            'toFrontOnShow',
            'tooltip',
            'tooltipText',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackingValue',
            'trackOver',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        ratingMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'rating' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'rating,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'rating,event' },
            { name: 'focusenter', parameters: 'rating,event' },
            { name: 'focusleave', parameters: 'rating,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'rating' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        ratingMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return ratingMetaData;
    }());
    var ExtRatingComponent = /** @class */ (function (_super) {
        __extends(ExtRatingComponent, _super);
        function ExtRatingComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, ratingMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtRatingComponent_1 = ExtRatingComponent;
        ExtRatingComponent.prototype.ngOnInit = function () {
            this.baseOnInit(ratingMetaData);
        };
        ExtRatingComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtRatingComponent_1;
        ExtRatingComponent = ExtRatingComponent_1 = __decorate([
            core.Component({
                selector: 'rating',
                inputs: ratingMetaData.PROPERTIES,
                outputs: ratingMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtRatingComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtRatingComponent);
        return ExtRatingComponent;
    }(base));

    var videoMetaData = /** @class */ (function () {
        function videoMetaData() {
        }
        videoMetaData.XTYPE = 'video';
        videoMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoPause',
            'autoResume',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'controls',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'loop',
            'margin',
            'maxHeight',
            'maxWidth',
            'media',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'muted',
            'name',
            'nameable',
            'padding',
            'plugins',
            'posterUrl',
            'preload',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showPosterOnPause',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'viewModel',
            'volume',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        videoMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'video' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'video,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'ended', parameters: 'video,time' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'video,event' },
            { name: 'focusenter', parameters: 'video,event' },
            { name: 'focusleave', parameters: 'video,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'mutedchange', parameters: 'video,muted' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pause', parameters: 'video,time' },
            { name: 'play', parameters: 'video' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'stop', parameters: 'video' },
            { name: 'timeupdate', parameters: 'video,time' },
            { name: 'tofront', parameters: 'video' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'volumechange', parameters: 'video,volume' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        videoMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'ended',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'mutedchange',
            'orientationchange',
            'painted',
            'pause',
            'play',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'stop',
            'timeupdate',
            'tofront',
            'topchange',
            'updatedata',
            'volumechange',
            'widthchange',
            'ready'
        ];
        return videoMetaData;
    }());
    var ExtVideoComponent = /** @class */ (function (_super) {
        __extends(ExtVideoComponent, _super);
        function ExtVideoComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, videoMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtVideoComponent_1 = ExtVideoComponent;
        ExtVideoComponent.prototype.ngOnInit = function () {
            this.baseOnInit(videoMetaData);
        };
        ExtVideoComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtVideoComponent_1;
        ExtVideoComponent = ExtVideoComponent_1 = __decorate([
            core.Component({
                selector: 'video',
                inputs: videoMetaData.PROPERTIES,
                outputs: videoMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtVideoComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtVideoComponent);
        return ExtVideoComponent;
    }(base));

    var viewportMetaData = /** @class */ (function () {
        function viewportMetaData() {
        }
        viewportMetaData.XTYPE = 'viewport';
        viewportMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignSelf',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoBlurInput',
            'autoDestroy',
            'autoMaximize',
            'autoRender',
            'autoSize',
            'axisLock',
            'bind',
            'bodyCls',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menus',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'orientation',
            'padding',
            'plugins',
            'preventZooming',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'swipeThreshold',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        viewportMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,viewport,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'viewport,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'viewport' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'viewport,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,viewport,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'viewport,event' },
            { name: 'focusenter', parameters: 'viewport,event' },
            { name: 'focusleave', parameters: 'viewport,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maximize', parameters: 'viewport' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'viewport,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: 'viewport,newOrientation,width,height' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'ready', parameters: 'viewport' },
            { name: 'remove', parameters: 'viewport,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'viewport,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'viewport' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        viewportMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maximize',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'ready',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return viewportMetaData;
    }());
    var ExtViewportComponent = /** @class */ (function (_super) {
        __extends(ExtViewportComponent, _super);
        function ExtViewportComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, viewportMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtViewportComponent_1 = ExtViewportComponent;
        ExtViewportComponent.prototype.ngOnInit = function () {
            this.baseOnInit(viewportMetaData);
        };
        ExtViewportComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtViewportComponent_1;
        ExtViewportComponent = ExtViewportComponent_1 = __decorate([
            core.Component({
                selector: 'viewport',
                inputs: viewportMetaData.PROPERTIES,
                outputs: viewportMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtViewportComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtViewportComponent);
        return ExtViewportComponent;
    }(base));

    var widgetMetaData = /** @class */ (function () {
        function widgetMetaData() {
        }
        widgetMetaData.XTYPE = 'widget';
        widgetMetaData.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'flex',
            'floated',
            'focusCls',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'margin',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        widgetMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'widget' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'widget,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'widget,event' },
            { name: 'focusenter', parameters: 'widget,event' },
            { name: 'focusleave', parameters: 'widget,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'widget' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        widgetMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return widgetMetaData;
    }());
    var ExtWidgetComponent = /** @class */ (function (_super) {
        __extends(ExtWidgetComponent, _super);
        function ExtWidgetComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, widgetMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        ExtWidgetComponent_1 = ExtWidgetComponent;
        ExtWidgetComponent.prototype.ngOnInit = function () {
            this.baseOnInit(widgetMetaData);
        };
        ExtWidgetComponent.prototype.ngAfterContentInit = function () {
            this.baseAfterContentInit();
            //this['ready'].emit(this)
        };
        var ExtWidgetComponent_1;
        ExtWidgetComponent = ExtWidgetComponent_1 = __decorate([
            core.Component({
                selector: 'widget',
                inputs: widgetMetaData.PROPERTIES,
                outputs: widgetMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: core.forwardRef(function () { return ExtWidgetComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef, base])
        ], ExtWidgetComponent);
        return ExtWidgetComponent;
    }(base));

    var ExtAngularModule = /** @class */ (function () {
        function ExtAngularModule() {
        }
        ExtAngularModule = __decorate([
            core.NgModule({
                imports: [],
                declarations: [
                    ExtAngularBootstrapComponent,
                    ExtActionsheetComponent,
                    ExtAudioComponent,
                    ExtBreadcrumbbarComponent,
                    ExtButtonComponent,
                    ExtCalendar_eventComponent,
                    ExtCalendar_form_addComponent,
                    ExtCalendar_calendar_pickerComponent,
                    ExtCalendar_form_editComponent,
                    ExtCalendar_timefieldComponent,
                    ExtCalendar_daysheaderComponent,
                    ExtCalendar_weeksheaderComponent,
                    ExtCalendar_listComponent,
                    ExtCalendar_dayComponent,
                    ExtCalendar_daysComponent,
                    ExtCalendar_monthComponent,
                    ExtCalendarComponent,
                    ExtCalendar_weekComponent,
                    ExtCalendar_weeksComponent,
                    ExtCalendar_dayviewComponent,
                    ExtCalendar_daysviewComponent,
                    ExtCalendar_monthviewComponent,
                    ExtCalendar_multiviewComponent,
                    ExtCalendar_weekviewComponent,
                    ExtCalendar_weeksviewComponent,
                    ExtCarouselComponent,
                    ExtAxis3dComponent,
                    ExtCartesianComponent,
                    ExtChartComponent,
                    ExtInteractionComponent,
                    ExtLegendComponent,
                    ExtChartnavigatorComponent,
                    ExtPolarComponent,
                    ExtSpacefillingComponent,
                    ExtChipComponent,
                    ExtComponentComponent,
                    ExtContainerComponent,
                    ExtD3_canvasComponent,
                    ExtD3_heatmapComponent,
                    ExtD3_packComponent,
                    ExtD3_partitionComponent,
                    ExtD3_sunburstComponent,
                    ExtD3_treeComponent,
                    ExtD3_horizontal_treeComponent,
                    ExtD3_treemapComponent,
                    ExtD3_svgComponent,
                    ExtD3Component,
                    ExtBoundlistComponent,
                    ExtChipviewComponent,
                    ExtComponentdataviewComponent,
                    ExtDataitemComponent,
                    ExtDataviewComponent,
                    ExtEmptytextComponent,
                    ExtIndexbarComponent,
                    ExtItemheaderComponent,
                    ExtListComponent,
                    ExtListitemComponent,
                    ExtListitemplaceholderComponent,
                    ExtListswiperitemComponent,
                    ExtListswiperstepperComponent,
                    ExtNestedlistComponent,
                    ExtPullrefreshbarComponent,
                    ExtPullrefreshspinnerComponent,
                    ExtSimplelistitemComponent,
                    ExtDialogComponent,
                    ExtWindowComponent,
                    ExtDrawComponent,
                    ExtSurfaceComponent,
                    ExtEditorComponent,
                    ExtCheckboxComponent,
                    ExtCheckboxfieldComponent,
                    ExtCheckboxgroupComponent,
                    ExtComboboxComponent,
                    ExtComboboxfieldComponent,
                    ExtContainerfieldComponent,
                    ExtFieldcontainerComponent,
                    ExtDatefieldComponent,
                    ExtDatepickerfieldComponent,
                    ExtDatepickernativefieldComponent,
                    ExtDisplayfieldComponent,
                    ExtEmailfieldComponent,
                    ExtFieldComponent,
                    ExtGroupcontainerComponent,
                    ExtFilefieldComponent,
                    ExtFilebuttonComponent,
                    ExtHiddenfieldComponent,
                    ExtInputfieldComponent,
                    ExtNumberfieldComponent,
                    ExtFieldpanelComponent,
                    ExtPasswordfieldComponent,
                    ExtPickerfieldComponent,
                    ExtRadioComponent,
                    ExtRadiofieldComponent,
                    ExtRadiogroupComponent,
                    ExtSearchfieldComponent,
                    ExtSelectfieldComponent,
                    ExtSinglesliderfieldComponent,
                    ExtSliderfieldComponent,
                    ExtSpinnerfieldComponent,
                    ExtTextfieldComponent,
                    ExtTextareafieldComponent,
                    ExtTimefieldComponent,
                    ExtTogglefieldComponent,
                    ExtCleartriggerComponent,
                    ExtDatetriggerComponent,
                    ExtExpandtriggerComponent,
                    ExtMenutriggerComponent,
                    ExtRevealtriggerComponent,
                    ExtSpindowntriggerComponent,
                    ExtSpinuptriggerComponent,
                    ExtTimetriggerComponent,
                    ExtTriggerComponent,
                    ExtUrlfieldComponent,
                    ExtFieldsetComponent,
                    ExtFormpanelComponent,
                    ExtGridcellbaseComponent,
                    ExtBooleancellComponent,
                    ExtGridcellComponent,
                    ExtCheckcellComponent,
                    ExtDatecellComponent,
                    ExtNumbercellComponent,
                    ExtRownumberercellComponent,
                    ExtTextcellComponent,
                    ExtTreecellComponent,
                    ExtWidgetcellComponent,
                    ExtCelleditorComponent,
                    ExtBooleancolumnComponent,
                    ExtCheckcolumnComponent,
                    ExtGridcolumnComponent,
                    ExtColumnComponent,
                    ExtTemplatecolumnComponent,
                    ExtDatecolumnComponent,
                    ExtDragcolumnComponent,
                    ExtNumbercolumnComponent,
                    ExtRownumbererComponent,
                    ExtSelectioncolumnComponent,
                    ExtTextcolumnComponent,
                    ExtTreecolumnComponent,
                    ExtGridComponent,
                    ExtHeadercontainerComponent,
                    ExtLockedgridComponent,
                    ExtLockedgridregionComponent,
                    ExtGridcolumnsmenuComponent,
                    ExtGridgroupbythismenuitemComponent,
                    ExtGridshowingroupsmenuitemComponent,
                    ExtGridsortascmenuitemComponent,
                    ExtGridsortdescmenuitemComponent,
                    ExtPagingtoolbarComponent,
                    ExtGridrowComponent,
                    ExtRowbodyComponent,
                    ExtRoweditorbarComponent,
                    ExtRoweditorcellComponent,
                    ExtRoweditorComponent,
                    ExtRoweditorgapComponent,
                    ExtRowheaderComponent,
                    ExtGridsummaryrowComponent,
                    ExtTreeComponent,
                    ExtImageComponent,
                    ExtImgComponent,
                    ExtIndicatorComponent,
                    ExtLabelComponent,
                    ExtTreelistComponent,
                    ExtTreelistitemComponent,
                    ExtLoadmaskComponent,
                    ExtMaskComponent,
                    ExtMediaComponent,
                    ExtMenucheckitemComponent,
                    ExtMenuitemComponent,
                    ExtMenuComponent,
                    ExtMenuradioitemComponent,
                    ExtMenuseparatorComponent,
                    ExtMessageboxComponent,
                    ExtNavigationviewComponent,
                    ExtPanelComponent,
                    ExtAccordionComponent,
                    ExtDatepanelComponent,
                    ExtDatetitleComponent,
                    ExtPanelheaderComponent,
                    ExtTimepanelComponent,
                    ExtPaneltitleComponent,
                    ExtYearpickerComponent,
                    ExtDatepickerComponent,
                    ExtPickerComponent,
                    ExtSelectpickerComponent,
                    ExtPickerslotComponent,
                    ExtTabletpickerComponent,
                    ExtPivotgridcellComponent,
                    ExtPivotgridgroupcellComponent,
                    ExtPivotd3containerComponent,
                    ExtPivotheatmapComponent,
                    ExtPivottreemapComponent,
                    ExtPivotgridComponent,
                    ExtPivotconfigfieldComponent,
                    ExtPivotconfigcontainerComponent,
                    ExtPivotconfigformComponent,
                    ExtPivotconfigpanelComponent,
                    ExtPivotsettingsComponent,
                    ExtPivotrangeeditorComponent,
                    ExtPivotgridrowComponent,
                    ExtProgressComponent,
                    ExtProgressbarwidgetComponent,
                    ExtSegmentedbuttonComponent,
                    ExtSheetComponent,
                    ExtSliderComponent,
                    ExtThumbComponent,
                    ExtTogglesliderComponent,
                    ExtSpacerComponent,
                    ExtSparklinebarComponent,
                    ExtSparklineComponent,
                    ExtSparklineboxComponent,
                    ExtSparklinebulletComponent,
                    ExtSparklinediscreteComponent,
                    ExtSparklinelineComponent,
                    ExtSparklinepieComponent,
                    ExtSparklinetristateComponent,
                    ExtSplitbuttonComponent,
                    ExtTabbarComponent,
                    ExtTabpanelComponent,
                    ExtTabComponent,
                    ExtTooltipComponent,
                    ExtTitleComponent,
                    ExtTitlebarComponent,
                    ExtToolComponent,
                    ExtPaneltoolComponent,
                    ExtToolbarComponent,
                    ExtColorbuttonComponent,
                    ExtColorpickercolorpreviewComponent,
                    ExtColorfieldComponent,
                    ExtColorselectorComponent,
                    ExtGaugeComponent,
                    ExtMapComponent,
                    ExtGoogle_mapComponent,
                    ExtRatingComponent,
                    ExtVideoComponent,
                    ExtViewportComponent,
                    ExtWidgetComponent
                ],
                providers: [],
                entryComponents: [],
                exports: [
                    ExtAngularBootstrapComponent,
                    ExtActionsheetComponent,
                    ExtAudioComponent,
                    ExtBreadcrumbbarComponent,
                    ExtButtonComponent,
                    ExtCalendar_eventComponent,
                    ExtCalendar_form_addComponent,
                    ExtCalendar_calendar_pickerComponent,
                    ExtCalendar_form_editComponent,
                    ExtCalendar_timefieldComponent,
                    ExtCalendar_daysheaderComponent,
                    ExtCalendar_weeksheaderComponent,
                    ExtCalendar_listComponent,
                    ExtCalendar_dayComponent,
                    ExtCalendar_daysComponent,
                    ExtCalendar_monthComponent,
                    ExtCalendarComponent,
                    ExtCalendar_weekComponent,
                    ExtCalendar_weeksComponent,
                    ExtCalendar_dayviewComponent,
                    ExtCalendar_daysviewComponent,
                    ExtCalendar_monthviewComponent,
                    ExtCalendar_multiviewComponent,
                    ExtCalendar_weekviewComponent,
                    ExtCalendar_weeksviewComponent,
                    ExtCarouselComponent,
                    ExtAxis3dComponent,
                    ExtCartesianComponent,
                    ExtChartComponent,
                    ExtInteractionComponent,
                    ExtLegendComponent,
                    ExtChartnavigatorComponent,
                    ExtPolarComponent,
                    ExtSpacefillingComponent,
                    ExtChipComponent,
                    ExtComponentComponent,
                    ExtContainerComponent,
                    ExtD3_canvasComponent,
                    ExtD3_heatmapComponent,
                    ExtD3_packComponent,
                    ExtD3_partitionComponent,
                    ExtD3_sunburstComponent,
                    ExtD3_treeComponent,
                    ExtD3_horizontal_treeComponent,
                    ExtD3_treemapComponent,
                    ExtD3_svgComponent,
                    ExtD3Component,
                    ExtBoundlistComponent,
                    ExtChipviewComponent,
                    ExtComponentdataviewComponent,
                    ExtDataitemComponent,
                    ExtDataviewComponent,
                    ExtEmptytextComponent,
                    ExtIndexbarComponent,
                    ExtItemheaderComponent,
                    ExtListComponent,
                    ExtListitemComponent,
                    ExtListitemplaceholderComponent,
                    ExtListswiperitemComponent,
                    ExtListswiperstepperComponent,
                    ExtNestedlistComponent,
                    ExtPullrefreshbarComponent,
                    ExtPullrefreshspinnerComponent,
                    ExtSimplelistitemComponent,
                    ExtDialogComponent,
                    ExtWindowComponent,
                    ExtDrawComponent,
                    ExtSurfaceComponent,
                    ExtEditorComponent,
                    ExtCheckboxComponent,
                    ExtCheckboxfieldComponent,
                    ExtCheckboxgroupComponent,
                    ExtComboboxComponent,
                    ExtComboboxfieldComponent,
                    ExtContainerfieldComponent,
                    ExtFieldcontainerComponent,
                    ExtDatefieldComponent,
                    ExtDatepickerfieldComponent,
                    ExtDatepickernativefieldComponent,
                    ExtDisplayfieldComponent,
                    ExtEmailfieldComponent,
                    ExtFieldComponent,
                    ExtGroupcontainerComponent,
                    ExtFilefieldComponent,
                    ExtFilebuttonComponent,
                    ExtHiddenfieldComponent,
                    ExtInputfieldComponent,
                    ExtNumberfieldComponent,
                    ExtFieldpanelComponent,
                    ExtPasswordfieldComponent,
                    ExtPickerfieldComponent,
                    ExtRadioComponent,
                    ExtRadiofieldComponent,
                    ExtRadiogroupComponent,
                    ExtSearchfieldComponent,
                    ExtSelectfieldComponent,
                    ExtSinglesliderfieldComponent,
                    ExtSliderfieldComponent,
                    ExtSpinnerfieldComponent,
                    ExtTextfieldComponent,
                    ExtTextareafieldComponent,
                    ExtTimefieldComponent,
                    ExtTogglefieldComponent,
                    ExtCleartriggerComponent,
                    ExtDatetriggerComponent,
                    ExtExpandtriggerComponent,
                    ExtMenutriggerComponent,
                    ExtRevealtriggerComponent,
                    ExtSpindowntriggerComponent,
                    ExtSpinuptriggerComponent,
                    ExtTimetriggerComponent,
                    ExtTriggerComponent,
                    ExtUrlfieldComponent,
                    ExtFieldsetComponent,
                    ExtFormpanelComponent,
                    ExtGridcellbaseComponent,
                    ExtBooleancellComponent,
                    ExtGridcellComponent,
                    ExtCheckcellComponent,
                    ExtDatecellComponent,
                    ExtNumbercellComponent,
                    ExtRownumberercellComponent,
                    ExtTextcellComponent,
                    ExtTreecellComponent,
                    ExtWidgetcellComponent,
                    ExtCelleditorComponent,
                    ExtBooleancolumnComponent,
                    ExtCheckcolumnComponent,
                    ExtGridcolumnComponent,
                    ExtColumnComponent,
                    ExtTemplatecolumnComponent,
                    ExtDatecolumnComponent,
                    ExtDragcolumnComponent,
                    ExtNumbercolumnComponent,
                    ExtRownumbererComponent,
                    ExtSelectioncolumnComponent,
                    ExtTextcolumnComponent,
                    ExtTreecolumnComponent,
                    ExtGridComponent,
                    ExtHeadercontainerComponent,
                    ExtLockedgridComponent,
                    ExtLockedgridregionComponent,
                    ExtGridcolumnsmenuComponent,
                    ExtGridgroupbythismenuitemComponent,
                    ExtGridshowingroupsmenuitemComponent,
                    ExtGridsortascmenuitemComponent,
                    ExtGridsortdescmenuitemComponent,
                    ExtPagingtoolbarComponent,
                    ExtGridrowComponent,
                    ExtRowbodyComponent,
                    ExtRoweditorbarComponent,
                    ExtRoweditorcellComponent,
                    ExtRoweditorComponent,
                    ExtRoweditorgapComponent,
                    ExtRowheaderComponent,
                    ExtGridsummaryrowComponent,
                    ExtTreeComponent,
                    ExtImageComponent,
                    ExtImgComponent,
                    ExtIndicatorComponent,
                    ExtLabelComponent,
                    ExtTreelistComponent,
                    ExtTreelistitemComponent,
                    ExtLoadmaskComponent,
                    ExtMaskComponent,
                    ExtMediaComponent,
                    ExtMenucheckitemComponent,
                    ExtMenuitemComponent,
                    ExtMenuComponent,
                    ExtMenuradioitemComponent,
                    ExtMenuseparatorComponent,
                    ExtMessageboxComponent,
                    ExtNavigationviewComponent,
                    ExtPanelComponent,
                    ExtAccordionComponent,
                    ExtDatepanelComponent,
                    ExtDatetitleComponent,
                    ExtPanelheaderComponent,
                    ExtTimepanelComponent,
                    ExtPaneltitleComponent,
                    ExtYearpickerComponent,
                    ExtDatepickerComponent,
                    ExtPickerComponent,
                    ExtSelectpickerComponent,
                    ExtPickerslotComponent,
                    ExtTabletpickerComponent,
                    ExtPivotgridcellComponent,
                    ExtPivotgridgroupcellComponent,
                    ExtPivotd3containerComponent,
                    ExtPivotheatmapComponent,
                    ExtPivottreemapComponent,
                    ExtPivotgridComponent,
                    ExtPivotconfigfieldComponent,
                    ExtPivotconfigcontainerComponent,
                    ExtPivotconfigformComponent,
                    ExtPivotconfigpanelComponent,
                    ExtPivotsettingsComponent,
                    ExtPivotrangeeditorComponent,
                    ExtPivotgridrowComponent,
                    ExtProgressComponent,
                    ExtProgressbarwidgetComponent,
                    ExtSegmentedbuttonComponent,
                    ExtSheetComponent,
                    ExtSliderComponent,
                    ExtThumbComponent,
                    ExtTogglesliderComponent,
                    ExtSpacerComponent,
                    ExtSparklinebarComponent,
                    ExtSparklineComponent,
                    ExtSparklineboxComponent,
                    ExtSparklinebulletComponent,
                    ExtSparklinediscreteComponent,
                    ExtSparklinelineComponent,
                    ExtSparklinepieComponent,
                    ExtSparklinetristateComponent,
                    ExtSplitbuttonComponent,
                    ExtTabbarComponent,
                    ExtTabpanelComponent,
                    ExtTabComponent,
                    ExtTooltipComponent,
                    ExtTitleComponent,
                    ExtTitlebarComponent,
                    ExtToolComponent,
                    ExtPaneltoolComponent,
                    ExtToolbarComponent,
                    ExtColorbuttonComponent,
                    ExtColorpickercolorpreviewComponent,
                    ExtColorfieldComponent,
                    ExtColorselectorComponent,
                    ExtGaugeComponent,
                    ExtMapComponent,
                    ExtGoogle_mapComponent,
                    ExtRatingComponent,
                    ExtVideoComponent,
                    ExtViewportComponent,
                    ExtWidgetComponent
                ]
            })
        ], ExtAngularModule);
        return ExtAngularModule;
    }());

    exports.ExtAngularModule = ExtAngularModule;
    exports.ɵa = ExtAngularBootstrapComponent;
    exports.ɵb = ExtAngularBootstrapService;
    exports.ɵba = ExtCalendar_listComponent;
    exports.ɵbb = calendar_dayMetaData;
    exports.ɵbc = ExtCalendar_dayComponent;
    exports.ɵbd = calendar_daysMetaData;
    exports.ɵbe = ExtCalendar_daysComponent;
    exports.ɵbf = calendar_monthMetaData;
    exports.ɵbg = ExtCalendar_monthComponent;
    exports.ɵbh = calendarMetaData;
    exports.ɵbi = ExtCalendarComponent;
    exports.ɵbj = calendar_weekMetaData;
    exports.ɵbk = ExtCalendar_weekComponent;
    exports.ɵbl = calendar_weeksMetaData;
    exports.ɵbm = ExtCalendar_weeksComponent;
    exports.ɵbn = calendar_dayviewMetaData;
    exports.ɵbo = ExtCalendar_dayviewComponent;
    exports.ɵbp = calendar_daysviewMetaData;
    exports.ɵbq = ExtCalendar_daysviewComponent;
    exports.ɵbr = calendar_monthviewMetaData;
    exports.ɵbs = ExtCalendar_monthviewComponent;
    exports.ɵbt = calendar_multiviewMetaData;
    exports.ɵbu = ExtCalendar_multiviewComponent;
    exports.ɵbv = calendar_weekviewMetaData;
    exports.ɵbw = ExtCalendar_weekviewComponent;
    exports.ɵbx = calendar_weeksviewMetaData;
    exports.ɵby = ExtCalendar_weeksviewComponent;
    exports.ɵbz = carouselMetaData;
    exports.ɵc = actionsheetMetaData;
    exports.ɵca = ExtCarouselComponent;
    exports.ɵcb = axis3dMetaData;
    exports.ɵcc = ExtAxis3dComponent;
    exports.ɵcd = cartesianMetaData;
    exports.ɵce = ExtCartesianComponent;
    exports.ɵcf = chartMetaData;
    exports.ɵcg = ExtChartComponent;
    exports.ɵch = interactionMetaData;
    exports.ɵci = ExtInteractionComponent;
    exports.ɵcj = legendMetaData;
    exports.ɵck = ExtLegendComponent;
    exports.ɵcl = chartnavigatorMetaData;
    exports.ɵcm = ExtChartnavigatorComponent;
    exports.ɵcn = polarMetaData;
    exports.ɵco = ExtPolarComponent;
    exports.ɵcp = spacefillingMetaData;
    exports.ɵcq = ExtSpacefillingComponent;
    exports.ɵcr = chipMetaData;
    exports.ɵcs = ExtChipComponent;
    exports.ɵct = componentMetaData;
    exports.ɵcu = ExtComponentComponent;
    exports.ɵcv = containerMetaData;
    exports.ɵcw = ExtContainerComponent;
    exports.ɵcx = d3_canvasMetaData;
    exports.ɵcy = ExtD3_canvasComponent;
    exports.ɵcz = d3_heatmapMetaData;
    exports.ɵd = ExtActionsheetComponent;
    exports.ɵda = ExtD3_heatmapComponent;
    exports.ɵdb = d3_packMetaData;
    exports.ɵdc = ExtD3_packComponent;
    exports.ɵdd = d3_partitionMetaData;
    exports.ɵde = ExtD3_partitionComponent;
    exports.ɵdf = d3_sunburstMetaData;
    exports.ɵdg = ExtD3_sunburstComponent;
    exports.ɵdh = d3_treeMetaData;
    exports.ɵdi = ExtD3_treeComponent;
    exports.ɵdj = d3_horizontal_treeMetaData;
    exports.ɵdk = ExtD3_horizontal_treeComponent;
    exports.ɵdl = d3_treemapMetaData;
    exports.ɵdm = ExtD3_treemapComponent;
    exports.ɵdn = d3_svgMetaData;
    exports.ɵdo = ExtD3_svgComponent;
    exports.ɵdp = d3MetaData;
    exports.ɵdq = ExtD3Component;
    exports.ɵdr = boundlistMetaData;
    exports.ɵds = ExtBoundlistComponent;
    exports.ɵdt = chipviewMetaData;
    exports.ɵdu = ExtChipviewComponent;
    exports.ɵdv = componentdataviewMetaData;
    exports.ɵdw = ExtComponentdataviewComponent;
    exports.ɵdx = dataitemMetaData;
    exports.ɵdy = ExtDataitemComponent;
    exports.ɵdz = dataviewMetaData;
    exports.ɵe = base;
    exports.ɵea = ExtDataviewComponent;
    exports.ɵeb = emptytextMetaData;
    exports.ɵec = ExtEmptytextComponent;
    exports.ɵed = indexbarMetaData;
    exports.ɵee = ExtIndexbarComponent;
    exports.ɵef = itemheaderMetaData;
    exports.ɵeg = ExtItemheaderComponent;
    exports.ɵeh = listMetaData;
    exports.ɵei = ExtListComponent;
    exports.ɵej = listitemMetaData;
    exports.ɵek = ExtListitemComponent;
    exports.ɵel = listitemplaceholderMetaData;
    exports.ɵem = ExtListitemplaceholderComponent;
    exports.ɵen = listswiperitemMetaData;
    exports.ɵeo = ExtListswiperitemComponent;
    exports.ɵep = listswiperstepperMetaData;
    exports.ɵeq = ExtListswiperstepperComponent;
    exports.ɵer = nestedlistMetaData;
    exports.ɵes = ExtNestedlistComponent;
    exports.ɵet = pullrefreshbarMetaData;
    exports.ɵeu = ExtPullrefreshbarComponent;
    exports.ɵev = pullrefreshspinnerMetaData;
    exports.ɵew = ExtPullrefreshspinnerComponent;
    exports.ɵex = simplelistitemMetaData;
    exports.ɵey = ExtSimplelistitemComponent;
    exports.ɵez = dialogMetaData;
    exports.ɵf = audioMetaData;
    exports.ɵfa = ExtDialogComponent;
    exports.ɵfb = windowMetaData;
    exports.ɵfc = ExtWindowComponent;
    exports.ɵfd = drawMetaData;
    exports.ɵfe = ExtDrawComponent;
    exports.ɵff = surfaceMetaData;
    exports.ɵfg = ExtSurfaceComponent;
    exports.ɵfh = editorMetaData;
    exports.ɵfi = ExtEditorComponent;
    exports.ɵfj = checkboxMetaData;
    exports.ɵfk = ExtCheckboxComponent;
    exports.ɵfl = checkboxfieldMetaData;
    exports.ɵfm = ExtCheckboxfieldComponent;
    exports.ɵfn = checkboxgroupMetaData;
    exports.ɵfo = ExtCheckboxgroupComponent;
    exports.ɵfp = comboboxMetaData;
    exports.ɵfq = ExtComboboxComponent;
    exports.ɵfr = comboboxfieldMetaData;
    exports.ɵfs = ExtComboboxfieldComponent;
    exports.ɵft = containerfieldMetaData;
    exports.ɵfu = ExtContainerfieldComponent;
    exports.ɵfv = fieldcontainerMetaData;
    exports.ɵfw = ExtFieldcontainerComponent;
    exports.ɵfx = datefieldMetaData;
    exports.ɵfy = ExtDatefieldComponent;
    exports.ɵfz = datepickerfieldMetaData;
    exports.ɵg = ExtAudioComponent;
    exports.ɵga = ExtDatepickerfieldComponent;
    exports.ɵgb = datepickernativefieldMetaData;
    exports.ɵgc = ExtDatepickernativefieldComponent;
    exports.ɵgd = displayfieldMetaData;
    exports.ɵge = ExtDisplayfieldComponent;
    exports.ɵgf = emailfieldMetaData;
    exports.ɵgg = ExtEmailfieldComponent;
    exports.ɵgh = fieldMetaData;
    exports.ɵgi = ExtFieldComponent;
    exports.ɵgj = groupcontainerMetaData;
    exports.ɵgk = ExtGroupcontainerComponent;
    exports.ɵgl = filefieldMetaData;
    exports.ɵgm = ExtFilefieldComponent;
    exports.ɵgn = filebuttonMetaData;
    exports.ɵgo = ExtFilebuttonComponent;
    exports.ɵgp = hiddenfieldMetaData;
    exports.ɵgq = ExtHiddenfieldComponent;
    exports.ɵgr = inputfieldMetaData;
    exports.ɵgs = ExtInputfieldComponent;
    exports.ɵgt = numberfieldMetaData;
    exports.ɵgu = ExtNumberfieldComponent;
    exports.ɵgv = fieldpanelMetaData;
    exports.ɵgw = ExtFieldpanelComponent;
    exports.ɵgx = passwordfieldMetaData;
    exports.ɵgy = ExtPasswordfieldComponent;
    exports.ɵgz = pickerfieldMetaData;
    exports.ɵh = breadcrumbbarMetaData;
    exports.ɵha = ExtPickerfieldComponent;
    exports.ɵhb = radioMetaData;
    exports.ɵhc = ExtRadioComponent;
    exports.ɵhd = radiofieldMetaData;
    exports.ɵhe = ExtRadiofieldComponent;
    exports.ɵhf = radiogroupMetaData;
    exports.ɵhg = ExtRadiogroupComponent;
    exports.ɵhh = searchfieldMetaData;
    exports.ɵhi = ExtSearchfieldComponent;
    exports.ɵhj = selectfieldMetaData;
    exports.ɵhk = ExtSelectfieldComponent;
    exports.ɵhl = singlesliderfieldMetaData;
    exports.ɵhm = ExtSinglesliderfieldComponent;
    exports.ɵhn = sliderfieldMetaData;
    exports.ɵho = ExtSliderfieldComponent;
    exports.ɵhp = spinnerfieldMetaData;
    exports.ɵhq = ExtSpinnerfieldComponent;
    exports.ɵhr = textfieldMetaData;
    exports.ɵhs = ExtTextfieldComponent;
    exports.ɵht = textareafieldMetaData;
    exports.ɵhu = ExtTextareafieldComponent;
    exports.ɵhv = timefieldMetaData;
    exports.ɵhw = ExtTimefieldComponent;
    exports.ɵhx = togglefieldMetaData;
    exports.ɵhy = ExtTogglefieldComponent;
    exports.ɵhz = cleartriggerMetaData;
    exports.ɵi = ExtBreadcrumbbarComponent;
    exports.ɵia = ExtCleartriggerComponent;
    exports.ɵib = datetriggerMetaData;
    exports.ɵic = ExtDatetriggerComponent;
    exports.ɵid = expandtriggerMetaData;
    exports.ɵie = ExtExpandtriggerComponent;
    exports.ɵif = menutriggerMetaData;
    exports.ɵig = ExtMenutriggerComponent;
    exports.ɵih = revealtriggerMetaData;
    exports.ɵii = ExtRevealtriggerComponent;
    exports.ɵij = spindowntriggerMetaData;
    exports.ɵik = ExtSpindowntriggerComponent;
    exports.ɵil = spinuptriggerMetaData;
    exports.ɵim = ExtSpinuptriggerComponent;
    exports.ɵin = timetriggerMetaData;
    exports.ɵio = ExtTimetriggerComponent;
    exports.ɵip = triggerMetaData;
    exports.ɵiq = ExtTriggerComponent;
    exports.ɵir = urlfieldMetaData;
    exports.ɵis = ExtUrlfieldComponent;
    exports.ɵit = fieldsetMetaData;
    exports.ɵiu = ExtFieldsetComponent;
    exports.ɵiv = formpanelMetaData;
    exports.ɵiw = ExtFormpanelComponent;
    exports.ɵix = gridcellbaseMetaData;
    exports.ɵiy = ExtGridcellbaseComponent;
    exports.ɵiz = booleancellMetaData;
    exports.ɵj = buttonMetaData;
    exports.ɵja = ExtBooleancellComponent;
    exports.ɵjb = gridcellMetaData;
    exports.ɵjc = ExtGridcellComponent;
    exports.ɵjd = checkcellMetaData;
    exports.ɵje = ExtCheckcellComponent;
    exports.ɵjf = datecellMetaData;
    exports.ɵjg = ExtDatecellComponent;
    exports.ɵjh = numbercellMetaData;
    exports.ɵji = ExtNumbercellComponent;
    exports.ɵjj = rownumberercellMetaData;
    exports.ɵjk = ExtRownumberercellComponent;
    exports.ɵjl = textcellMetaData;
    exports.ɵjm = ExtTextcellComponent;
    exports.ɵjn = treecellMetaData;
    exports.ɵjo = ExtTreecellComponent;
    exports.ɵjp = widgetcellMetaData;
    exports.ɵjq = ExtWidgetcellComponent;
    exports.ɵjr = celleditorMetaData;
    exports.ɵjs = ExtCelleditorComponent;
    exports.ɵjt = booleancolumnMetaData;
    exports.ɵju = ExtBooleancolumnComponent;
    exports.ɵjv = checkcolumnMetaData;
    exports.ɵjw = ExtCheckcolumnComponent;
    exports.ɵjx = gridcolumnMetaData;
    exports.ɵjy = ExtGridcolumnComponent;
    exports.ɵjz = columnMetaData;
    exports.ɵk = ExtButtonComponent;
    exports.ɵka = ExtColumnComponent;
    exports.ɵkb = templatecolumnMetaData;
    exports.ɵkc = ExtTemplatecolumnComponent;
    exports.ɵkd = datecolumnMetaData;
    exports.ɵke = ExtDatecolumnComponent;
    exports.ɵkf = dragcolumnMetaData;
    exports.ɵkg = ExtDragcolumnComponent;
    exports.ɵkh = numbercolumnMetaData;
    exports.ɵki = ExtNumbercolumnComponent;
    exports.ɵkj = rownumbererMetaData;
    exports.ɵkk = ExtRownumbererComponent;
    exports.ɵkl = selectioncolumnMetaData;
    exports.ɵkm = ExtSelectioncolumnComponent;
    exports.ɵkn = textcolumnMetaData;
    exports.ɵko = ExtTextcolumnComponent;
    exports.ɵkp = treecolumnMetaData;
    exports.ɵkq = ExtTreecolumnComponent;
    exports.ɵkr = gridMetaData;
    exports.ɵks = ExtGridComponent;
    exports.ɵkt = headercontainerMetaData;
    exports.ɵku = ExtHeadercontainerComponent;
    exports.ɵkv = lockedgridMetaData;
    exports.ɵkw = ExtLockedgridComponent;
    exports.ɵkx = lockedgridregionMetaData;
    exports.ɵky = ExtLockedgridregionComponent;
    exports.ɵkz = gridcolumnsmenuMetaData;
    exports.ɵl = calendar_eventMetaData;
    exports.ɵla = ExtGridcolumnsmenuComponent;
    exports.ɵlb = gridgroupbythismenuitemMetaData;
    exports.ɵlc = ExtGridgroupbythismenuitemComponent;
    exports.ɵld = gridshowingroupsmenuitemMetaData;
    exports.ɵle = ExtGridshowingroupsmenuitemComponent;
    exports.ɵlf = gridsortascmenuitemMetaData;
    exports.ɵlg = ExtGridsortascmenuitemComponent;
    exports.ɵlh = gridsortdescmenuitemMetaData;
    exports.ɵli = ExtGridsortdescmenuitemComponent;
    exports.ɵlj = pagingtoolbarMetaData;
    exports.ɵlk = ExtPagingtoolbarComponent;
    exports.ɵll = gridrowMetaData;
    exports.ɵlm = ExtGridrowComponent;
    exports.ɵln = rowbodyMetaData;
    exports.ɵlo = ExtRowbodyComponent;
    exports.ɵlp = roweditorbarMetaData;
    exports.ɵlq = ExtRoweditorbarComponent;
    exports.ɵlr = roweditorcellMetaData;
    exports.ɵls = ExtRoweditorcellComponent;
    exports.ɵlt = roweditorMetaData;
    exports.ɵlu = ExtRoweditorComponent;
    exports.ɵlv = roweditorgapMetaData;
    exports.ɵlw = ExtRoweditorgapComponent;
    exports.ɵlx = rowheaderMetaData;
    exports.ɵly = ExtRowheaderComponent;
    exports.ɵlz = gridsummaryrowMetaData;
    exports.ɵm = ExtCalendar_eventComponent;
    exports.ɵma = ExtGridsummaryrowComponent;
    exports.ɵmb = treeMetaData;
    exports.ɵmc = ExtTreeComponent;
    exports.ɵmd = imageMetaData;
    exports.ɵme = ExtImageComponent;
    exports.ɵmf = imgMetaData;
    exports.ɵmg = ExtImgComponent;
    exports.ɵmh = indicatorMetaData;
    exports.ɵmi = ExtIndicatorComponent;
    exports.ɵmj = labelMetaData;
    exports.ɵmk = ExtLabelComponent;
    exports.ɵml = treelistMetaData;
    exports.ɵmm = ExtTreelistComponent;
    exports.ɵmn = treelistitemMetaData;
    exports.ɵmo = ExtTreelistitemComponent;
    exports.ɵmp = loadmaskMetaData;
    exports.ɵmq = ExtLoadmaskComponent;
    exports.ɵmr = maskMetaData;
    exports.ɵms = ExtMaskComponent;
    exports.ɵmt = mediaMetaData;
    exports.ɵmu = ExtMediaComponent;
    exports.ɵmv = menucheckitemMetaData;
    exports.ɵmw = ExtMenucheckitemComponent;
    exports.ɵmx = menuitemMetaData;
    exports.ɵmy = ExtMenuitemComponent;
    exports.ɵmz = menuMetaData;
    exports.ɵn = calendar_form_addMetaData;
    exports.ɵna = ExtMenuComponent;
    exports.ɵnb = menuradioitemMetaData;
    exports.ɵnc = ExtMenuradioitemComponent;
    exports.ɵnd = menuseparatorMetaData;
    exports.ɵne = ExtMenuseparatorComponent;
    exports.ɵnf = messageboxMetaData;
    exports.ɵng = ExtMessageboxComponent;
    exports.ɵnh = navigationviewMetaData;
    exports.ɵni = ExtNavigationviewComponent;
    exports.ɵnj = panelMetaData;
    exports.ɵnk = ExtPanelComponent;
    exports.ɵnl = accordionMetaData;
    exports.ɵnm = ExtAccordionComponent;
    exports.ɵnn = datepanelMetaData;
    exports.ɵno = ExtDatepanelComponent;
    exports.ɵnp = datetitleMetaData;
    exports.ɵnq = ExtDatetitleComponent;
    exports.ɵnr = panelheaderMetaData;
    exports.ɵns = ExtPanelheaderComponent;
    exports.ɵnt = timepanelMetaData;
    exports.ɵnu = ExtTimepanelComponent;
    exports.ɵnv = paneltitleMetaData;
    exports.ɵnw = ExtPaneltitleComponent;
    exports.ɵnx = yearpickerMetaData;
    exports.ɵny = ExtYearpickerComponent;
    exports.ɵnz = datepickerMetaData;
    exports.ɵo = ExtCalendar_form_addComponent;
    exports.ɵoa = ExtDatepickerComponent;
    exports.ɵob = pickerMetaData;
    exports.ɵoc = ExtPickerComponent;
    exports.ɵod = selectpickerMetaData;
    exports.ɵoe = ExtSelectpickerComponent;
    exports.ɵof = pickerslotMetaData;
    exports.ɵog = ExtPickerslotComponent;
    exports.ɵoh = tabletpickerMetaData;
    exports.ɵoi = ExtTabletpickerComponent;
    exports.ɵoj = pivotgridcellMetaData;
    exports.ɵok = ExtPivotgridcellComponent;
    exports.ɵol = pivotgridgroupcellMetaData;
    exports.ɵom = ExtPivotgridgroupcellComponent;
    exports.ɵon = pivotd3containerMetaData;
    exports.ɵoo = ExtPivotd3containerComponent;
    exports.ɵop = pivotheatmapMetaData;
    exports.ɵoq = ExtPivotheatmapComponent;
    exports.ɵor = pivottreemapMetaData;
    exports.ɵos = ExtPivottreemapComponent;
    exports.ɵot = pivotgridMetaData;
    exports.ɵou = ExtPivotgridComponent;
    exports.ɵov = pivotconfigfieldMetaData;
    exports.ɵow = ExtPivotconfigfieldComponent;
    exports.ɵox = pivotconfigcontainerMetaData;
    exports.ɵoy = ExtPivotconfigcontainerComponent;
    exports.ɵoz = pivotconfigformMetaData;
    exports.ɵp = calendar_calendar_pickerMetaData;
    exports.ɵpa = ExtPivotconfigformComponent;
    exports.ɵpb = pivotconfigpanelMetaData;
    exports.ɵpc = ExtPivotconfigpanelComponent;
    exports.ɵpd = pivotsettingsMetaData;
    exports.ɵpe = ExtPivotsettingsComponent;
    exports.ɵpf = pivotrangeeditorMetaData;
    exports.ɵpg = ExtPivotrangeeditorComponent;
    exports.ɵph = pivotgridrowMetaData;
    exports.ɵpi = ExtPivotgridrowComponent;
    exports.ɵpj = progressMetaData;
    exports.ɵpk = ExtProgressComponent;
    exports.ɵpl = progressbarwidgetMetaData;
    exports.ɵpm = ExtProgressbarwidgetComponent;
    exports.ɵpn = segmentedbuttonMetaData;
    exports.ɵpo = ExtSegmentedbuttonComponent;
    exports.ɵpp = sheetMetaData;
    exports.ɵpq = ExtSheetComponent;
    exports.ɵpr = sliderMetaData;
    exports.ɵps = ExtSliderComponent;
    exports.ɵpt = thumbMetaData;
    exports.ɵpu = ExtThumbComponent;
    exports.ɵpv = togglesliderMetaData;
    exports.ɵpw = ExtTogglesliderComponent;
    exports.ɵpx = spacerMetaData;
    exports.ɵpy = ExtSpacerComponent;
    exports.ɵpz = sparklinebarMetaData;
    exports.ɵq = ExtCalendar_calendar_pickerComponent;
    exports.ɵqa = ExtSparklinebarComponent;
    exports.ɵqb = sparklineMetaData;
    exports.ɵqc = ExtSparklineComponent;
    exports.ɵqd = sparklineboxMetaData;
    exports.ɵqe = ExtSparklineboxComponent;
    exports.ɵqf = sparklinebulletMetaData;
    exports.ɵqg = ExtSparklinebulletComponent;
    exports.ɵqh = sparklinediscreteMetaData;
    exports.ɵqi = ExtSparklinediscreteComponent;
    exports.ɵqj = sparklinelineMetaData;
    exports.ɵqk = ExtSparklinelineComponent;
    exports.ɵql = sparklinepieMetaData;
    exports.ɵqm = ExtSparklinepieComponent;
    exports.ɵqn = sparklinetristateMetaData;
    exports.ɵqo = ExtSparklinetristateComponent;
    exports.ɵqp = splitbuttonMetaData;
    exports.ɵqq = ExtSplitbuttonComponent;
    exports.ɵqr = tabbarMetaData;
    exports.ɵqs = ExtTabbarComponent;
    exports.ɵqt = tabpanelMetaData;
    exports.ɵqu = ExtTabpanelComponent;
    exports.ɵqv = tabMetaData;
    exports.ɵqw = ExtTabComponent;
    exports.ɵqx = tooltipMetaData;
    exports.ɵqy = ExtTooltipComponent;
    exports.ɵqz = titleMetaData;
    exports.ɵr = calendar_form_editMetaData;
    exports.ɵra = ExtTitleComponent;
    exports.ɵrb = titlebarMetaData;
    exports.ɵrc = ExtTitlebarComponent;
    exports.ɵrd = toolMetaData;
    exports.ɵre = ExtToolComponent;
    exports.ɵrf = paneltoolMetaData;
    exports.ɵrg = ExtPaneltoolComponent;
    exports.ɵrh = toolbarMetaData;
    exports.ɵri = ExtToolbarComponent;
    exports.ɵrj = colorbuttonMetaData;
    exports.ɵrk = ExtColorbuttonComponent;
    exports.ɵrl = colorpickercolorpreviewMetaData;
    exports.ɵrm = ExtColorpickercolorpreviewComponent;
    exports.ɵrn = colorfieldMetaData;
    exports.ɵro = ExtColorfieldComponent;
    exports.ɵrp = colorselectorMetaData;
    exports.ɵrq = ExtColorselectorComponent;
    exports.ɵrr = gaugeMetaData;
    exports.ɵrs = ExtGaugeComponent;
    exports.ɵrt = mapMetaData;
    exports.ɵru = ExtMapComponent;
    exports.ɵrv = google_mapMetaData;
    exports.ɵrw = ExtGoogle_mapComponent;
    exports.ɵrx = ratingMetaData;
    exports.ɵry = ExtRatingComponent;
    exports.ɵrz = videoMetaData;
    exports.ɵs = ExtCalendar_form_editComponent;
    exports.ɵsa = ExtVideoComponent;
    exports.ɵsb = viewportMetaData;
    exports.ɵsc = ExtViewportComponent;
    exports.ɵsd = widgetMetaData;
    exports.ɵse = ExtWidgetComponent;
    exports.ɵt = calendar_timefieldMetaData;
    exports.ɵu = ExtCalendar_timefieldComponent;
    exports.ɵv = calendar_daysheaderMetaData;
    exports.ɵw = ExtCalendar_daysheaderComponent;
    exports.ɵx = calendar_weeksheaderMetaData;
    exports.ɵy = ExtCalendar_weeksheaderComponent;
    exports.ɵz = calendar_listMetaData;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=sencha-ext-angular.umd.js.map
